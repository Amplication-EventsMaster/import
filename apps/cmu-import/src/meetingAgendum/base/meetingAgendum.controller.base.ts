/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeetingAgendumService } from "../meetingAgendum.service";
import { MeetingAgendumCreateInput } from "./MeetingAgendumCreateInput";
import { MeetingAgendum } from "./MeetingAgendum";
import { MeetingAgendumFindManyArgs } from "./MeetingAgendumFindManyArgs";
import { MeetingAgendumWhereUniqueInput } from "./MeetingAgendumWhereUniqueInput";
import { MeetingAgendumUpdateInput } from "./MeetingAgendumUpdateInput";

export class MeetingAgendumControllerBase {
  constructor(protected readonly service: MeetingAgendumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MeetingAgendum })
  async createMeetingAgendum(
    @common.Body() data: MeetingAgendumCreateInput
  ): Promise<MeetingAgendum> {
    return await this.service.createMeetingAgendum({
      data: data,
      select: {
        id: true,
        meetingId: true,
        presentOrder: true,
        studentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MeetingAgendum] })
  @ApiNestedQuery(MeetingAgendumFindManyArgs)
  async meetingAgenda(
    @common.Req() request: Request
  ): Promise<MeetingAgendum[]> {
    const args = plainToClass(MeetingAgendumFindManyArgs, request.query);
    return this.service.meetingAgenda({
      ...args,
      select: {
        id: true,
        meetingId: true,
        presentOrder: true,
        studentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MeetingAgendum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meetingAgendum(
    @common.Param() params: MeetingAgendumWhereUniqueInput
  ): Promise<MeetingAgendum | null> {
    const result = await this.service.meetingAgendum({
      where: params,
      select: {
        id: true,
        meetingId: true,
        presentOrder: true,
        studentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MeetingAgendum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeetingAgendum(
    @common.Param() params: MeetingAgendumWhereUniqueInput,
    @common.Body() data: MeetingAgendumUpdateInput
  ): Promise<MeetingAgendum | null> {
    try {
      return await this.service.updateMeetingAgendum({
        where: params,
        data: data,
        select: {
          id: true,
          meetingId: true,
          presentOrder: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MeetingAgendum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeetingAgendum(
    @common.Param() params: MeetingAgendumWhereUniqueInput
  ): Promise<MeetingAgendum | null> {
    try {
      return await this.service.deleteMeetingAgendum({
        where: params,
        select: {
          id: true,
          meetingId: true,
          presentOrder: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
