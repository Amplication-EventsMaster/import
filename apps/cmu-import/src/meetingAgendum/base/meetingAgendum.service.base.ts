/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MeetingAgendum as PrismaMeetingAgendum } from "@prisma/client";

export class MeetingAgendumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeetingAgendumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.meetingAgendum.count(args);
  }

  async meetingAgenda<T extends Prisma.MeetingAgendumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingAgendumFindManyArgs>
  ): Promise<PrismaMeetingAgendum[]> {
    return this.prisma.meetingAgendum.findMany<Prisma.MeetingAgendumFindManyArgs>(
      args
    );
  }
  async meetingAgendum<T extends Prisma.MeetingAgendumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingAgendumFindUniqueArgs>
  ): Promise<PrismaMeetingAgendum | null> {
    return this.prisma.meetingAgendum.findUnique(args);
  }
  async createMeetingAgendum<T extends Prisma.MeetingAgendumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingAgendumCreateArgs>
  ): Promise<PrismaMeetingAgendum> {
    return this.prisma.meetingAgendum.create<T>(args);
  }
  async updateMeetingAgendum<T extends Prisma.MeetingAgendumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingAgendumUpdateArgs>
  ): Promise<PrismaMeetingAgendum> {
    return this.prisma.meetingAgendum.update<T>(args);
  }
  async deleteMeetingAgendum<T extends Prisma.MeetingAgendumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingAgendumDeleteArgs>
  ): Promise<PrismaMeetingAgendum> {
    return this.prisma.meetingAgendum.delete(args);
  }
}
