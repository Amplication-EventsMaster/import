/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MeetingAgendum } from "./MeetingAgendum";
import { MeetingAgendumCountArgs } from "./MeetingAgendumCountArgs";
import { MeetingAgendumFindManyArgs } from "./MeetingAgendumFindManyArgs";
import { MeetingAgendumFindUniqueArgs } from "./MeetingAgendumFindUniqueArgs";
import { CreateMeetingAgendumArgs } from "./CreateMeetingAgendumArgs";
import { UpdateMeetingAgendumArgs } from "./UpdateMeetingAgendumArgs";
import { DeleteMeetingAgendumArgs } from "./DeleteMeetingAgendumArgs";
import { MeetingAgendumService } from "../meetingAgendum.service";
@graphql.Resolver(() => MeetingAgendum)
export class MeetingAgendumResolverBase {
  constructor(protected readonly service: MeetingAgendumService) {}

  async _meetingAgendaMeta(
    @graphql.Args() args: MeetingAgendumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MeetingAgendum])
  async meetingAgenda(
    @graphql.Args() args: MeetingAgendumFindManyArgs
  ): Promise<MeetingAgendum[]> {
    return this.service.meetingAgenda(args);
  }

  @graphql.Query(() => MeetingAgendum, { nullable: true })
  async meetingAgendum(
    @graphql.Args() args: MeetingAgendumFindUniqueArgs
  ): Promise<MeetingAgendum | null> {
    const result = await this.service.meetingAgendum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MeetingAgendum)
  async createMeetingAgendum(
    @graphql.Args() args: CreateMeetingAgendumArgs
  ): Promise<MeetingAgendum> {
    return await this.service.createMeetingAgendum({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MeetingAgendum)
  async updateMeetingAgendum(
    @graphql.Args() args: UpdateMeetingAgendumArgs
  ): Promise<MeetingAgendum | null> {
    try {
      return await this.service.updateMeetingAgendum({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MeetingAgendum)
  async deleteMeetingAgendum(
    @graphql.Args() args: DeleteMeetingAgendumArgs
  ): Promise<MeetingAgendum | null> {
    try {
      return await this.service.deleteMeetingAgendum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
