/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProgramStatus as PrismaProgramStatus,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class ProgramStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProgramStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.programStatus.count(args);
  }

  async programStatuses<T extends Prisma.ProgramStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgramStatusFindManyArgs>
  ): Promise<PrismaProgramStatus[]> {
    return this.prisma.programStatus.findMany<Prisma.ProgramStatusFindManyArgs>(
      args
    );
  }
  async programStatus<T extends Prisma.ProgramStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgramStatusFindUniqueArgs>
  ): Promise<PrismaProgramStatus | null> {
    return this.prisma.programStatus.findUnique(args);
  }
  async createProgramStatus<T extends Prisma.ProgramStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgramStatusCreateArgs>
  ): Promise<PrismaProgramStatus> {
    return this.prisma.programStatus.create<T>(args);
  }
  async updateProgramStatus<T extends Prisma.ProgramStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgramStatusUpdateArgs>
  ): Promise<PrismaProgramStatus> {
    return this.prisma.programStatus.update<T>(args);
  }
  async deleteProgramStatus<T extends Prisma.ProgramStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProgramStatusDeleteArgs>
  ): Promise<PrismaProgramStatus> {
    return this.prisma.programStatus.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.programStatus
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
