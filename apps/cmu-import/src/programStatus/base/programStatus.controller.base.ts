/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProgramStatusService } from "../programStatus.service";
import { ProgramStatusCreateInput } from "./ProgramStatusCreateInput";
import { ProgramStatus } from "./ProgramStatus";
import { ProgramStatusFindManyArgs } from "./ProgramStatusFindManyArgs";
import { ProgramStatusWhereUniqueInput } from "./ProgramStatusWhereUniqueInput";
import { ProgramStatusUpdateInput } from "./ProgramStatusUpdateInput";

export class ProgramStatusControllerBase {
  constructor(protected readonly service: ProgramStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProgramStatus })
  async createProgramStatus(
    @common.Body() data: ProgramStatusCreateInput
  ): Promise<ProgramStatus> {
    return await this.service.createProgramStatus({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProgramStatus] })
  @ApiNestedQuery(ProgramStatusFindManyArgs)
  async programStatuses(
    @common.Req() request: Request
  ): Promise<ProgramStatus[]> {
    const args = plainToClass(ProgramStatusFindManyArgs, request.query);
    return this.service.programStatuses({
      ...args,
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProgramStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async programStatus(
    @common.Param() params: ProgramStatusWhereUniqueInput
  ): Promise<ProgramStatus | null> {
    const result = await this.service.programStatus({
      where: params,
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProgramStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProgramStatus(
    @common.Param() params: ProgramStatusWhereUniqueInput,
    @common.Body() data: ProgramStatusUpdateInput
  ): Promise<ProgramStatus | null> {
    try {
      return await this.service.updateProgramStatus({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          date: true,
          id: true,
          status: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProgramStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProgramStatus(
    @common.Param() params: ProgramStatusWhereUniqueInput
  ): Promise<ProgramStatus | null> {
    try {
      return await this.service.deleteProgramStatus({
        where: params,
        select: {
          date: true,
          id: true,
          status: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
