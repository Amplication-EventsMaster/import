/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDataIniService } from "../studentDataIni.service";
import { StudentDataIniCreateInput } from "./StudentDataIniCreateInput";
import { StudentDataIni } from "./StudentDataIni";
import { StudentDataIniFindManyArgs } from "./StudentDataIniFindManyArgs";
import { StudentDataIniWhereUniqueInput } from "./StudentDataIniWhereUniqueInput";
import { StudentDataIniUpdateInput } from "./StudentDataIniUpdateInput";

export class StudentDataIniControllerBase {
  constructor(protected readonly service: StudentDataIniService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDataIni })
  async createStudentDataIni(
    @common.Body() data: StudentDataIniCreateInput
  ): Promise<StudentDataIni> {
    return await this.service.createStudentDataIni({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        curriculumOption: true,
        curriculumTrack: true,
        id: true,
        programDuration: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDataIni] })
  @ApiNestedQuery(StudentDataIniFindManyArgs)
  async studentDataInis(
    @common.Req() request: Request
  ): Promise<StudentDataIni[]> {
    const args = plainToClass(StudentDataIniFindManyArgs, request.query);
    return this.service.studentDataInis({
      ...args,
      select: {
        curriculumOption: true,
        curriculumTrack: true,
        id: true,
        programDuration: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDataIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDataIni(
    @common.Param() params: StudentDataIniWhereUniqueInput
  ): Promise<StudentDataIni | null> {
    const result = await this.service.studentDataIni({
      where: params,
      select: {
        curriculumOption: true,
        curriculumTrack: true,
        id: true,
        programDuration: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDataIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDataIni(
    @common.Param() params: StudentDataIniWhereUniqueInput,
    @common.Body() data: StudentDataIniUpdateInput
  ): Promise<StudentDataIni | null> {
    try {
      return await this.service.updateStudentDataIni({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          curriculumOption: true,
          curriculumTrack: true,
          id: true,
          programDuration: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDataIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDataIni(
    @common.Param() params: StudentDataIniWhereUniqueInput
  ): Promise<StudentDataIni | null> {
    try {
      return await this.service.deleteStudentDataIni({
        where: params,
        select: {
          curriculumOption: true,
          curriculumTrack: true,
          id: true,
          programDuration: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
