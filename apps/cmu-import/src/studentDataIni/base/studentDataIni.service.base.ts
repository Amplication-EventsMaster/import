/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentDataIni as PrismaStudentDataIni,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentDataIniServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentDataIniCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentDataIni.count(args);
  }

  async studentDataInis<T extends Prisma.StudentDataIniFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataIniFindManyArgs>
  ): Promise<PrismaStudentDataIni[]> {
    return this.prisma.studentDataIni.findMany<Prisma.StudentDataIniFindManyArgs>(
      args
    );
  }
  async studentDataIni<T extends Prisma.StudentDataIniFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataIniFindUniqueArgs>
  ): Promise<PrismaStudentDataIni | null> {
    return this.prisma.studentDataIni.findUnique(args);
  }
  async createStudentDataIni<T extends Prisma.StudentDataIniCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataIniCreateArgs>
  ): Promise<PrismaStudentDataIni> {
    return this.prisma.studentDataIni.create<T>(args);
  }
  async updateStudentDataIni<T extends Prisma.StudentDataIniUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataIniUpdateArgs>
  ): Promise<PrismaStudentDataIni> {
    return this.prisma.studentDataIni.update<T>(args);
  }
  async deleteStudentDataIni<T extends Prisma.StudentDataIniDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataIniDeleteArgs>
  ): Promise<PrismaStudentDataIni> {
    return this.prisma.studentDataIni.delete(args);
  }

  async getStudentData(parentId: string): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentDataIni
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
