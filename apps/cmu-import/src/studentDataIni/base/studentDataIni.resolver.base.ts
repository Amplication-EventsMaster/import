/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentDataIni } from "./StudentDataIni";
import { StudentDataIniCountArgs } from "./StudentDataIniCountArgs";
import { StudentDataIniFindManyArgs } from "./StudentDataIniFindManyArgs";
import { StudentDataIniFindUniqueArgs } from "./StudentDataIniFindUniqueArgs";
import { CreateStudentDataIniArgs } from "./CreateStudentDataIniArgs";
import { UpdateStudentDataIniArgs } from "./UpdateStudentDataIniArgs";
import { DeleteStudentDataIniArgs } from "./DeleteStudentDataIniArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentDataIniService } from "../studentDataIni.service";
@graphql.Resolver(() => StudentDataIni)
export class StudentDataIniResolverBase {
  constructor(protected readonly service: StudentDataIniService) {}

  async _studentDataInisMeta(
    @graphql.Args() args: StudentDataIniCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDataIni])
  async studentDataInis(
    @graphql.Args() args: StudentDataIniFindManyArgs
  ): Promise<StudentDataIni[]> {
    return this.service.studentDataInis(args);
  }

  @graphql.Query(() => StudentDataIni, { nullable: true })
  async studentDataIni(
    @graphql.Args() args: StudentDataIniFindUniqueArgs
  ): Promise<StudentDataIni | null> {
    const result = await this.service.studentDataIni(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDataIni)
  async createStudentDataIni(
    @graphql.Args() args: CreateStudentDataIniArgs
  ): Promise<StudentDataIni> {
    return await this.service.createStudentDataIni({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentDataIni)
  async updateStudentDataIni(
    @graphql.Args() args: UpdateStudentDataIniArgs
  ): Promise<StudentDataIni | null> {
    try {
      return await this.service.updateStudentDataIni({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDataIni)
  async deleteStudentDataIni(
    @graphql.Args() args: DeleteStudentDataIniArgs
  ): Promise<StudentDataIni | null> {
    try {
      return await this.service.deleteStudentDataIni(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentDataIni
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
