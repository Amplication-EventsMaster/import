/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentResidency } from "./StudentResidency";
import { StudentResidencyCountArgs } from "./StudentResidencyCountArgs";
import { StudentResidencyFindManyArgs } from "./StudentResidencyFindManyArgs";
import { StudentResidencyFindUniqueArgs } from "./StudentResidencyFindUniqueArgs";
import { CreateStudentResidencyArgs } from "./CreateStudentResidencyArgs";
import { UpdateStudentResidencyArgs } from "./UpdateStudentResidencyArgs";
import { DeleteStudentResidencyArgs } from "./DeleteStudentResidencyArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentResidencyService } from "../studentResidency.service";
@graphql.Resolver(() => StudentResidency)
export class StudentResidencyResolverBase {
  constructor(protected readonly service: StudentResidencyService) {}

  async _studentResidenciesMeta(
    @graphql.Args() args: StudentResidencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentResidency])
  async studentResidencies(
    @graphql.Args() args: StudentResidencyFindManyArgs
  ): Promise<StudentResidency[]> {
    return this.service.studentResidencies(args);
  }

  @graphql.Query(() => StudentResidency, { nullable: true })
  async studentResidency(
    @graphql.Args() args: StudentResidencyFindUniqueArgs
  ): Promise<StudentResidency | null> {
    const result = await this.service.studentResidency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentResidency)
  async createStudentResidency(
    @graphql.Args() args: CreateStudentResidencyArgs
  ): Promise<StudentResidency> {
    return await this.service.createStudentResidency({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentResidency)
  async updateStudentResidency(
    @graphql.Args() args: UpdateStudentResidencyArgs
  ): Promise<StudentResidency | null> {
    try {
      return await this.service.updateStudentResidency({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentResidency)
  async deleteStudentResidency(
    @graphql.Args() args: DeleteStudentResidencyArgs
  ): Promise<StudentResidency | null> {
    try {
      return await this.service.deleteStudentResidency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentResidency
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
