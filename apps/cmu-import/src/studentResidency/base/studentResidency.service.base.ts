/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentResidency as PrismaStudentResidency,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentResidencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentResidencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentResidency.count(args);
  }

  async studentResidencies<T extends Prisma.StudentResidencyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentResidencyFindManyArgs>
  ): Promise<PrismaStudentResidency[]> {
    return this.prisma.studentResidency.findMany<Prisma.StudentResidencyFindManyArgs>(
      args
    );
  }
  async studentResidency<T extends Prisma.StudentResidencyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentResidencyFindUniqueArgs>
  ): Promise<PrismaStudentResidency | null> {
    return this.prisma.studentResidency.findUnique(args);
  }
  async createStudentResidency<T extends Prisma.StudentResidencyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentResidencyCreateArgs>
  ): Promise<PrismaStudentResidency> {
    return this.prisma.studentResidency.create<T>(args);
  }
  async updateStudentResidency<T extends Prisma.StudentResidencyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentResidencyUpdateArgs>
  ): Promise<PrismaStudentResidency> {
    return this.prisma.studentResidency.update<T>(args);
  }
  async deleteStudentResidency<T extends Prisma.StudentResidencyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentResidencyDeleteArgs>
  ): Promise<PrismaStudentResidency> {
    return this.prisma.studentResidency.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentResidency
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
