/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentResidencyService } from "../studentResidency.service";
import { StudentResidencyCreateInput } from "./StudentResidencyCreateInput";
import { StudentResidency } from "./StudentResidency";
import { StudentResidencyFindManyArgs } from "./StudentResidencyFindManyArgs";
import { StudentResidencyWhereUniqueInput } from "./StudentResidencyWhereUniqueInput";
import { StudentResidencyUpdateInput } from "./StudentResidencyUpdateInput";

export class StudentResidencyControllerBase {
  constructor(protected readonly service: StudentResidencyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentResidency })
  async createStudentResidency(
    @common.Body() data: StudentResidencyCreateInput
  ): Promise<StudentResidency> {
    return await this.service.createStudentResidency({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        id: true,
        residencyDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentResidency] })
  @ApiNestedQuery(StudentResidencyFindManyArgs)
  async studentResidencies(
    @common.Req() request: Request
  ): Promise<StudentResidency[]> {
    const args = plainToClass(StudentResidencyFindManyArgs, request.query);
    return this.service.studentResidencies({
      ...args,
      select: {
        id: true,
        residencyDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentResidency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentResidency(
    @common.Param() params: StudentResidencyWhereUniqueInput
  ): Promise<StudentResidency | null> {
    const result = await this.service.studentResidency({
      where: params,
      select: {
        id: true,
        residencyDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentResidency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentResidency(
    @common.Param() params: StudentResidencyWhereUniqueInput,
    @common.Body() data: StudentResidencyUpdateInput
  ): Promise<StudentResidency | null> {
    try {
      return await this.service.updateStudentResidency({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          id: true,
          residencyDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentResidency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentResidency(
    @common.Param() params: StudentResidencyWhereUniqueInput
  ): Promise<StudentResidency | null> {
    try {
      return await this.service.deleteStudentResidency({
        where: params,
        select: {
          id: true,
          residencyDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
