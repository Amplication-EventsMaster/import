/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PsyProjectReqService } from "../psyProjectReq.service";
import { PsyProjectReqCreateInput } from "./PsyProjectReqCreateInput";
import { PsyProjectReq } from "./PsyProjectReq";
import { PsyProjectReqFindManyArgs } from "./PsyProjectReqFindManyArgs";
import { PsyProjectReqWhereUniqueInput } from "./PsyProjectReqWhereUniqueInput";
import { PsyProjectReqUpdateInput } from "./PsyProjectReqUpdateInput";

export class PsyProjectReqControllerBase {
  constructor(protected readonly service: PsyProjectReqService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PsyProjectReq })
  async createPsyProjectReq(
    @common.Body() data: PsyProjectReqCreateInput
  ): Promise<PsyProjectReq> {
    return await this.service.createPsyProjectReq({
      data: data,
      select: {
        complete: true,
        date: true,
        id: true,
        pending: true,
        studentId: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PsyProjectReq] })
  @ApiNestedQuery(PsyProjectReqFindManyArgs)
  async psyProjectReqs(
    @common.Req() request: Request
  ): Promise<PsyProjectReq[]> {
    const args = plainToClass(PsyProjectReqFindManyArgs, request.query);
    return this.service.psyProjectReqs({
      ...args,
      select: {
        complete: true,
        date: true,
        id: true,
        pending: true,
        studentId: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PsyProjectReq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async psyProjectReq(
    @common.Param() params: PsyProjectReqWhereUniqueInput
  ): Promise<PsyProjectReq | null> {
    const result = await this.service.psyProjectReq({
      where: params,
      select: {
        complete: true,
        date: true,
        id: true,
        pending: true,
        studentId: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PsyProjectReq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePsyProjectReq(
    @common.Param() params: PsyProjectReqWhereUniqueInput,
    @common.Body() data: PsyProjectReqUpdateInput
  ): Promise<PsyProjectReq | null> {
    try {
      return await this.service.updatePsyProjectReq({
        where: params,
        data: data,
        select: {
          complete: true,
          date: true,
          id: true,
          pending: true,
          studentId: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PsyProjectReq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePsyProjectReq(
    @common.Param() params: PsyProjectReqWhereUniqueInput
  ): Promise<PsyProjectReq | null> {
    try {
      return await this.service.deletePsyProjectReq({
        where: params,
        select: {
          complete: true,
          date: true,
          id: true,
          pending: true,
          studentId: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
