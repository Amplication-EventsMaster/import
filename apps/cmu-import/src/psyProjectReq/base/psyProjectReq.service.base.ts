/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PsyProjectReq as PrismaPsyProjectReq } from "@prisma/client";

export class PsyProjectReqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PsyProjectReqCountArgs, "select">
  ): Promise<number> {
    return this.prisma.psyProjectReq.count(args);
  }

  async psyProjectReqs<T extends Prisma.PsyProjectReqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PsyProjectReqFindManyArgs>
  ): Promise<PrismaPsyProjectReq[]> {
    return this.prisma.psyProjectReq.findMany<Prisma.PsyProjectReqFindManyArgs>(
      args
    );
  }
  async psyProjectReq<T extends Prisma.PsyProjectReqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PsyProjectReqFindUniqueArgs>
  ): Promise<PrismaPsyProjectReq | null> {
    return this.prisma.psyProjectReq.findUnique(args);
  }
  async createPsyProjectReq<T extends Prisma.PsyProjectReqCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PsyProjectReqCreateArgs>
  ): Promise<PrismaPsyProjectReq> {
    return this.prisma.psyProjectReq.create<T>(args);
  }
  async updatePsyProjectReq<T extends Prisma.PsyProjectReqUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PsyProjectReqUpdateArgs>
  ): Promise<PrismaPsyProjectReq> {
    return this.prisma.psyProjectReq.update<T>(args);
  }
  async deletePsyProjectReq<T extends Prisma.PsyProjectReqDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PsyProjectReqDeleteArgs>
  ): Promise<PrismaPsyProjectReq> {
    return this.prisma.psyProjectReq.delete(args);
  }
}
