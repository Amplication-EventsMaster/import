/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PsyProjectReq } from "./PsyProjectReq";
import { PsyProjectReqCountArgs } from "./PsyProjectReqCountArgs";
import { PsyProjectReqFindManyArgs } from "./PsyProjectReqFindManyArgs";
import { PsyProjectReqFindUniqueArgs } from "./PsyProjectReqFindUniqueArgs";
import { CreatePsyProjectReqArgs } from "./CreatePsyProjectReqArgs";
import { UpdatePsyProjectReqArgs } from "./UpdatePsyProjectReqArgs";
import { DeletePsyProjectReqArgs } from "./DeletePsyProjectReqArgs";
import { PsyProjectReqService } from "../psyProjectReq.service";
@graphql.Resolver(() => PsyProjectReq)
export class PsyProjectReqResolverBase {
  constructor(protected readonly service: PsyProjectReqService) {}

  async _psyProjectReqsMeta(
    @graphql.Args() args: PsyProjectReqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PsyProjectReq])
  async psyProjectReqs(
    @graphql.Args() args: PsyProjectReqFindManyArgs
  ): Promise<PsyProjectReq[]> {
    return this.service.psyProjectReqs(args);
  }

  @graphql.Query(() => PsyProjectReq, { nullable: true })
  async psyProjectReq(
    @graphql.Args() args: PsyProjectReqFindUniqueArgs
  ): Promise<PsyProjectReq | null> {
    const result = await this.service.psyProjectReq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PsyProjectReq)
  async createPsyProjectReq(
    @graphql.Args() args: CreatePsyProjectReqArgs
  ): Promise<PsyProjectReq> {
    return await this.service.createPsyProjectReq({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PsyProjectReq)
  async updatePsyProjectReq(
    @graphql.Args() args: UpdatePsyProjectReqArgs
  ): Promise<PsyProjectReq | null> {
    try {
      return await this.service.updatePsyProjectReq({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PsyProjectReq)
  async deletePsyProjectReq(
    @graphql.Args() args: DeletePsyProjectReqArgs
  ): Promise<PsyProjectReq | null> {
    try {
      return await this.service.deletePsyProjectReq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
