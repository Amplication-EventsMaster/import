/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdvisorsCopy } from "./AdvisorsCopy";
import { AdvisorsCopyCountArgs } from "./AdvisorsCopyCountArgs";
import { AdvisorsCopyFindManyArgs } from "./AdvisorsCopyFindManyArgs";
import { AdvisorsCopyFindUniqueArgs } from "./AdvisorsCopyFindUniqueArgs";
import { CreateAdvisorsCopyArgs } from "./CreateAdvisorsCopyArgs";
import { UpdateAdvisorsCopyArgs } from "./UpdateAdvisorsCopyArgs";
import { DeleteAdvisorsCopyArgs } from "./DeleteAdvisorsCopyArgs";
import { AdvisorsCopyService } from "../advisorsCopy.service";
@graphql.Resolver(() => AdvisorsCopy)
export class AdvisorsCopyResolverBase {
  constructor(protected readonly service: AdvisorsCopyService) {}

  async _advisorsCopiesMeta(
    @graphql.Args() args: AdvisorsCopyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdvisorsCopy])
  async advisorsCopies(
    @graphql.Args() args: AdvisorsCopyFindManyArgs
  ): Promise<AdvisorsCopy[]> {
    return this.service.advisorsCopies(args);
  }

  @graphql.Query(() => AdvisorsCopy, { nullable: true })
  async advisorsCopy(
    @graphql.Args() args: AdvisorsCopyFindUniqueArgs
  ): Promise<AdvisorsCopy | null> {
    const result = await this.service.advisorsCopy(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdvisorsCopy)
  async createAdvisorsCopy(
    @graphql.Args() args: CreateAdvisorsCopyArgs
  ): Promise<AdvisorsCopy> {
    return await this.service.createAdvisorsCopy({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AdvisorsCopy)
  async updateAdvisorsCopy(
    @graphql.Args() args: UpdateAdvisorsCopyArgs
  ): Promise<AdvisorsCopy | null> {
    try {
      return await this.service.updateAdvisorsCopy({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdvisorsCopy)
  async deleteAdvisorsCopy(
    @graphql.Args() args: DeleteAdvisorsCopyArgs
  ): Promise<AdvisorsCopy | null> {
    try {
      return await this.service.deleteAdvisorsCopy(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
