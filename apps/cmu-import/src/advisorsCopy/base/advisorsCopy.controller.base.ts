/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdvisorsCopyService } from "../advisorsCopy.service";
import { AdvisorsCopyCreateInput } from "./AdvisorsCopyCreateInput";
import { AdvisorsCopy } from "./AdvisorsCopy";
import { AdvisorsCopyFindManyArgs } from "./AdvisorsCopyFindManyArgs";
import { AdvisorsCopyWhereUniqueInput } from "./AdvisorsCopyWhereUniqueInput";
import { AdvisorsCopyUpdateInput } from "./AdvisorsCopyUpdateInput";

export class AdvisorsCopyControllerBase {
  constructor(protected readonly service: AdvisorsCopyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdvisorsCopy })
  async createAdvisorsCopy(
    @common.Body() data: AdvisorsCopyCreateInput
  ): Promise<AdvisorsCopy> {
    return await this.service.createAdvisorsCopy({
      data: data,
      select: {
        date: true,
        facultyId: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdvisorsCopy] })
  @ApiNestedQuery(AdvisorsCopyFindManyArgs)
  async advisorsCopies(
    @common.Req() request: Request
  ): Promise<AdvisorsCopy[]> {
    const args = plainToClass(AdvisorsCopyFindManyArgs, request.query);
    return this.service.advisorsCopies({
      ...args,
      select: {
        date: true,
        facultyId: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdvisorsCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async advisorsCopy(
    @common.Param() params: AdvisorsCopyWhereUniqueInput
  ): Promise<AdvisorsCopy | null> {
    const result = await this.service.advisorsCopy({
      where: params,
      select: {
        date: true,
        facultyId: true,
        id: true,
        studentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdvisorsCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdvisorsCopy(
    @common.Param() params: AdvisorsCopyWhereUniqueInput,
    @common.Body() data: AdvisorsCopyUpdateInput
  ): Promise<AdvisorsCopy | null> {
    try {
      return await this.service.updateAdvisorsCopy({
        where: params,
        data: data,
        select: {
          date: true,
          facultyId: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdvisorsCopy })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdvisorsCopy(
    @common.Param() params: AdvisorsCopyWhereUniqueInput
  ): Promise<AdvisorsCopy | null> {
    try {
      return await this.service.deleteAdvisorsCopy({
        where: params,
        select: {
          date: true,
          facultyId: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
