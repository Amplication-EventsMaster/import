/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AdvisorsCopy as PrismaAdvisorsCopy } from "@prisma/client";

export class AdvisorsCopyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdvisorsCopyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.advisorsCopy.count(args);
  }

  async advisorsCopies<T extends Prisma.AdvisorsCopyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvisorsCopyFindManyArgs>
  ): Promise<PrismaAdvisorsCopy[]> {
    return this.prisma.advisorsCopy.findMany<Prisma.AdvisorsCopyFindManyArgs>(
      args
    );
  }
  async advisorsCopy<T extends Prisma.AdvisorsCopyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvisorsCopyFindUniqueArgs>
  ): Promise<PrismaAdvisorsCopy | null> {
    return this.prisma.advisorsCopy.findUnique(args);
  }
  async createAdvisorsCopy<T extends Prisma.AdvisorsCopyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvisorsCopyCreateArgs>
  ): Promise<PrismaAdvisorsCopy> {
    return this.prisma.advisorsCopy.create<T>(args);
  }
  async updateAdvisorsCopy<T extends Prisma.AdvisorsCopyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvisorsCopyUpdateArgs>
  ): Promise<PrismaAdvisorsCopy> {
    return this.prisma.advisorsCopy.update<T>(args);
  }
  async deleteAdvisorsCopy<T extends Prisma.AdvisorsCopyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdvisorsCopyDeleteArgs>
  ): Promise<PrismaAdvisorsCopy> {
    return this.prisma.advisorsCopy.delete(args);
  }
}
