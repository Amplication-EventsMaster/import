/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EventSchedule } from "./EventSchedule";
import { EventScheduleCountArgs } from "./EventScheduleCountArgs";
import { EventScheduleFindManyArgs } from "./EventScheduleFindManyArgs";
import { EventScheduleFindUniqueArgs } from "./EventScheduleFindUniqueArgs";
import { CreateEventScheduleArgs } from "./CreateEventScheduleArgs";
import { UpdateEventScheduleArgs } from "./UpdateEventScheduleArgs";
import { DeleteEventScheduleArgs } from "./DeleteEventScheduleArgs";
import { EventScheduleService } from "../eventSchedule.service";
@graphql.Resolver(() => EventSchedule)
export class EventScheduleResolverBase {
  constructor(protected readonly service: EventScheduleService) {}

  async _eventSchedulesMeta(
    @graphql.Args() args: EventScheduleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EventSchedule])
  async eventSchedules(
    @graphql.Args() args: EventScheduleFindManyArgs
  ): Promise<EventSchedule[]> {
    return this.service.eventSchedules(args);
  }

  @graphql.Query(() => EventSchedule, { nullable: true })
  async eventSchedule(
    @graphql.Args() args: EventScheduleFindUniqueArgs
  ): Promise<EventSchedule | null> {
    const result = await this.service.eventSchedule(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EventSchedule)
  async createEventSchedule(
    @graphql.Args() args: CreateEventScheduleArgs
  ): Promise<EventSchedule> {
    return await this.service.createEventSchedule({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => EventSchedule)
  async updateEventSchedule(
    @graphql.Args() args: UpdateEventScheduleArgs
  ): Promise<EventSchedule | null> {
    try {
      return await this.service.updateEventSchedule({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EventSchedule)
  async deleteEventSchedule(
    @graphql.Args() args: DeleteEventScheduleArgs
  ): Promise<EventSchedule | null> {
    try {
      return await this.service.deleteEventSchedule(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
