/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, EventSchedule as PrismaEventSchedule } from "@prisma/client";

export class EventScheduleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EventScheduleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.eventSchedule.count(args);
  }

  async eventSchedules<T extends Prisma.EventScheduleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventScheduleFindManyArgs>
  ): Promise<PrismaEventSchedule[]> {
    return this.prisma.eventSchedule.findMany<Prisma.EventScheduleFindManyArgs>(
      args
    );
  }
  async eventSchedule<T extends Prisma.EventScheduleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventScheduleFindUniqueArgs>
  ): Promise<PrismaEventSchedule | null> {
    return this.prisma.eventSchedule.findUnique(args);
  }
  async createEventSchedule<T extends Prisma.EventScheduleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventScheduleCreateArgs>
  ): Promise<PrismaEventSchedule> {
    return this.prisma.eventSchedule.create<T>(args);
  }
  async updateEventSchedule<T extends Prisma.EventScheduleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventScheduleUpdateArgs>
  ): Promise<PrismaEventSchedule> {
    return this.prisma.eventSchedule.update<T>(args);
  }
  async deleteEventSchedule<T extends Prisma.EventScheduleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EventScheduleDeleteArgs>
  ): Promise<PrismaEventSchedule> {
    return this.prisma.eventSchedule.delete(args);
  }
}
