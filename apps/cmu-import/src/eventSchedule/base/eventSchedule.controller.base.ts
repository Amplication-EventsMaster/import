/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EventScheduleService } from "../eventSchedule.service";
import { EventScheduleCreateInput } from "./EventScheduleCreateInput";
import { EventSchedule } from "./EventSchedule";
import { EventScheduleFindManyArgs } from "./EventScheduleFindManyArgs";
import { EventScheduleWhereUniqueInput } from "./EventScheduleWhereUniqueInput";
import { EventScheduleUpdateInput } from "./EventScheduleUpdateInput";

export class EventScheduleControllerBase {
  constructor(protected readonly service: EventScheduleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EventSchedule })
  async createEventSchedule(
    @common.Body() data: EventScheduleCreateInput
  ): Promise<EventSchedule> {
    return await this.service.createEventSchedule({
      data: data,
      select: {
        always: true,
        canceled: true,
        department: true,
        endDate: true,
        eventType: true,
        id: true,
        startDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EventSchedule] })
  @ApiNestedQuery(EventScheduleFindManyArgs)
  async eventSchedules(
    @common.Req() request: Request
  ): Promise<EventSchedule[]> {
    const args = plainToClass(EventScheduleFindManyArgs, request.query);
    return this.service.eventSchedules({
      ...args,
      select: {
        always: true,
        canceled: true,
        department: true,
        endDate: true,
        eventType: true,
        id: true,
        startDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EventSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async eventSchedule(
    @common.Param() params: EventScheduleWhereUniqueInput
  ): Promise<EventSchedule | null> {
    const result = await this.service.eventSchedule({
      where: params,
      select: {
        always: true,
        canceled: true,
        department: true,
        endDate: true,
        eventType: true,
        id: true,
        startDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EventSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEventSchedule(
    @common.Param() params: EventScheduleWhereUniqueInput,
    @common.Body() data: EventScheduleUpdateInput
  ): Promise<EventSchedule | null> {
    try {
      return await this.service.updateEventSchedule({
        where: params,
        data: data,
        select: {
          always: true,
          canceled: true,
          department: true,
          endDate: true,
          eventType: true,
          id: true,
          startDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EventSchedule })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEventSchedule(
    @common.Param() params: EventScheduleWhereUniqueInput
  ): Promise<EventSchedule | null> {
    try {
      return await this.service.deleteEventSchedule({
        where: params,
        select: {
          always: true,
          canceled: true,
          department: true,
          endDate: true,
          eventType: true,
          id: true,
          startDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
