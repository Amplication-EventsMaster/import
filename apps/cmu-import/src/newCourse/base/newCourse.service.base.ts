/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, NewCourse as PrismaNewCourse } from "@prisma/client";

export class NewCourseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NewCourseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.newCourse.count(args);
  }

  async newCourses<T extends Prisma.NewCourseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewCourseFindManyArgs>
  ): Promise<PrismaNewCourse[]> {
    return this.prisma.newCourse.findMany<Prisma.NewCourseFindManyArgs>(args);
  }
  async newCourse<T extends Prisma.NewCourseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewCourseFindUniqueArgs>
  ): Promise<PrismaNewCourse | null> {
    return this.prisma.newCourse.findUnique(args);
  }
  async createNewCourse<T extends Prisma.NewCourseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewCourseCreateArgs>
  ): Promise<PrismaNewCourse> {
    return this.prisma.newCourse.create<T>(args);
  }
  async updateNewCourse<T extends Prisma.NewCourseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewCourseUpdateArgs>
  ): Promise<PrismaNewCourse> {
    return this.prisma.newCourse.update<T>(args);
  }
  async deleteNewCourse<T extends Prisma.NewCourseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NewCourseDeleteArgs>
  ): Promise<PrismaNewCourse> {
    return this.prisma.newCourse.delete(args);
  }
}
