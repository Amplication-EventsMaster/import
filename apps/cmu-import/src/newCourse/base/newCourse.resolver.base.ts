/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewCourse } from "./NewCourse";
import { NewCourseCountArgs } from "./NewCourseCountArgs";
import { NewCourseFindManyArgs } from "./NewCourseFindManyArgs";
import { NewCourseFindUniqueArgs } from "./NewCourseFindUniqueArgs";
import { CreateNewCourseArgs } from "./CreateNewCourseArgs";
import { UpdateNewCourseArgs } from "./UpdateNewCourseArgs";
import { DeleteNewCourseArgs } from "./DeleteNewCourseArgs";
import { NewCourseService } from "../newCourse.service";
@graphql.Resolver(() => NewCourse)
export class NewCourseResolverBase {
  constructor(protected readonly service: NewCourseService) {}

  async _newCoursesMeta(
    @graphql.Args() args: NewCourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewCourse])
  async newCourses(
    @graphql.Args() args: NewCourseFindManyArgs
  ): Promise<NewCourse[]> {
    return this.service.newCourses(args);
  }

  @graphql.Query(() => NewCourse, { nullable: true })
  async newCourse(
    @graphql.Args() args: NewCourseFindUniqueArgs
  ): Promise<NewCourse | null> {
    const result = await this.service.newCourse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewCourse)
  async createNewCourse(
    @graphql.Args() args: CreateNewCourseArgs
  ): Promise<NewCourse> {
    return await this.service.createNewCourse({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => NewCourse)
  async updateNewCourse(
    @graphql.Args() args: UpdateNewCourseArgs
  ): Promise<NewCourse | null> {
    try {
      return await this.service.updateNewCourse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewCourse)
  async deleteNewCourse(
    @graphql.Args() args: DeleteNewCourseArgs
  ): Promise<NewCourse | null> {
    try {
      return await this.service.deleteNewCourse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
