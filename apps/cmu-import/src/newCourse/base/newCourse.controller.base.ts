/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewCourseService } from "../newCourse.service";
import { NewCourseCreateInput } from "./NewCourseCreateInput";
import { NewCourse } from "./NewCourse";
import { NewCourseFindManyArgs } from "./NewCourseFindManyArgs";
import { NewCourseWhereUniqueInput } from "./NewCourseWhereUniqueInput";
import { NewCourseUpdateInput } from "./NewCourseUpdateInput";

export class NewCourseControllerBase {
  constructor(protected readonly service: NewCourseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewCourse })
  async createNewCourse(
    @common.Body() data: NewCourseCreateInput
  ): Promise<NewCourse> {
    return await this.service.createNewCourse({
      data: data,
      select: {
        courseNum: true,
        courseSection: true,
        department: true,
        departmentCode: true,
        id: true,
        shortTitle: true,
        title: true,
        units: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewCourse] })
  @ApiNestedQuery(NewCourseFindManyArgs)
  async newCourses(@common.Req() request: Request): Promise<NewCourse[]> {
    const args = plainToClass(NewCourseFindManyArgs, request.query);
    return this.service.newCourses({
      ...args,
      select: {
        courseNum: true,
        courseSection: true,
        department: true,
        departmentCode: true,
        id: true,
        shortTitle: true,
        title: true,
        units: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newCourse(
    @common.Param() params: NewCourseWhereUniqueInput
  ): Promise<NewCourse | null> {
    const result = await this.service.newCourse({
      where: params,
      select: {
        courseNum: true,
        courseSection: true,
        department: true,
        departmentCode: true,
        id: true,
        shortTitle: true,
        title: true,
        units: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewCourse(
    @common.Param() params: NewCourseWhereUniqueInput,
    @common.Body() data: NewCourseUpdateInput
  ): Promise<NewCourse | null> {
    try {
      return await this.service.updateNewCourse({
        where: params,
        data: data,
        select: {
          courseNum: true,
          courseSection: true,
          department: true,
          departmentCode: true,
          id: true,
          shortTitle: true,
          title: true,
          units: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewCourse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewCourse(
    @common.Param() params: NewCourseWhereUniqueInput
  ): Promise<NewCourse | null> {
    try {
      return await this.service.deleteNewCourse({
        where: params,
        select: {
          courseNum: true,
          courseSection: true,
          department: true,
          departmentCode: true,
          id: true,
          shortTitle: true,
          title: true,
          units: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
