/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentPub } from "./StudentPub";
import { StudentPubCountArgs } from "./StudentPubCountArgs";
import { StudentPubFindManyArgs } from "./StudentPubFindManyArgs";
import { StudentPubFindUniqueArgs } from "./StudentPubFindUniqueArgs";
import { CreateStudentPubArgs } from "./CreateStudentPubArgs";
import { UpdateStudentPubArgs } from "./UpdateStudentPubArgs";
import { DeleteStudentPubArgs } from "./DeleteStudentPubArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentPubService } from "../studentPub.service";
@graphql.Resolver(() => StudentPub)
export class StudentPubResolverBase {
  constructor(protected readonly service: StudentPubService) {}

  async _studentPubsMeta(
    @graphql.Args() args: StudentPubCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentPub])
  async studentPubs(
    @graphql.Args() args: StudentPubFindManyArgs
  ): Promise<StudentPub[]> {
    return this.service.studentPubs(args);
  }

  @graphql.Query(() => StudentPub, { nullable: true })
  async studentPub(
    @graphql.Args() args: StudentPubFindUniqueArgs
  ): Promise<StudentPub | null> {
    const result = await this.service.studentPub(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentPub)
  async createStudentPub(
    @graphql.Args() args: CreateStudentPubArgs
  ): Promise<StudentPub> {
    return await this.service.createStudentPub({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentPub)
  async updateStudentPub(
    @graphql.Args() args: UpdateStudentPubArgs
  ): Promise<StudentPub | null> {
    try {
      return await this.service.updateStudentPub({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentPub)
  async deleteStudentPub(
    @graphql.Args() args: DeleteStudentPubArgs
  ): Promise<StudentPub | null> {
    try {
      return await this.service.deleteStudentPub(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentPub
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
