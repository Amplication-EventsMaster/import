/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CourseDepartment } from "./CourseDepartment";
import { CourseDepartmentCountArgs } from "./CourseDepartmentCountArgs";
import { CourseDepartmentFindManyArgs } from "./CourseDepartmentFindManyArgs";
import { CourseDepartmentFindUniqueArgs } from "./CourseDepartmentFindUniqueArgs";
import { CreateCourseDepartmentArgs } from "./CreateCourseDepartmentArgs";
import { UpdateCourseDepartmentArgs } from "./UpdateCourseDepartmentArgs";
import { DeleteCourseDepartmentArgs } from "./DeleteCourseDepartmentArgs";
import { CourseDepartmentService } from "../courseDepartment.service";
@graphql.Resolver(() => CourseDepartment)
export class CourseDepartmentResolverBase {
  constructor(protected readonly service: CourseDepartmentService) {}

  async _courseDepartmentsMeta(
    @graphql.Args() args: CourseDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CourseDepartment])
  async courseDepartments(
    @graphql.Args() args: CourseDepartmentFindManyArgs
  ): Promise<CourseDepartment[]> {
    return this.service.courseDepartments(args);
  }

  @graphql.Query(() => CourseDepartment, { nullable: true })
  async courseDepartment(
    @graphql.Args() args: CourseDepartmentFindUniqueArgs
  ): Promise<CourseDepartment | null> {
    const result = await this.service.courseDepartment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CourseDepartment)
  async createCourseDepartment(
    @graphql.Args() args: CreateCourseDepartmentArgs
  ): Promise<CourseDepartment> {
    return await this.service.createCourseDepartment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CourseDepartment)
  async updateCourseDepartment(
    @graphql.Args() args: UpdateCourseDepartmentArgs
  ): Promise<CourseDepartment | null> {
    try {
      return await this.service.updateCourseDepartment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CourseDepartment)
  async deleteCourseDepartment(
    @graphql.Args() args: DeleteCourseDepartmentArgs
  ): Promise<CourseDepartment | null> {
    try {
      return await this.service.deleteCourseDepartment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
