/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CourseDepartmentService } from "../courseDepartment.service";
import { CourseDepartmentCreateInput } from "./CourseDepartmentCreateInput";
import { CourseDepartment } from "./CourseDepartment";
import { CourseDepartmentFindManyArgs } from "./CourseDepartmentFindManyArgs";
import { CourseDepartmentWhereUniqueInput } from "./CourseDepartmentWhereUniqueInput";
import { CourseDepartmentUpdateInput } from "./CourseDepartmentUpdateInput";

export class CourseDepartmentControllerBase {
  constructor(protected readonly service: CourseDepartmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CourseDepartment })
  async createCourseDepartment(
    @common.Body() data: CourseDepartmentCreateInput
  ): Promise<CourseDepartment> {
    return await this.service.createCourseDepartment({
      data: data,
      select: {
        courseId: true,
        id: true,
        requirementType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CourseDepartment] })
  @ApiNestedQuery(CourseDepartmentFindManyArgs)
  async courseDepartments(
    @common.Req() request: Request
  ): Promise<CourseDepartment[]> {
    const args = plainToClass(CourseDepartmentFindManyArgs, request.query);
    return this.service.courseDepartments({
      ...args,
      select: {
        courseId: true,
        id: true,
        requirementType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CourseDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async courseDepartment(
    @common.Param() params: CourseDepartmentWhereUniqueInput
  ): Promise<CourseDepartment | null> {
    const result = await this.service.courseDepartment({
      where: params,
      select: {
        courseId: true,
        id: true,
        requirementType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CourseDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCourseDepartment(
    @common.Param() params: CourseDepartmentWhereUniqueInput,
    @common.Body() data: CourseDepartmentUpdateInput
  ): Promise<CourseDepartment | null> {
    try {
      return await this.service.updateCourseDepartment({
        where: params,
        data: data,
        select: {
          courseId: true,
          id: true,
          requirementType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CourseDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCourseDepartment(
    @common.Param() params: CourseDepartmentWhereUniqueInput
  ): Promise<CourseDepartment | null> {
    try {
      return await this.service.deleteCourseDepartment({
        where: params,
        select: {
          courseId: true,
          id: true,
          requirementType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
