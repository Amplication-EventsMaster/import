/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InstitutionsConsol } from "./InstitutionsConsol";
import { InstitutionsConsolCountArgs } from "./InstitutionsConsolCountArgs";
import { InstitutionsConsolFindManyArgs } from "./InstitutionsConsolFindManyArgs";
import { InstitutionsConsolFindUniqueArgs } from "./InstitutionsConsolFindUniqueArgs";
import { CreateInstitutionsConsolArgs } from "./CreateInstitutionsConsolArgs";
import { UpdateInstitutionsConsolArgs } from "./UpdateInstitutionsConsolArgs";
import { DeleteInstitutionsConsolArgs } from "./DeleteInstitutionsConsolArgs";
import { InstitutionsConsolService } from "../institutionsConsol.service";
@graphql.Resolver(() => InstitutionsConsol)
export class InstitutionsConsolResolverBase {
  constructor(protected readonly service: InstitutionsConsolService) {}

  async _institutionsConsolsMeta(
    @graphql.Args() args: InstitutionsConsolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InstitutionsConsol])
  async institutionsConsols(
    @graphql.Args() args: InstitutionsConsolFindManyArgs
  ): Promise<InstitutionsConsol[]> {
    return this.service.institutionsConsols(args);
  }

  @graphql.Query(() => InstitutionsConsol, { nullable: true })
  async institutionsConsol(
    @graphql.Args() args: InstitutionsConsolFindUniqueArgs
  ): Promise<InstitutionsConsol | null> {
    const result = await this.service.institutionsConsol(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InstitutionsConsol)
  async createInstitutionsConsol(
    @graphql.Args() args: CreateInstitutionsConsolArgs
  ): Promise<InstitutionsConsol> {
    return await this.service.createInstitutionsConsol({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InstitutionsConsol)
  async updateInstitutionsConsol(
    @graphql.Args() args: UpdateInstitutionsConsolArgs
  ): Promise<InstitutionsConsol | null> {
    try {
      return await this.service.updateInstitutionsConsol({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InstitutionsConsol)
  async deleteInstitutionsConsol(
    @graphql.Args() args: DeleteInstitutionsConsolArgs
  ): Promise<InstitutionsConsol | null> {
    try {
      return await this.service.deleteInstitutionsConsol(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
