/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InstitutionsConsolService } from "../institutionsConsol.service";
import { InstitutionsConsolCreateInput } from "./InstitutionsConsolCreateInput";
import { InstitutionsConsol } from "./InstitutionsConsol";
import { InstitutionsConsolFindManyArgs } from "./InstitutionsConsolFindManyArgs";
import { InstitutionsConsolWhereUniqueInput } from "./InstitutionsConsolWhereUniqueInput";
import { InstitutionsConsolUpdateInput } from "./InstitutionsConsolUpdateInput";

export class InstitutionsConsolControllerBase {
  constructor(protected readonly service: InstitutionsConsolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InstitutionsConsol })
  async createInstitutionsConsol(
    @common.Body() data: InstitutionsConsolCreateInput
  ): Promise<InstitutionsConsol> {
    return await this.service.createInstitutionsConsol({
      data: data,
      select: {
        city: true,
        code: true,
        country: true,
        countryCode: true,
        id: true,
        institution: true,
        institutionAbbr: true,
        institutionAscii: true,
        state: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InstitutionsConsol] })
  @ApiNestedQuery(InstitutionsConsolFindManyArgs)
  async institutionsConsols(
    @common.Req() request: Request
  ): Promise<InstitutionsConsol[]> {
    const args = plainToClass(InstitutionsConsolFindManyArgs, request.query);
    return this.service.institutionsConsols({
      ...args,
      select: {
        city: true,
        code: true,
        country: true,
        countryCode: true,
        id: true,
        institution: true,
        institutionAbbr: true,
        institutionAscii: true,
        state: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InstitutionsConsol })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async institutionsConsol(
    @common.Param() params: InstitutionsConsolWhereUniqueInput
  ): Promise<InstitutionsConsol | null> {
    const result = await this.service.institutionsConsol({
      where: params,
      select: {
        city: true,
        code: true,
        country: true,
        countryCode: true,
        id: true,
        institution: true,
        institutionAbbr: true,
        institutionAscii: true,
        state: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InstitutionsConsol })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInstitutionsConsol(
    @common.Param() params: InstitutionsConsolWhereUniqueInput,
    @common.Body() data: InstitutionsConsolUpdateInput
  ): Promise<InstitutionsConsol | null> {
    try {
      return await this.service.updateInstitutionsConsol({
        where: params,
        data: data,
        select: {
          city: true,
          code: true,
          country: true,
          countryCode: true,
          id: true,
          institution: true,
          institutionAbbr: true,
          institutionAscii: true,
          state: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InstitutionsConsol })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInstitutionsConsol(
    @common.Param() params: InstitutionsConsolWhereUniqueInput
  ): Promise<InstitutionsConsol | null> {
    try {
      return await this.service.deleteInstitutionsConsol({
        where: params,
        select: {
          city: true,
          code: true,
          country: true,
          countryCode: true,
          id: true,
          institution: true,
          institutionAbbr: true,
          institutionAscii: true,
          state: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
