/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentDocumentPart } from "./StudentDocumentPart";
import { StudentDocumentPartCountArgs } from "./StudentDocumentPartCountArgs";
import { StudentDocumentPartFindManyArgs } from "./StudentDocumentPartFindManyArgs";
import { StudentDocumentPartFindUniqueArgs } from "./StudentDocumentPartFindUniqueArgs";
import { CreateStudentDocumentPartArgs } from "./CreateStudentDocumentPartArgs";
import { UpdateStudentDocumentPartArgs } from "./UpdateStudentDocumentPartArgs";
import { DeleteStudentDocumentPartArgs } from "./DeleteStudentDocumentPartArgs";
import { StudentDocumentPartService } from "../studentDocumentPart.service";
@graphql.Resolver(() => StudentDocumentPart)
export class StudentDocumentPartResolverBase {
  constructor(protected readonly service: StudentDocumentPartService) {}

  async _studentDocumentPartsMeta(
    @graphql.Args() args: StudentDocumentPartCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDocumentPart])
  async studentDocumentParts(
    @graphql.Args() args: StudentDocumentPartFindManyArgs
  ): Promise<StudentDocumentPart[]> {
    return this.service.studentDocumentParts(args);
  }

  @graphql.Query(() => StudentDocumentPart, { nullable: true })
  async studentDocumentPart(
    @graphql.Args() args: StudentDocumentPartFindUniqueArgs
  ): Promise<StudentDocumentPart | null> {
    const result = await this.service.studentDocumentPart(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDocumentPart)
  async createStudentDocumentPart(
    @graphql.Args() args: CreateStudentDocumentPartArgs
  ): Promise<StudentDocumentPart> {
    return await this.service.createStudentDocumentPart({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StudentDocumentPart)
  async updateStudentDocumentPart(
    @graphql.Args() args: UpdateStudentDocumentPartArgs
  ): Promise<StudentDocumentPart | null> {
    try {
      return await this.service.updateStudentDocumentPart({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDocumentPart)
  async deleteStudentDocumentPart(
    @graphql.Args() args: DeleteStudentDocumentPartArgs
  ): Promise<StudentDocumentPart | null> {
    try {
      return await this.service.deleteStudentDocumentPart(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
