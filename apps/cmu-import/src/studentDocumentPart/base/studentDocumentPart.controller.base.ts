/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDocumentPartService } from "../studentDocumentPart.service";
import { StudentDocumentPartCreateInput } from "./StudentDocumentPartCreateInput";
import { StudentDocumentPart } from "./StudentDocumentPart";
import { StudentDocumentPartFindManyArgs } from "./StudentDocumentPartFindManyArgs";
import { StudentDocumentPartWhereUniqueInput } from "./StudentDocumentPartWhereUniqueInput";
import { StudentDocumentPartUpdateInput } from "./StudentDocumentPartUpdateInput";

export class StudentDocumentPartControllerBase {
  constructor(protected readonly service: StudentDocumentPartService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDocumentPart })
  async createStudentDocumentPart(
    @common.Body() data: StudentDocumentPartCreateInput
  ): Promise<StudentDocumentPart> {
    return await this.service.createStudentDocumentPart({
      data: data,
      select: {
        documentId: true,
        id: true,
        isDefault: true,
        templatePartId: true,
        text: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDocumentPart] })
  @ApiNestedQuery(StudentDocumentPartFindManyArgs)
  async studentDocumentParts(
    @common.Req() request: Request
  ): Promise<StudentDocumentPart[]> {
    const args = plainToClass(StudentDocumentPartFindManyArgs, request.query);
    return this.service.studentDocumentParts({
      ...args,
      select: {
        documentId: true,
        id: true,
        isDefault: true,
        templatePartId: true,
        text: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDocumentPart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDocumentPart(
    @common.Param() params: StudentDocumentPartWhereUniqueInput
  ): Promise<StudentDocumentPart | null> {
    const result = await this.service.studentDocumentPart({
      where: params,
      select: {
        documentId: true,
        id: true,
        isDefault: true,
        templatePartId: true,
        text: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDocumentPart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDocumentPart(
    @common.Param() params: StudentDocumentPartWhereUniqueInput,
    @common.Body() data: StudentDocumentPartUpdateInput
  ): Promise<StudentDocumentPart | null> {
    try {
      return await this.service.updateStudentDocumentPart({
        where: params,
        data: data,
        select: {
          documentId: true,
          id: true,
          isDefault: true,
          templatePartId: true,
          text: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDocumentPart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDocumentPart(
    @common.Param() params: StudentDocumentPartWhereUniqueInput
  ): Promise<StudentDocumentPart | null> {
    try {
      return await this.service.deleteStudentDocumentPart({
        where: params,
        select: {
          documentId: true,
          id: true,
          isDefault: true,
          templatePartId: true,
          text: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
