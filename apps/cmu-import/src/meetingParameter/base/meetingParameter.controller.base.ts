/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MeetingParameterService } from "../meetingParameter.service";
import { MeetingParameterCreateInput } from "./MeetingParameterCreateInput";
import { MeetingParameter } from "./MeetingParameter";
import { MeetingParameterFindManyArgs } from "./MeetingParameterFindManyArgs";
import { MeetingParameterWhereUniqueInput } from "./MeetingParameterWhereUniqueInput";
import { MeetingParameterUpdateInput } from "./MeetingParameterUpdateInput";

export class MeetingParameterControllerBase {
  constructor(protected readonly service: MeetingParameterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MeetingParameter })
  async createMeetingParameter(
    @common.Body() data: MeetingParameterCreateInput
  ): Promise<MeetingParameter> {
    return await this.service.createMeetingParameter({
      data: data,
      select: {
        id: true,
        meetingId: true,
        param: true,
        sortOrder: true,
        typeField: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MeetingParameter] })
  @ApiNestedQuery(MeetingParameterFindManyArgs)
  async meetingParameters(
    @common.Req() request: Request
  ): Promise<MeetingParameter[]> {
    const args = plainToClass(MeetingParameterFindManyArgs, request.query);
    return this.service.meetingParameters({
      ...args,
      select: {
        id: true,
        meetingId: true,
        param: true,
        sortOrder: true,
        typeField: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MeetingParameter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async meetingParameter(
    @common.Param() params: MeetingParameterWhereUniqueInput
  ): Promise<MeetingParameter | null> {
    const result = await this.service.meetingParameter({
      where: params,
      select: {
        id: true,
        meetingId: true,
        param: true,
        sortOrder: true,
        typeField: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MeetingParameter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMeetingParameter(
    @common.Param() params: MeetingParameterWhereUniqueInput,
    @common.Body() data: MeetingParameterUpdateInput
  ): Promise<MeetingParameter | null> {
    try {
      return await this.service.updateMeetingParameter({
        where: params,
        data: data,
        select: {
          id: true,
          meetingId: true,
          param: true,
          sortOrder: true,
          typeField: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MeetingParameter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMeetingParameter(
    @common.Param() params: MeetingParameterWhereUniqueInput
  ): Promise<MeetingParameter | null> {
    try {
      return await this.service.deleteMeetingParameter({
        where: params,
        select: {
          id: true,
          meetingId: true,
          param: true,
          sortOrder: true,
          typeField: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
