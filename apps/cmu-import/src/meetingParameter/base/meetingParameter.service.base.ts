/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  MeetingParameter as PrismaMeetingParameter,
} from "@prisma/client";

export class MeetingParameterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.MeetingParameterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.meetingParameter.count(args);
  }

  async meetingParameters<T extends Prisma.MeetingParameterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingParameterFindManyArgs>
  ): Promise<PrismaMeetingParameter[]> {
    return this.prisma.meetingParameter.findMany<Prisma.MeetingParameterFindManyArgs>(
      args
    );
  }
  async meetingParameter<T extends Prisma.MeetingParameterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingParameterFindUniqueArgs>
  ): Promise<PrismaMeetingParameter | null> {
    return this.prisma.meetingParameter.findUnique(args);
  }
  async createMeetingParameter<T extends Prisma.MeetingParameterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingParameterCreateArgs>
  ): Promise<PrismaMeetingParameter> {
    return this.prisma.meetingParameter.create<T>(args);
  }
  async updateMeetingParameter<T extends Prisma.MeetingParameterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingParameterUpdateArgs>
  ): Promise<PrismaMeetingParameter> {
    return this.prisma.meetingParameter.update<T>(args);
  }
  async deleteMeetingParameter<T extends Prisma.MeetingParameterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MeetingParameterDeleteArgs>
  ): Promise<PrismaMeetingParameter> {
    return this.prisma.meetingParameter.delete(args);
  }
}
