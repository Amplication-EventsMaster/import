/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentSkillService } from "../studentSkill.service";
import { StudentSkillCreateInput } from "./StudentSkillCreateInput";
import { StudentSkill } from "./StudentSkill";
import { StudentSkillFindManyArgs } from "./StudentSkillFindManyArgs";
import { StudentSkillWhereUniqueInput } from "./StudentSkillWhereUniqueInput";
import { StudentSkillUpdateInput } from "./StudentSkillUpdateInput";

export class StudentSkillControllerBase {
  constructor(protected readonly service: StudentSkillService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentSkill })
  async createStudentSkill(
    @common.Body() data: StudentSkillCreateInput
  ): Promise<StudentSkill> {
    return await this.service.createStudentSkill({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        collab: true,
        comment: true,
        date: true,
        grade: true,
        id: true,
        pending: true,
        skill: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
        units: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentSkill] })
  @ApiNestedQuery(StudentSkillFindManyArgs)
  async studentSkills(@common.Req() request: Request): Promise<StudentSkill[]> {
    const args = plainToClass(StudentSkillFindManyArgs, request.query);
    return this.service.studentSkills({
      ...args,
      select: {
        collab: true,
        comment: true,
        date: true,
        grade: true,
        id: true,
        pending: true,
        skill: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
        units: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentSkill(
    @common.Param() params: StudentSkillWhereUniqueInput
  ): Promise<StudentSkill | null> {
    const result = await this.service.studentSkill({
      where: params,
      select: {
        collab: true,
        comment: true,
        date: true,
        grade: true,
        id: true,
        pending: true,
        skill: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
        units: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentSkill(
    @common.Param() params: StudentSkillWhereUniqueInput,
    @common.Body() data: StudentSkillUpdateInput
  ): Promise<StudentSkill | null> {
    try {
      return await this.service.updateStudentSkill({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          collab: true,
          comment: true,
          date: true,
          grade: true,
          id: true,
          pending: true,
          skill: true,

          studentData: {
            select: {
              id: true,
            },
          },

          title: true,
          units: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentSkill })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentSkill(
    @common.Param() params: StudentSkillWhereUniqueInput
  ): Promise<StudentSkill | null> {
    try {
      return await this.service.deleteStudentSkill({
        where: params,
        select: {
          collab: true,
          comment: true,
          date: true,
          grade: true,
          id: true,
          pending: true,
          skill: true,

          studentData: {
            select: {
              id: true,
            },
          },

          title: true,
          units: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
