/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentSkill as PrismaStudentSkill,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentSkillServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentSkillCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentSkill.count(args);
  }

  async studentSkills<T extends Prisma.StudentSkillFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentSkillFindManyArgs>
  ): Promise<PrismaStudentSkill[]> {
    return this.prisma.studentSkill.findMany<Prisma.StudentSkillFindManyArgs>(
      args
    );
  }
  async studentSkill<T extends Prisma.StudentSkillFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentSkillFindUniqueArgs>
  ): Promise<PrismaStudentSkill | null> {
    return this.prisma.studentSkill.findUnique(args);
  }
  async createStudentSkill<T extends Prisma.StudentSkillCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentSkillCreateArgs>
  ): Promise<PrismaStudentSkill> {
    return this.prisma.studentSkill.create<T>(args);
  }
  async updateStudentSkill<T extends Prisma.StudentSkillUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentSkillUpdateArgs>
  ): Promise<PrismaStudentSkill> {
    return this.prisma.studentSkill.update<T>(args);
  }
  async deleteStudentSkill<T extends Prisma.StudentSkillDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentSkillDeleteArgs>
  ): Promise<PrismaStudentSkill> {
    return this.prisma.studentSkill.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentSkill
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
