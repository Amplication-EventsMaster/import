/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Evaluator as PrismaEvaluator } from "@prisma/client";

export class EvaluatorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EvaluatorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.evaluator.count(args);
  }

  async evaluators<T extends Prisma.EvaluatorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluatorFindManyArgs>
  ): Promise<PrismaEvaluator[]> {
    return this.prisma.evaluator.findMany<Prisma.EvaluatorFindManyArgs>(args);
  }
  async evaluator<T extends Prisma.EvaluatorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluatorFindUniqueArgs>
  ): Promise<PrismaEvaluator | null> {
    return this.prisma.evaluator.findUnique(args);
  }
  async createEvaluator<T extends Prisma.EvaluatorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluatorCreateArgs>
  ): Promise<PrismaEvaluator> {
    return this.prisma.evaluator.create<T>(args);
  }
  async updateEvaluator<T extends Prisma.EvaluatorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluatorUpdateArgs>
  ): Promise<PrismaEvaluator> {
    return this.prisma.evaluator.update<T>(args);
  }
  async deleteEvaluator<T extends Prisma.EvaluatorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluatorDeleteArgs>
  ): Promise<PrismaEvaluator> {
    return this.prisma.evaluator.delete(args);
  }
}
