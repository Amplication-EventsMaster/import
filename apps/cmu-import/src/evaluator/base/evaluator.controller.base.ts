/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EvaluatorService } from "../evaluator.service";
import { EvaluatorCreateInput } from "./EvaluatorCreateInput";
import { Evaluator } from "./Evaluator";
import { EvaluatorFindManyArgs } from "./EvaluatorFindManyArgs";
import { EvaluatorWhereUniqueInput } from "./EvaluatorWhereUniqueInput";
import { EvaluatorUpdateInput } from "./EvaluatorUpdateInput";

export class EvaluatorControllerBase {
  constructor(protected readonly service: EvaluatorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Evaluator })
  async createEvaluator(
    @common.Body() data: EvaluatorCreateInput
  ): Promise<Evaluator> {
    return await this.service.createEvaluator({
      data: data,
      select: {
        facultyId: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Evaluator] })
  @ApiNestedQuery(EvaluatorFindManyArgs)
  async evaluators(@common.Req() request: Request): Promise<Evaluator[]> {
    const args = plainToClass(EvaluatorFindManyArgs, request.query);
    return this.service.evaluators({
      ...args,
      select: {
        facultyId: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Evaluator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async evaluator(
    @common.Param() params: EvaluatorWhereUniqueInput
  ): Promise<Evaluator | null> {
    const result = await this.service.evaluator({
      where: params,
      select: {
        facultyId: true,
        id: true,
        studentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Evaluator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEvaluator(
    @common.Param() params: EvaluatorWhereUniqueInput,
    @common.Body() data: EvaluatorUpdateInput
  ): Promise<Evaluator | null> {
    try {
      return await this.service.updateEvaluator({
        where: params,
        data: data,
        select: {
          facultyId: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Evaluator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEvaluator(
    @common.Param() params: EvaluatorWhereUniqueInput
  ): Promise<Evaluator | null> {
    try {
      return await this.service.deleteEvaluator({
        where: params,
        select: {
          facultyId: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
