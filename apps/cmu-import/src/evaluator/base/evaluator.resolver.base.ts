/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Evaluator } from "./Evaluator";
import { EvaluatorCountArgs } from "./EvaluatorCountArgs";
import { EvaluatorFindManyArgs } from "./EvaluatorFindManyArgs";
import { EvaluatorFindUniqueArgs } from "./EvaluatorFindUniqueArgs";
import { CreateEvaluatorArgs } from "./CreateEvaluatorArgs";
import { UpdateEvaluatorArgs } from "./UpdateEvaluatorArgs";
import { DeleteEvaluatorArgs } from "./DeleteEvaluatorArgs";
import { EvaluatorService } from "../evaluator.service";
@graphql.Resolver(() => Evaluator)
export class EvaluatorResolverBase {
  constructor(protected readonly service: EvaluatorService) {}

  async _evaluatorsMeta(
    @graphql.Args() args: EvaluatorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Evaluator])
  async evaluators(
    @graphql.Args() args: EvaluatorFindManyArgs
  ): Promise<Evaluator[]> {
    return this.service.evaluators(args);
  }

  @graphql.Query(() => Evaluator, { nullable: true })
  async evaluator(
    @graphql.Args() args: EvaluatorFindUniqueArgs
  ): Promise<Evaluator | null> {
    const result = await this.service.evaluator(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Evaluator)
  async createEvaluator(
    @graphql.Args() args: CreateEvaluatorArgs
  ): Promise<Evaluator> {
    return await this.service.createEvaluator({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Evaluator)
  async updateEvaluator(
    @graphql.Args() args: UpdateEvaluatorArgs
  ): Promise<Evaluator | null> {
    try {
      return await this.service.updateEvaluator({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Evaluator)
  async deleteEvaluator(
    @graphql.Args() args: DeleteEvaluatorArgs
  ): Promise<Evaluator | null> {
    try {
      return await this.service.deleteEvaluator(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
