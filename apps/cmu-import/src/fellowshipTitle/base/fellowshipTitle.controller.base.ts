/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FellowshipTitleService } from "../fellowshipTitle.service";
import { FellowshipTitleCreateInput } from "./FellowshipTitleCreateInput";
import { FellowshipTitle } from "./FellowshipTitle";
import { FellowshipTitleFindManyArgs } from "./FellowshipTitleFindManyArgs";
import { FellowshipTitleWhereUniqueInput } from "./FellowshipTitleWhereUniqueInput";
import { FellowshipTitleUpdateInput } from "./FellowshipTitleUpdateInput";

export class FellowshipTitleControllerBase {
  constructor(protected readonly service: FellowshipTitleService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FellowshipTitle })
  async createFellowshipTitle(
    @common.Body() data: FellowshipTitleCreateInput
  ): Promise<FellowshipTitle> {
    return await this.service.createFellowshipTitle({
      data: data,
      select: {
        department: true,
        fellowshipTitle: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FellowshipTitle] })
  @ApiNestedQuery(FellowshipTitleFindManyArgs)
  async fellowshipTitles(
    @common.Req() request: Request
  ): Promise<FellowshipTitle[]> {
    const args = plainToClass(FellowshipTitleFindManyArgs, request.query);
    return this.service.fellowshipTitles({
      ...args,
      select: {
        department: true,
        fellowshipTitle: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FellowshipTitle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fellowshipTitle(
    @common.Param() params: FellowshipTitleWhereUniqueInput
  ): Promise<FellowshipTitle | null> {
    const result = await this.service.fellowshipTitle({
      where: params,
      select: {
        department: true,
        fellowshipTitle: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FellowshipTitle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFellowshipTitle(
    @common.Param() params: FellowshipTitleWhereUniqueInput,
    @common.Body() data: FellowshipTitleUpdateInput
  ): Promise<FellowshipTitle | null> {
    try {
      return await this.service.updateFellowshipTitle({
        where: params,
        data: data,
        select: {
          department: true,
          fellowshipTitle: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FellowshipTitle })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFellowshipTitle(
    @common.Param() params: FellowshipTitleWhereUniqueInput
  ): Promise<FellowshipTitle | null> {
    try {
      return await this.service.deleteFellowshipTitle({
        where: params,
        select: {
          department: true,
          fellowshipTitle: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
