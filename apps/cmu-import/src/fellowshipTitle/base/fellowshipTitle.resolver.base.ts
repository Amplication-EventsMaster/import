/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FellowshipTitle } from "./FellowshipTitle";
import { FellowshipTitleCountArgs } from "./FellowshipTitleCountArgs";
import { FellowshipTitleFindManyArgs } from "./FellowshipTitleFindManyArgs";
import { FellowshipTitleFindUniqueArgs } from "./FellowshipTitleFindUniqueArgs";
import { CreateFellowshipTitleArgs } from "./CreateFellowshipTitleArgs";
import { UpdateFellowshipTitleArgs } from "./UpdateFellowshipTitleArgs";
import { DeleteFellowshipTitleArgs } from "./DeleteFellowshipTitleArgs";
import { FellowshipTitleService } from "../fellowshipTitle.service";
@graphql.Resolver(() => FellowshipTitle)
export class FellowshipTitleResolverBase {
  constructor(protected readonly service: FellowshipTitleService) {}

  async _fellowshipTitlesMeta(
    @graphql.Args() args: FellowshipTitleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FellowshipTitle])
  async fellowshipTitles(
    @graphql.Args() args: FellowshipTitleFindManyArgs
  ): Promise<FellowshipTitle[]> {
    return this.service.fellowshipTitles(args);
  }

  @graphql.Query(() => FellowshipTitle, { nullable: true })
  async fellowshipTitle(
    @graphql.Args() args: FellowshipTitleFindUniqueArgs
  ): Promise<FellowshipTitle | null> {
    const result = await this.service.fellowshipTitle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FellowshipTitle)
  async createFellowshipTitle(
    @graphql.Args() args: CreateFellowshipTitleArgs
  ): Promise<FellowshipTitle> {
    return await this.service.createFellowshipTitle({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FellowshipTitle)
  async updateFellowshipTitle(
    @graphql.Args() args: UpdateFellowshipTitleArgs
  ): Promise<FellowshipTitle | null> {
    try {
      return await this.service.updateFellowshipTitle({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FellowshipTitle)
  async deleteFellowshipTitle(
    @graphql.Args() args: DeleteFellowshipTitleArgs
  ): Promise<FellowshipTitle | null> {
    try {
      return await this.service.deleteFellowshipTitle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
