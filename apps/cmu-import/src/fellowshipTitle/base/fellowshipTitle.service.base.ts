/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  FellowshipTitle as PrismaFellowshipTitle,
} from "@prisma/client";

export class FellowshipTitleServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FellowshipTitleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fellowshipTitle.count(args);
  }

  async fellowshipTitles<T extends Prisma.FellowshipTitleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipTitleFindManyArgs>
  ): Promise<PrismaFellowshipTitle[]> {
    return this.prisma.fellowshipTitle.findMany<Prisma.FellowshipTitleFindManyArgs>(
      args
    );
  }
  async fellowshipTitle<T extends Prisma.FellowshipTitleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipTitleFindUniqueArgs>
  ): Promise<PrismaFellowshipTitle | null> {
    return this.prisma.fellowshipTitle.findUnique(args);
  }
  async createFellowshipTitle<T extends Prisma.FellowshipTitleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipTitleCreateArgs>
  ): Promise<PrismaFellowshipTitle> {
    return this.prisma.fellowshipTitle.create<T>(args);
  }
  async updateFellowshipTitle<T extends Prisma.FellowshipTitleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipTitleUpdateArgs>
  ): Promise<PrismaFellowshipTitle> {
    return this.prisma.fellowshipTitle.update<T>(args);
  }
  async deleteFellowshipTitle<T extends Prisma.FellowshipTitleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipTitleDeleteArgs>
  ): Promise<PrismaFellowshipTitle> {
    return this.prisma.fellowshipTitle.delete(args);
  }
}
