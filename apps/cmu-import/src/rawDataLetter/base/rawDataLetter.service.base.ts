/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RawDataLetter as PrismaRawDataLetter } from "@prisma/client";

export class RawDataLetterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RawDataLetterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.rawDataLetter.count(args);
  }

  async rawDataLetters<T extends Prisma.RawDataLetterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawDataLetterFindManyArgs>
  ): Promise<PrismaRawDataLetter[]> {
    return this.prisma.rawDataLetter.findMany<Prisma.RawDataLetterFindManyArgs>(
      args
    );
  }
  async rawDataLetter<T extends Prisma.RawDataLetterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawDataLetterFindUniqueArgs>
  ): Promise<PrismaRawDataLetter | null> {
    return this.prisma.rawDataLetter.findUnique(args);
  }
  async createRawDataLetter<T extends Prisma.RawDataLetterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawDataLetterCreateArgs>
  ): Promise<PrismaRawDataLetter> {
    return this.prisma.rawDataLetter.create<T>(args);
  }
  async updateRawDataLetter<T extends Prisma.RawDataLetterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawDataLetterUpdateArgs>
  ): Promise<PrismaRawDataLetter> {
    return this.prisma.rawDataLetter.update<T>(args);
  }
  async deleteRawDataLetter<T extends Prisma.RawDataLetterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RawDataLetterDeleteArgs>
  ): Promise<PrismaRawDataLetter> {
    return this.prisma.rawDataLetter.delete(args);
  }
}
