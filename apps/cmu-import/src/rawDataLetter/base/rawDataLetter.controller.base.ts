/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RawDataLetterService } from "../rawDataLetter.service";
import { RawDataLetterCreateInput } from "./RawDataLetterCreateInput";
import { RawDataLetter } from "./RawDataLetter";
import { RawDataLetterFindManyArgs } from "./RawDataLetterFindManyArgs";
import { RawDataLetterWhereUniqueInput } from "./RawDataLetterWhereUniqueInput";
import { RawDataLetterUpdateInput } from "./RawDataLetterUpdateInput";

export class RawDataLetterControllerBase {
  constructor(protected readonly service: RawDataLetterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RawDataLetter })
  async createRawDataLetter(
    @common.Body() data: RawDataLetterCreateInput
  ): Promise<RawDataLetter> {
    return await this.service.createRawDataLetter({
      data: data,
      select: {
        id: true,
        introText: true,
        month: true,
        name: true,
        performanceCode: true,
        performanceCodeText: true,
        text: true,
        year: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RawDataLetter] })
  @ApiNestedQuery(RawDataLetterFindManyArgs)
  async rawDataLetters(
    @common.Req() request: Request
  ): Promise<RawDataLetter[]> {
    const args = plainToClass(RawDataLetterFindManyArgs, request.query);
    return this.service.rawDataLetters({
      ...args,
      select: {
        id: true,
        introText: true,
        month: true,
        name: true,
        performanceCode: true,
        performanceCodeText: true,
        text: true,
        year: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RawDataLetter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rawDataLetter(
    @common.Param() params: RawDataLetterWhereUniqueInput
  ): Promise<RawDataLetter | null> {
    const result = await this.service.rawDataLetter({
      where: params,
      select: {
        id: true,
        introText: true,
        month: true,
        name: true,
        performanceCode: true,
        performanceCodeText: true,
        text: true,
        year: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RawDataLetter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRawDataLetter(
    @common.Param() params: RawDataLetterWhereUniqueInput,
    @common.Body() data: RawDataLetterUpdateInput
  ): Promise<RawDataLetter | null> {
    try {
      return await this.service.updateRawDataLetter({
        where: params,
        data: data,
        select: {
          id: true,
          introText: true,
          month: true,
          name: true,
          performanceCode: true,
          performanceCodeText: true,
          text: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RawDataLetter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRawDataLetter(
    @common.Param() params: RawDataLetterWhereUniqueInput
  ): Promise<RawDataLetter | null> {
    try {
      return await this.service.deleteRawDataLetter({
        where: params,
        select: {
          id: true,
          introText: true,
          month: true,
          name: true,
          performanceCode: true,
          performanceCodeText: true,
          text: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
