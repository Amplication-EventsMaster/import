/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RawDataLetter } from "./RawDataLetter";
import { RawDataLetterCountArgs } from "./RawDataLetterCountArgs";
import { RawDataLetterFindManyArgs } from "./RawDataLetterFindManyArgs";
import { RawDataLetterFindUniqueArgs } from "./RawDataLetterFindUniqueArgs";
import { CreateRawDataLetterArgs } from "./CreateRawDataLetterArgs";
import { UpdateRawDataLetterArgs } from "./UpdateRawDataLetterArgs";
import { DeleteRawDataLetterArgs } from "./DeleteRawDataLetterArgs";
import { RawDataLetterService } from "../rawDataLetter.service";
@graphql.Resolver(() => RawDataLetter)
export class RawDataLetterResolverBase {
  constructor(protected readonly service: RawDataLetterService) {}

  async _rawDataLettersMeta(
    @graphql.Args() args: RawDataLetterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RawDataLetter])
  async rawDataLetters(
    @graphql.Args() args: RawDataLetterFindManyArgs
  ): Promise<RawDataLetter[]> {
    return this.service.rawDataLetters(args);
  }

  @graphql.Query(() => RawDataLetter, { nullable: true })
  async rawDataLetter(
    @graphql.Args() args: RawDataLetterFindUniqueArgs
  ): Promise<RawDataLetter | null> {
    const result = await this.service.rawDataLetter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RawDataLetter)
  async createRawDataLetter(
    @graphql.Args() args: CreateRawDataLetterArgs
  ): Promise<RawDataLetter> {
    return await this.service.createRawDataLetter({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RawDataLetter)
  async updateRawDataLetter(
    @graphql.Args() args: UpdateRawDataLetterArgs
  ): Promise<RawDataLetter | null> {
    try {
      return await this.service.updateRawDataLetter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RawDataLetter)
  async deleteRawDataLetter(
    @graphql.Args() args: DeleteRawDataLetterArgs
  ): Promise<RawDataLetter | null> {
    try {
      return await this.service.deleteRawDataLetter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
