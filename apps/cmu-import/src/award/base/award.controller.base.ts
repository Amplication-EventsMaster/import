/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AwardService } from "../award.service";
import { AwardCreateInput } from "./AwardCreateInput";
import { Award } from "./Award";
import { AwardFindManyArgs } from "./AwardFindManyArgs";
import { AwardWhereUniqueInput } from "./AwardWhereUniqueInput";
import { AwardUpdateInput } from "./AwardUpdateInput";

export class AwardControllerBase {
  constructor(protected readonly service: AwardService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Award })
  async createAward(@common.Body() data: AwardCreateInput): Promise<Award> {
    return await this.service.createAward({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        awardDate: true,
        awardName: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Award] })
  @ApiNestedQuery(AwardFindManyArgs)
  async awards(@common.Req() request: Request): Promise<Award[]> {
    const args = plainToClass(AwardFindManyArgs, request.query);
    return this.service.awards({
      ...args,
      select: {
        awardDate: true,
        awardName: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Award })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async award(
    @common.Param() params: AwardWhereUniqueInput
  ): Promise<Award | null> {
    const result = await this.service.award({
      where: params,
      select: {
        awardDate: true,
        awardName: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Award })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAward(
    @common.Param() params: AwardWhereUniqueInput,
    @common.Body() data: AwardUpdateInput
  ): Promise<Award | null> {
    try {
      return await this.service.updateAward({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          awardDate: true,
          awardName: true,
          id: true,
          pending: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Award })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAward(
    @common.Param() params: AwardWhereUniqueInput
  ): Promise<Award | null> {
    try {
      return await this.service.deleteAward({
        where: params,
        select: {
          awardDate: true,
          awardName: true,
          id: true,
          pending: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
