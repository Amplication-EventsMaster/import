/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Award } from "./Award";
import { AwardCountArgs } from "./AwardCountArgs";
import { AwardFindManyArgs } from "./AwardFindManyArgs";
import { AwardFindUniqueArgs } from "./AwardFindUniqueArgs";
import { CreateAwardArgs } from "./CreateAwardArgs";
import { UpdateAwardArgs } from "./UpdateAwardArgs";
import { DeleteAwardArgs } from "./DeleteAwardArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { AwardService } from "../award.service";
@graphql.Resolver(() => Award)
export class AwardResolverBase {
  constructor(protected readonly service: AwardService) {}

  async _awardsMeta(
    @graphql.Args() args: AwardCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Award])
  async awards(@graphql.Args() args: AwardFindManyArgs): Promise<Award[]> {
    return this.service.awards(args);
  }

  @graphql.Query(() => Award, { nullable: true })
  async award(
    @graphql.Args() args: AwardFindUniqueArgs
  ): Promise<Award | null> {
    const result = await this.service.award(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Award)
  async createAward(@graphql.Args() args: CreateAwardArgs): Promise<Award> {
    return await this.service.createAward({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => Award)
  async updateAward(
    @graphql.Args() args: UpdateAwardArgs
  ): Promise<Award | null> {
    try {
      return await this.service.updateAward({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Award)
  async deleteAward(
    @graphql.Args() args: DeleteAwardArgs
  ): Promise<Award | null> {
    try {
      return await this.service.deleteAward(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: Award
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
