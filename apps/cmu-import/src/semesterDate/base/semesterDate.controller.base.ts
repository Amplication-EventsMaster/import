/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SemesterDateService } from "../semesterDate.service";
import { SemesterDateCreateInput } from "./SemesterDateCreateInput";
import { SemesterDate } from "./SemesterDate";
import { SemesterDateFindManyArgs } from "./SemesterDateFindManyArgs";
import { SemesterDateWhereUniqueInput } from "./SemesterDateWhereUniqueInput";
import { SemesterDateUpdateInput } from "./SemesterDateUpdateInput";

export class SemesterDateControllerBase {
  constructor(protected readonly service: SemesterDateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SemesterDate })
  async createSemesterDate(
    @common.Body() data: SemesterDateCreateInput
  ): Promise<SemesterDate> {
    return await this.service.createSemesterDate({
      data: data,
      select: {
        department: true,
        disabled: true,
        id: true,
        semrefId: true,
        startDay: true,
        startMonth: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SemesterDate] })
  @ApiNestedQuery(SemesterDateFindManyArgs)
  async semesterDates(@common.Req() request: Request): Promise<SemesterDate[]> {
    const args = plainToClass(SemesterDateFindManyArgs, request.query);
    return this.service.semesterDates({
      ...args,
      select: {
        department: true,
        disabled: true,
        id: true,
        semrefId: true,
        startDay: true,
        startMonth: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SemesterDate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async semesterDate(
    @common.Param() params: SemesterDateWhereUniqueInput
  ): Promise<SemesterDate | null> {
    const result = await this.service.semesterDate({
      where: params,
      select: {
        department: true,
        disabled: true,
        id: true,
        semrefId: true,
        startDay: true,
        startMonth: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SemesterDate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSemesterDate(
    @common.Param() params: SemesterDateWhereUniqueInput,
    @common.Body() data: SemesterDateUpdateInput
  ): Promise<SemesterDate | null> {
    try {
      return await this.service.updateSemesterDate({
        where: params,
        data: data,
        select: {
          department: true,
          disabled: true,
          id: true,
          semrefId: true,
          startDay: true,
          startMonth: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SemesterDate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSemesterDate(
    @common.Param() params: SemesterDateWhereUniqueInput
  ): Promise<SemesterDate | null> {
    try {
      return await this.service.deleteSemesterDate({
        where: params,
        select: {
          department: true,
          disabled: true,
          id: true,
          semrefId: true,
          startDay: true,
          startMonth: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
