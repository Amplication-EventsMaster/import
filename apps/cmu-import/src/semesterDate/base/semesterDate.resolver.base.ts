/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SemesterDate } from "./SemesterDate";
import { SemesterDateCountArgs } from "./SemesterDateCountArgs";
import { SemesterDateFindManyArgs } from "./SemesterDateFindManyArgs";
import { SemesterDateFindUniqueArgs } from "./SemesterDateFindUniqueArgs";
import { CreateSemesterDateArgs } from "./CreateSemesterDateArgs";
import { UpdateSemesterDateArgs } from "./UpdateSemesterDateArgs";
import { DeleteSemesterDateArgs } from "./DeleteSemesterDateArgs";
import { SemesterDateService } from "../semesterDate.service";
@graphql.Resolver(() => SemesterDate)
export class SemesterDateResolverBase {
  constructor(protected readonly service: SemesterDateService) {}

  async _semesterDatesMeta(
    @graphql.Args() args: SemesterDateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SemesterDate])
  async semesterDates(
    @graphql.Args() args: SemesterDateFindManyArgs
  ): Promise<SemesterDate[]> {
    return this.service.semesterDates(args);
  }

  @graphql.Query(() => SemesterDate, { nullable: true })
  async semesterDate(
    @graphql.Args() args: SemesterDateFindUniqueArgs
  ): Promise<SemesterDate | null> {
    const result = await this.service.semesterDate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SemesterDate)
  async createSemesterDate(
    @graphql.Args() args: CreateSemesterDateArgs
  ): Promise<SemesterDate> {
    return await this.service.createSemesterDate({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SemesterDate)
  async updateSemesterDate(
    @graphql.Args() args: UpdateSemesterDateArgs
  ): Promise<SemesterDate | null> {
    try {
      return await this.service.updateSemesterDate({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SemesterDate)
  async deleteSemesterDate(
    @graphql.Args() args: DeleteSemesterDateArgs
  ): Promise<SemesterDate | null> {
    try {
      return await this.service.deleteSemesterDate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
