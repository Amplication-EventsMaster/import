/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualsCommittee } from "./QualsCommittee";
import { QualsCommitteeCountArgs } from "./QualsCommitteeCountArgs";
import { QualsCommitteeFindManyArgs } from "./QualsCommitteeFindManyArgs";
import { QualsCommitteeFindUniqueArgs } from "./QualsCommitteeFindUniqueArgs";
import { CreateQualsCommitteeArgs } from "./CreateQualsCommitteeArgs";
import { UpdateQualsCommitteeArgs } from "./UpdateQualsCommitteeArgs";
import { DeleteQualsCommitteeArgs } from "./DeleteQualsCommitteeArgs";
import { QualsResearchFindManyArgs } from "../../qualsResearch/base/QualsResearchFindManyArgs";
import { QualsResearch } from "../../qualsResearch/base/QualsResearch";
import { QualsResearchForOtherStudentFindManyArgs } from "../../qualsResearchForOtherStudent/base/QualsResearchForOtherStudentFindManyArgs";
import { QualsResearchForOtherStudent } from "../../qualsResearchForOtherStudent/base/QualsResearchForOtherStudent";
import { QualsWritingFindManyArgs } from "../../qualsWriting/base/QualsWritingFindManyArgs";
import { QualsWriting } from "../../qualsWriting/base/QualsWriting";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { QualsCommitteeService } from "../qualsCommittee.service";
@graphql.Resolver(() => QualsCommittee)
export class QualsCommitteeResolverBase {
  constructor(protected readonly service: QualsCommitteeService) {}

  async _qualsCommitteesMeta(
    @graphql.Args() args: QualsCommitteeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualsCommittee])
  async qualsCommittees(
    @graphql.Args() args: QualsCommitteeFindManyArgs
  ): Promise<QualsCommittee[]> {
    return this.service.qualsCommittees(args);
  }

  @graphql.Query(() => QualsCommittee, { nullable: true })
  async qualsCommittee(
    @graphql.Args() args: QualsCommitteeFindUniqueArgs
  ): Promise<QualsCommittee | null> {
    const result = await this.service.qualsCommittee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualsCommittee)
  async createQualsCommittee(
    @graphql.Args() args: CreateQualsCommitteeArgs
  ): Promise<QualsCommittee> {
    return await this.service.createQualsCommittee({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => QualsCommittee)
  async updateQualsCommittee(
    @graphql.Args() args: UpdateQualsCommitteeArgs
  ): Promise<QualsCommittee | null> {
    try {
      return await this.service.updateQualsCommittee({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualsCommittee)
  async deleteQualsCommittee(
    @graphql.Args() args: DeleteQualsCommitteeArgs
  ): Promise<QualsCommittee | null> {
    try {
      return await this.service.deleteQualsCommittee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [QualsResearch], { name: "qualsResearch" })
  async findQualsResearch(
    @graphql.Parent() parent: QualsCommittee,
    @graphql.Args() args: QualsResearchFindManyArgs
  ): Promise<QualsResearch[]> {
    const results = await this.service.findQualsResearch(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [QualsResearchForOtherStudent], {
    name: "qualsResearchForOtherStudent",
  })
  async findQualsResearchForOtherStudent(
    @graphql.Parent() parent: QualsCommittee,
    @graphql.Args() args: QualsResearchForOtherStudentFindManyArgs
  ): Promise<QualsResearchForOtherStudent[]> {
    const results = await this.service.findQualsResearchForOtherStudent(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [QualsWriting], { name: "qualsWriting" })
  async findQualsWriting(
    @graphql.Parent() parent: QualsCommittee,
    @graphql.Args() args: QualsWritingFindManyArgs
  ): Promise<QualsWriting[]> {
    const results = await this.service.findQualsWriting(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: QualsCommittee
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
