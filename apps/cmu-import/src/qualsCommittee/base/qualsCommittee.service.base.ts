/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QualsCommittee as PrismaQualsCommittee,
  QualsResearch as PrismaQualsResearch,
  QualsResearchForOtherStudent as PrismaQualsResearchForOtherStudent,
  QualsWriting as PrismaQualsWriting,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class QualsCommitteeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualsCommitteeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualsCommittee.count(args);
  }

  async qualsCommittees<T extends Prisma.QualsCommitteeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsCommitteeFindManyArgs>
  ): Promise<PrismaQualsCommittee[]> {
    return this.prisma.qualsCommittee.findMany<Prisma.QualsCommitteeFindManyArgs>(
      args
    );
  }
  async qualsCommittee<T extends Prisma.QualsCommitteeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsCommitteeFindUniqueArgs>
  ): Promise<PrismaQualsCommittee | null> {
    return this.prisma.qualsCommittee.findUnique(args);
  }
  async createQualsCommittee<T extends Prisma.QualsCommitteeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsCommitteeCreateArgs>
  ): Promise<PrismaQualsCommittee> {
    return this.prisma.qualsCommittee.create<T>(args);
  }
  async updateQualsCommittee<T extends Prisma.QualsCommitteeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsCommitteeUpdateArgs>
  ): Promise<PrismaQualsCommittee> {
    return this.prisma.qualsCommittee.update<T>(args);
  }
  async deleteQualsCommittee<T extends Prisma.QualsCommitteeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsCommitteeDeleteArgs>
  ): Promise<PrismaQualsCommittee> {
    return this.prisma.qualsCommittee.delete(args);
  }

  async findQualsResearch(
    parentId: number,
    args: Prisma.QualsResearchFindManyArgs
  ): Promise<PrismaQualsResearch[]> {
    return this.prisma.qualsCommittee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .qualsResearch(args);
  }

  async findQualsResearchForOtherStudent(
    parentId: number,
    args: Prisma.QualsResearchForOtherStudentFindManyArgs
  ): Promise<PrismaQualsResearchForOtherStudent[]> {
    return this.prisma.qualsCommittee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .qualsResearchForOtherStudent(args);
  }

  async findQualsWriting(
    parentId: number,
    args: Prisma.QualsWritingFindManyArgs
  ): Promise<PrismaQualsWriting[]> {
    return this.prisma.qualsCommittee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .qualsWriting(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.qualsCommittee
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
