/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Rotation } from "./Rotation";
import { RotationCountArgs } from "./RotationCountArgs";
import { RotationFindManyArgs } from "./RotationFindManyArgs";
import { RotationFindUniqueArgs } from "./RotationFindUniqueArgs";
import { CreateRotationArgs } from "./CreateRotationArgs";
import { UpdateRotationArgs } from "./UpdateRotationArgs";
import { DeleteRotationArgs } from "./DeleteRotationArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { RotationService } from "../rotation.service";
@graphql.Resolver(() => Rotation)
export class RotationResolverBase {
  constructor(protected readonly service: RotationService) {}

  async _rotationsMeta(
    @graphql.Args() args: RotationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Rotation])
  async rotations(
    @graphql.Args() args: RotationFindManyArgs
  ): Promise<Rotation[]> {
    return this.service.rotations(args);
  }

  @graphql.Query(() => Rotation, { nullable: true })
  async rotation(
    @graphql.Args() args: RotationFindUniqueArgs
  ): Promise<Rotation | null> {
    const result = await this.service.rotation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Rotation)
  async createRotation(
    @graphql.Args() args: CreateRotationArgs
  ): Promise<Rotation> {
    return await this.service.createRotation({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => Rotation)
  async updateRotation(
    @graphql.Args() args: UpdateRotationArgs
  ): Promise<Rotation | null> {
    try {
      return await this.service.updateRotation({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Rotation)
  async deleteRotation(
    @graphql.Args() args: DeleteRotationArgs
  ): Promise<Rotation | null> {
    try {
      return await this.service.deleteRotation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: Rotation
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
