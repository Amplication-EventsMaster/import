/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Rotation as PrismaRotation,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class RotationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.RotationCountArgs, "select">): Promise<number> {
    return this.prisma.rotation.count(args);
  }

  async rotations<T extends Prisma.RotationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.RotationFindManyArgs>
  ): Promise<PrismaRotation[]> {
    return this.prisma.rotation.findMany<Prisma.RotationFindManyArgs>(args);
  }
  async rotation<T extends Prisma.RotationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.RotationFindUniqueArgs>
  ): Promise<PrismaRotation | null> {
    return this.prisma.rotation.findUnique(args);
  }
  async createRotation<T extends Prisma.RotationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RotationCreateArgs>
  ): Promise<PrismaRotation> {
    return this.prisma.rotation.create<T>(args);
  }
  async updateRotation<T extends Prisma.RotationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.RotationUpdateArgs>
  ): Promise<PrismaRotation> {
    return this.prisma.rotation.update<T>(args);
  }
  async deleteRotation<T extends Prisma.RotationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.RotationDeleteArgs>
  ): Promise<PrismaRotation> {
    return this.prisma.rotation.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.rotation
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
