/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RotationService } from "../rotation.service";
import { RotationCreateInput } from "./RotationCreateInput";
import { Rotation } from "./Rotation";
import { RotationFindManyArgs } from "./RotationFindManyArgs";
import { RotationWhereUniqueInput } from "./RotationWhereUniqueInput";
import { RotationUpdateInput } from "./RotationUpdateInput";

export class RotationControllerBase {
  constructor(protected readonly service: RotationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Rotation })
  async createRotation(
    @common.Body() data: RotationCreateInput
  ): Promise<Rotation> {
    return await this.service.createRotation({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        comment: true,
        endDate: true,
        facultyId: true,
        id: true,
        sfId: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Rotation] })
  @ApiNestedQuery(RotationFindManyArgs)
  async rotations(@common.Req() request: Request): Promise<Rotation[]> {
    const args = plainToClass(RotationFindManyArgs, request.query);
    return this.service.rotations({
      ...args,
      select: {
        comment: true,
        endDate: true,
        facultyId: true,
        id: true,
        sfId: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Rotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rotation(
    @common.Param() params: RotationWhereUniqueInput
  ): Promise<Rotation | null> {
    const result = await this.service.rotation({
      where: params,
      select: {
        comment: true,
        endDate: true,
        facultyId: true,
        id: true,
        sfId: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Rotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRotation(
    @common.Param() params: RotationWhereUniqueInput,
    @common.Body() data: RotationUpdateInput
  ): Promise<Rotation | null> {
    try {
      return await this.service.updateRotation({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          comment: true,
          endDate: true,
          facultyId: true,
          id: true,
          sfId: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Rotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRotation(
    @common.Param() params: RotationWhereUniqueInput
  ): Promise<Rotation | null> {
    try {
      return await this.service.deleteRotation({
        where: params,
        select: {
          comment: true,
          endDate: true,
          facultyId: true,
          id: true,
          sfId: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
