/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlackfridayApplywebApplicationService } from "../blackfridayApplywebApplication.service";
import { BlackfridayApplywebApplicationCreateInput } from "./BlackfridayApplywebApplicationCreateInput";
import { BlackfridayApplywebApplication } from "./BlackfridayApplywebApplication";
import { BlackfridayApplywebApplicationFindManyArgs } from "./BlackfridayApplywebApplicationFindManyArgs";
import { BlackfridayApplywebApplicationWhereUniqueInput } from "./BlackfridayApplywebApplicationWhereUniqueInput";
import { BlackfridayApplywebApplicationUpdateInput } from "./BlackfridayApplywebApplicationUpdateInput";

export class BlackfridayApplywebApplicationControllerBase {
  constructor(
    protected readonly service: BlackfridayApplywebApplicationService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlackfridayApplywebApplication })
  async createBlackfridayApplywebApplication(
    @common.Body() data: BlackfridayApplywebApplicationCreateInput
  ): Promise<BlackfridayApplywebApplication> {
    return await this.service.createBlackfridayApplywebApplication({
      data: data,
      select: {
        applywebApplicationId: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlackfridayApplywebApplication] })
  @ApiNestedQuery(BlackfridayApplywebApplicationFindManyArgs)
  async blackfridayApplywebApplications(
    @common.Req() request: Request
  ): Promise<BlackfridayApplywebApplication[]> {
    const args = plainToClass(
      BlackfridayApplywebApplicationFindManyArgs,
      request.query
    );
    return this.service.blackfridayApplywebApplications({
      ...args,
      select: {
        applywebApplicationId: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlackfridayApplywebApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blackfridayApplywebApplication(
    @common.Param() params: BlackfridayApplywebApplicationWhereUniqueInput
  ): Promise<BlackfridayApplywebApplication | null> {
    const result = await this.service.blackfridayApplywebApplication({
      where: params,
      select: {
        applywebApplicationId: true,
        id: true,
        studentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlackfridayApplywebApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlackfridayApplywebApplication(
    @common.Param() params: BlackfridayApplywebApplicationWhereUniqueInput,
    @common.Body() data: BlackfridayApplywebApplicationUpdateInput
  ): Promise<BlackfridayApplywebApplication | null> {
    try {
      return await this.service.updateBlackfridayApplywebApplication({
        where: params,
        data: data,
        select: {
          applywebApplicationId: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlackfridayApplywebApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlackfridayApplywebApplication(
    @common.Param() params: BlackfridayApplywebApplicationWhereUniqueInput
  ): Promise<BlackfridayApplywebApplication | null> {
    try {
      return await this.service.deleteBlackfridayApplywebApplication({
        where: params,
        select: {
          applywebApplicationId: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
