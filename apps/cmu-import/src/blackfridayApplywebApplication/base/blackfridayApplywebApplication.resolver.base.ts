/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlackfridayApplywebApplication } from "./BlackfridayApplywebApplication";
import { BlackfridayApplywebApplicationCountArgs } from "./BlackfridayApplywebApplicationCountArgs";
import { BlackfridayApplywebApplicationFindManyArgs } from "./BlackfridayApplywebApplicationFindManyArgs";
import { BlackfridayApplywebApplicationFindUniqueArgs } from "./BlackfridayApplywebApplicationFindUniqueArgs";
import { CreateBlackfridayApplywebApplicationArgs } from "./CreateBlackfridayApplywebApplicationArgs";
import { UpdateBlackfridayApplywebApplicationArgs } from "./UpdateBlackfridayApplywebApplicationArgs";
import { DeleteBlackfridayApplywebApplicationArgs } from "./DeleteBlackfridayApplywebApplicationArgs";
import { BlackfridayApplywebApplicationService } from "../blackfridayApplywebApplication.service";
@graphql.Resolver(() => BlackfridayApplywebApplication)
export class BlackfridayApplywebApplicationResolverBase {
  constructor(
    protected readonly service: BlackfridayApplywebApplicationService
  ) {}

  async _blackfridayApplywebApplicationsMeta(
    @graphql.Args() args: BlackfridayApplywebApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlackfridayApplywebApplication])
  async blackfridayApplywebApplications(
    @graphql.Args() args: BlackfridayApplywebApplicationFindManyArgs
  ): Promise<BlackfridayApplywebApplication[]> {
    return this.service.blackfridayApplywebApplications(args);
  }

  @graphql.Query(() => BlackfridayApplywebApplication, { nullable: true })
  async blackfridayApplywebApplication(
    @graphql.Args() args: BlackfridayApplywebApplicationFindUniqueArgs
  ): Promise<BlackfridayApplywebApplication | null> {
    const result = await this.service.blackfridayApplywebApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlackfridayApplywebApplication)
  async createBlackfridayApplywebApplication(
    @graphql.Args() args: CreateBlackfridayApplywebApplicationArgs
  ): Promise<BlackfridayApplywebApplication> {
    return await this.service.createBlackfridayApplywebApplication({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BlackfridayApplywebApplication)
  async updateBlackfridayApplywebApplication(
    @graphql.Args() args: UpdateBlackfridayApplywebApplicationArgs
  ): Promise<BlackfridayApplywebApplication | null> {
    try {
      return await this.service.updateBlackfridayApplywebApplication({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlackfridayApplywebApplication)
  async deleteBlackfridayApplywebApplication(
    @graphql.Args() args: DeleteBlackfridayApplywebApplicationArgs
  ): Promise<BlackfridayApplywebApplication | null> {
    try {
      return await this.service.deleteBlackfridayApplywebApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
