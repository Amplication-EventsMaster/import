/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Ita as PrismaIta,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class ItaServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ItaCountArgs, "select">): Promise<number> {
    return this.prisma.ita.count(args);
  }

  async itas<T extends Prisma.ItaFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItaFindManyArgs>
  ): Promise<PrismaIta[]> {
    return this.prisma.ita.findMany<Prisma.ItaFindManyArgs>(args);
  }
  async ita<T extends Prisma.ItaFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItaFindUniqueArgs>
  ): Promise<PrismaIta | null> {
    return this.prisma.ita.findUnique(args);
  }
  async createIta<T extends Prisma.ItaCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItaCreateArgs>
  ): Promise<PrismaIta> {
    return this.prisma.ita.create<T>(args);
  }
  async updateIta<T extends Prisma.ItaUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItaUpdateArgs>
  ): Promise<PrismaIta> {
    return this.prisma.ita.update<T>(args);
  }
  async deleteIta<T extends Prisma.ItaDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ItaDeleteArgs>
  ): Promise<PrismaIta> {
    return this.prisma.ita.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.ita
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
