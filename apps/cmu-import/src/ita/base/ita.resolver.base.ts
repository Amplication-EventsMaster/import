/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Ita } from "./Ita";
import { ItaCountArgs } from "./ItaCountArgs";
import { ItaFindManyArgs } from "./ItaFindManyArgs";
import { ItaFindUniqueArgs } from "./ItaFindUniqueArgs";
import { CreateItaArgs } from "./CreateItaArgs";
import { UpdateItaArgs } from "./UpdateItaArgs";
import { DeleteItaArgs } from "./DeleteItaArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { ItaService } from "../ita.service";
@graphql.Resolver(() => Ita)
export class ItaResolverBase {
  constructor(protected readonly service: ItaService) {}

  async _itasMeta(
    @graphql.Args() args: ItaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Ita])
  async itas(@graphql.Args() args: ItaFindManyArgs): Promise<Ita[]> {
    return this.service.itas(args);
  }

  @graphql.Query(() => Ita, { nullable: true })
  async ita(@graphql.Args() args: ItaFindUniqueArgs): Promise<Ita | null> {
    const result = await this.service.ita(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Ita)
  async createIta(@graphql.Args() args: CreateItaArgs): Promise<Ita> {
    return await this.service.createIta({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => Ita)
  async updateIta(@graphql.Args() args: UpdateItaArgs): Promise<Ita | null> {
    try {
      return await this.service.updateIta({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ita)
  async deleteIta(@graphql.Args() args: DeleteItaArgs): Promise<Ita | null> {
    try {
      return await this.service.deleteIta(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: Ita
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
