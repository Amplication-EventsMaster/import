/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ItaService } from "../ita.service";
import { ItaCreateInput } from "./ItaCreateInput";
import { Ita } from "./Ita";
import { ItaFindManyArgs } from "./ItaFindManyArgs";
import { ItaWhereUniqueInput } from "./ItaWhereUniqueInput";
import { ItaUpdateInput } from "./ItaUpdateInput";

export class ItaControllerBase {
  constructor(protected readonly service: ItaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Ita })
  async createIta(@common.Body() data: ItaCreateInput): Promise<Ita> {
    return await this.service.createIta({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        date: true,
        id: true,
        score: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Ita] })
  @ApiNestedQuery(ItaFindManyArgs)
  async itas(@common.Req() request: Request): Promise<Ita[]> {
    const args = plainToClass(ItaFindManyArgs, request.query);
    return this.service.itas({
      ...args,
      select: {
        date: true,
        id: true,
        score: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Ita })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ita(@common.Param() params: ItaWhereUniqueInput): Promise<Ita | null> {
    const result = await this.service.ita({
      where: params,
      select: {
        date: true,
        id: true,
        score: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Ita })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIta(
    @common.Param() params: ItaWhereUniqueInput,
    @common.Body() data: ItaUpdateInput
  ): Promise<Ita | null> {
    try {
      return await this.service.updateIta({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          date: true,
          id: true,
          score: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Ita })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIta(
    @common.Param() params: ItaWhereUniqueInput
  ): Promise<Ita | null> {
    try {
      return await this.service.deleteIta({
        where: params,
        select: {
          date: true,
          id: true,
          score: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
