/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Practicum } from "./Practicum";
import { PracticumCountArgs } from "./PracticumCountArgs";
import { PracticumFindManyArgs } from "./PracticumFindManyArgs";
import { PracticumFindUniqueArgs } from "./PracticumFindUniqueArgs";
import { CreatePracticumArgs } from "./CreatePracticumArgs";
import { UpdatePracticumArgs } from "./UpdatePracticumArgs";
import { DeletePracticumArgs } from "./DeletePracticumArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { PracticumService } from "../practicum.service";
@graphql.Resolver(() => Practicum)
export class PracticumResolverBase {
  constructor(protected readonly service: PracticumService) {}

  async _practicumsMeta(
    @graphql.Args() args: PracticumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Practicum])
  async practicums(
    @graphql.Args() args: PracticumFindManyArgs
  ): Promise<Practicum[]> {
    return this.service.practicums(args);
  }

  @graphql.Query(() => Practicum, { nullable: true })
  async practicum(
    @graphql.Args() args: PracticumFindUniqueArgs
  ): Promise<Practicum | null> {
    const result = await this.service.practicum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Practicum)
  async createPracticum(
    @graphql.Args() args: CreatePracticumArgs
  ): Promise<Practicum> {
    return await this.service.createPracticum({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => Practicum)
  async updatePracticum(
    @graphql.Args() args: UpdatePracticumArgs
  ): Promise<Practicum | null> {
    try {
      return await this.service.updatePracticum({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Practicum)
  async deletePracticum(
    @graphql.Args() args: DeletePracticumArgs
  ): Promise<Practicum | null> {
    try {
      return await this.service.deletePracticum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: Practicum
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
