/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PracticumService } from "../practicum.service";
import { PracticumCreateInput } from "./PracticumCreateInput";
import { Practicum } from "./Practicum";
import { PracticumFindManyArgs } from "./PracticumFindManyArgs";
import { PracticumWhereUniqueInput } from "./PracticumWhereUniqueInput";
import { PracticumUpdateInput } from "./PracticumUpdateInput";

export class PracticumControllerBase {
  constructor(protected readonly service: PracticumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Practicum })
  async createPracticum(
    @common.Body() data: PracticumCreateInput
  ): Promise<Practicum> {
    return await this.service.createPracticum({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        date: true,
        id: true,
        pracType: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Practicum] })
  @ApiNestedQuery(PracticumFindManyArgs)
  async practicums(@common.Req() request: Request): Promise<Practicum[]> {
    const args = plainToClass(PracticumFindManyArgs, request.query);
    return this.service.practicums({
      ...args,
      select: {
        date: true,
        id: true,
        pracType: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Practicum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async practicum(
    @common.Param() params: PracticumWhereUniqueInput
  ): Promise<Practicum | null> {
    const result = await this.service.practicum({
      where: params,
      select: {
        date: true,
        id: true,
        pracType: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Practicum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePracticum(
    @common.Param() params: PracticumWhereUniqueInput,
    @common.Body() data: PracticumUpdateInput
  ): Promise<Practicum | null> {
    try {
      return await this.service.updatePracticum({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          date: true,
          id: true,
          pracType: true,

          studentData: {
            select: {
              id: true,
            },
          },

          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Practicum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePracticum(
    @common.Param() params: PracticumWhereUniqueInput
  ): Promise<Practicum | null> {
    try {
      return await this.service.deletePracticum({
        where: params,
        select: {
          date: true,
          id: true,
          pracType: true,

          studentData: {
            select: {
              id: true,
            },
          },

          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
