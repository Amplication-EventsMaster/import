/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Practicum as PrismaPracticum,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class PracticumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PracticumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.practicum.count(args);
  }

  async practicums<T extends Prisma.PracticumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticumFindManyArgs>
  ): Promise<PrismaPracticum[]> {
    return this.prisma.practicum.findMany<Prisma.PracticumFindManyArgs>(args);
  }
  async practicum<T extends Prisma.PracticumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticumFindUniqueArgs>
  ): Promise<PrismaPracticum | null> {
    return this.prisma.practicum.findUnique(args);
  }
  async createPracticum<T extends Prisma.PracticumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticumCreateArgs>
  ): Promise<PrismaPracticum> {
    return this.prisma.practicum.create<T>(args);
  }
  async updatePracticum<T extends Prisma.PracticumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticumUpdateArgs>
  ): Promise<PrismaPracticum> {
    return this.prisma.practicum.update<T>(args);
  }
  async deletePracticum<T extends Prisma.PracticumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PracticumDeleteArgs>
  ): Promise<PrismaPracticum> {
    return this.prisma.practicum.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.practicum
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
