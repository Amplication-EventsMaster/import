/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentCommitteeMeeting } from "./StudentCommitteeMeeting";
import { StudentCommitteeMeetingCountArgs } from "./StudentCommitteeMeetingCountArgs";
import { StudentCommitteeMeetingFindManyArgs } from "./StudentCommitteeMeetingFindManyArgs";
import { StudentCommitteeMeetingFindUniqueArgs } from "./StudentCommitteeMeetingFindUniqueArgs";
import { CreateStudentCommitteeMeetingArgs } from "./CreateStudentCommitteeMeetingArgs";
import { UpdateStudentCommitteeMeetingArgs } from "./UpdateStudentCommitteeMeetingArgs";
import { DeleteStudentCommitteeMeetingArgs } from "./DeleteStudentCommitteeMeetingArgs";
import { StudentCommitteeMeetingService } from "../studentCommitteeMeeting.service";
@graphql.Resolver(() => StudentCommitteeMeeting)
export class StudentCommitteeMeetingResolverBase {
  constructor(protected readonly service: StudentCommitteeMeetingService) {}

  async _studentCommitteeMeetingsMeta(
    @graphql.Args() args: StudentCommitteeMeetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentCommitteeMeeting])
  async studentCommitteeMeetings(
    @graphql.Args() args: StudentCommitteeMeetingFindManyArgs
  ): Promise<StudentCommitteeMeeting[]> {
    return this.service.studentCommitteeMeetings(args);
  }

  @graphql.Query(() => StudentCommitteeMeeting, { nullable: true })
  async studentCommitteeMeeting(
    @graphql.Args() args: StudentCommitteeMeetingFindUniqueArgs
  ): Promise<StudentCommitteeMeeting | null> {
    const result = await this.service.studentCommitteeMeeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentCommitteeMeeting)
  async createStudentCommitteeMeeting(
    @graphql.Args() args: CreateStudentCommitteeMeetingArgs
  ): Promise<StudentCommitteeMeeting> {
    return await this.service.createStudentCommitteeMeeting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StudentCommitteeMeeting)
  async updateStudentCommitteeMeeting(
    @graphql.Args() args: UpdateStudentCommitteeMeetingArgs
  ): Promise<StudentCommitteeMeeting | null> {
    try {
      return await this.service.updateStudentCommitteeMeeting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentCommitteeMeeting)
  async deleteStudentCommitteeMeeting(
    @graphql.Args() args: DeleteStudentCommitteeMeetingArgs
  ): Promise<StudentCommitteeMeeting | null> {
    try {
      return await this.service.deleteStudentCommitteeMeeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
