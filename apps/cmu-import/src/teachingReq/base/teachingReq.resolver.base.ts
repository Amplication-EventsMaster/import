/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TeachingReq } from "./TeachingReq";
import { TeachingReqCountArgs } from "./TeachingReqCountArgs";
import { TeachingReqFindManyArgs } from "./TeachingReqFindManyArgs";
import { TeachingReqFindUniqueArgs } from "./TeachingReqFindUniqueArgs";
import { CreateTeachingReqArgs } from "./CreateTeachingReqArgs";
import { UpdateTeachingReqArgs } from "./UpdateTeachingReqArgs";
import { DeleteTeachingReqArgs } from "./DeleteTeachingReqArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { TeachingReqService } from "../teachingReq.service";
@graphql.Resolver(() => TeachingReq)
export class TeachingReqResolverBase {
  constructor(protected readonly service: TeachingReqService) {}

  async _teachingReqsMeta(
    @graphql.Args() args: TeachingReqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TeachingReq])
  async teachingReqs(
    @graphql.Args() args: TeachingReqFindManyArgs
  ): Promise<TeachingReq[]> {
    return this.service.teachingReqs(args);
  }

  @graphql.Query(() => TeachingReq, { nullable: true })
  async teachingReq(
    @graphql.Args() args: TeachingReqFindUniqueArgs
  ): Promise<TeachingReq | null> {
    const result = await this.service.teachingReq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TeachingReq)
  async createTeachingReq(
    @graphql.Args() args: CreateTeachingReqArgs
  ): Promise<TeachingReq> {
    return await this.service.createTeachingReq({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => TeachingReq)
  async updateTeachingReq(
    @graphql.Args() args: UpdateTeachingReqArgs
  ): Promise<TeachingReq | null> {
    try {
      return await this.service.updateTeachingReq({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TeachingReq)
  async deleteTeachingReq(
    @graphql.Args() args: DeleteTeachingReqArgs
  ): Promise<TeachingReq | null> {
    try {
      return await this.service.deleteTeachingReq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: TeachingReq
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
