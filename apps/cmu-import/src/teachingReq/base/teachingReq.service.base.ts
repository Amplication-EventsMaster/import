/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TeachingReq as PrismaTeachingReq,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class TeachingReqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TeachingReqCountArgs, "select">
  ): Promise<number> {
    return this.prisma.teachingReq.count(args);
  }

  async teachingReqs<T extends Prisma.TeachingReqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeachingReqFindManyArgs>
  ): Promise<PrismaTeachingReq[]> {
    return this.prisma.teachingReq.findMany<Prisma.TeachingReqFindManyArgs>(
      args
    );
  }
  async teachingReq<T extends Prisma.TeachingReqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeachingReqFindUniqueArgs>
  ): Promise<PrismaTeachingReq | null> {
    return this.prisma.teachingReq.findUnique(args);
  }
  async createTeachingReq<T extends Prisma.TeachingReqCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeachingReqCreateArgs>
  ): Promise<PrismaTeachingReq> {
    return this.prisma.teachingReq.create<T>(args);
  }
  async updateTeachingReq<T extends Prisma.TeachingReqUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeachingReqUpdateArgs>
  ): Promise<PrismaTeachingReq> {
    return this.prisma.teachingReq.update<T>(args);
  }
  async deleteTeachingReq<T extends Prisma.TeachingReqDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TeachingReqDeleteArgs>
  ): Promise<PrismaTeachingReq> {
    return this.prisma.teachingReq.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.teachingReq
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
