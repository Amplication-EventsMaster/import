/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QualsResearchForOtherStudent as PrismaQualsResearchForOtherStudent,
  QualsCommittee as PrismaQualsCommittee,
} from "@prisma/client";

export class QualsResearchForOtherStudentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualsResearchForOtherStudentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualsResearchForOtherStudent.count(args);
  }

  async qualsResearchForOtherStudents<
    T extends Prisma.QualsResearchForOtherStudentFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.QualsResearchForOtherStudentFindManyArgs
    >
  ): Promise<PrismaQualsResearchForOtherStudent[]> {
    return this.prisma.qualsResearchForOtherStudent.findMany<Prisma.QualsResearchForOtherStudentFindManyArgs>(
      args
    );
  }
  async qualsResearchForOtherStudent<
    T extends Prisma.QualsResearchForOtherStudentFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.QualsResearchForOtherStudentFindUniqueArgs
    >
  ): Promise<PrismaQualsResearchForOtherStudent | null> {
    return this.prisma.qualsResearchForOtherStudent.findUnique(args);
  }
  async createQualsResearchForOtherStudent<
    T extends Prisma.QualsResearchForOtherStudentCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchForOtherStudentCreateArgs>
  ): Promise<PrismaQualsResearchForOtherStudent> {
    return this.prisma.qualsResearchForOtherStudent.create<T>(args);
  }
  async updateQualsResearchForOtherStudent<
    T extends Prisma.QualsResearchForOtherStudentUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchForOtherStudentUpdateArgs>
  ): Promise<PrismaQualsResearchForOtherStudent> {
    return this.prisma.qualsResearchForOtherStudent.update<T>(args);
  }
  async deleteQualsResearchForOtherStudent<
    T extends Prisma.QualsResearchForOtherStudentDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchForOtherStudentDeleteArgs>
  ): Promise<PrismaQualsResearchForOtherStudent> {
    return this.prisma.qualsResearchForOtherStudent.delete(args);
  }

  async getQualsCommittee(
    parentId: number
  ): Promise<PrismaQualsCommittee | null> {
    return this.prisma.qualsResearchForOtherStudent
      .findUnique({
        where: { id: parentId },
      })
      .qualsCommittee();
  }
}
