/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualsResearchForOtherStudent } from "./QualsResearchForOtherStudent";
import { QualsResearchForOtherStudentCountArgs } from "./QualsResearchForOtherStudentCountArgs";
import { QualsResearchForOtherStudentFindManyArgs } from "./QualsResearchForOtherStudentFindManyArgs";
import { QualsResearchForOtherStudentFindUniqueArgs } from "./QualsResearchForOtherStudentFindUniqueArgs";
import { CreateQualsResearchForOtherStudentArgs } from "./CreateQualsResearchForOtherStudentArgs";
import { UpdateQualsResearchForOtherStudentArgs } from "./UpdateQualsResearchForOtherStudentArgs";
import { DeleteQualsResearchForOtherStudentArgs } from "./DeleteQualsResearchForOtherStudentArgs";
import { QualsCommittee } from "../../qualsCommittee/base/QualsCommittee";
import { QualsResearchForOtherStudentService } from "../qualsResearchForOtherStudent.service";
@graphql.Resolver(() => QualsResearchForOtherStudent)
export class QualsResearchForOtherStudentResolverBase {
  constructor(
    protected readonly service: QualsResearchForOtherStudentService
  ) {}

  async _qualsResearchForOtherStudentsMeta(
    @graphql.Args() args: QualsResearchForOtherStudentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualsResearchForOtherStudent])
  async qualsResearchForOtherStudents(
    @graphql.Args() args: QualsResearchForOtherStudentFindManyArgs
  ): Promise<QualsResearchForOtherStudent[]> {
    return this.service.qualsResearchForOtherStudents(args);
  }

  @graphql.Query(() => QualsResearchForOtherStudent, { nullable: true })
  async qualsResearchForOtherStudent(
    @graphql.Args() args: QualsResearchForOtherStudentFindUniqueArgs
  ): Promise<QualsResearchForOtherStudent | null> {
    const result = await this.service.qualsResearchForOtherStudent(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualsResearchForOtherStudent)
  async createQualsResearchForOtherStudent(
    @graphql.Args() args: CreateQualsResearchForOtherStudentArgs
  ): Promise<QualsResearchForOtherStudent> {
    return await this.service.createQualsResearchForOtherStudent({
      ...args,
      data: {
        ...args.data,

        qualsCommittee: args.data.qualsCommittee
          ? {
              connect: args.data.qualsCommittee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QualsResearchForOtherStudent)
  async updateQualsResearchForOtherStudent(
    @graphql.Args() args: UpdateQualsResearchForOtherStudentArgs
  ): Promise<QualsResearchForOtherStudent | null> {
    try {
      return await this.service.updateQualsResearchForOtherStudent({
        ...args,
        data: {
          ...args.data,

          qualsCommittee: args.data.qualsCommittee
            ? {
                connect: args.data.qualsCommittee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualsResearchForOtherStudent)
  async deleteQualsResearchForOtherStudent(
    @graphql.Args() args: DeleteQualsResearchForOtherStudentArgs
  ): Promise<QualsResearchForOtherStudent | null> {
    try {
      return await this.service.deleteQualsResearchForOtherStudent(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QualsCommittee, {
    nullable: true,
    name: "qualsCommittee",
  })
  async getQualsCommittee(
    @graphql.Parent() parent: QualsResearchForOtherStudent
  ): Promise<QualsCommittee | null> {
    const result = await this.service.getQualsCommittee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
