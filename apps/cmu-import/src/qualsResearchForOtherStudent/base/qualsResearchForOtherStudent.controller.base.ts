/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualsResearchForOtherStudentService } from "../qualsResearchForOtherStudent.service";
import { QualsResearchForOtherStudentCreateInput } from "./QualsResearchForOtherStudentCreateInput";
import { QualsResearchForOtherStudent } from "./QualsResearchForOtherStudent";
import { QualsResearchForOtherStudentFindManyArgs } from "./QualsResearchForOtherStudentFindManyArgs";
import { QualsResearchForOtherStudentWhereUniqueInput } from "./QualsResearchForOtherStudentWhereUniqueInput";
import { QualsResearchForOtherStudentUpdateInput } from "./QualsResearchForOtherStudentUpdateInput";

export class QualsResearchForOtherStudentControllerBase {
  constructor(
    protected readonly service: QualsResearchForOtherStudentService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QualsResearchForOtherStudent })
  async createQualsResearchForOtherStudent(
    @common.Body() data: QualsResearchForOtherStudentCreateInput
  ): Promise<QualsResearchForOtherStudent> {
    return await this.service.createQualsResearchForOtherStudent({
      data: {
        ...data,

        qualsCommittee: data.qualsCommittee
          ? {
              connect: data.qualsCommittee,
            }
          : undefined,
      },
      select: {
        approach: true,
        approachExp: true,
        id: true,
        insight: true,
        insightExp: true,
        interpretation: true,
        interpretationExp: true,
        overall: true,
        overallExp: true,
        progress: true,

        qualsCommittee: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QualsResearchForOtherStudent] })
  @ApiNestedQuery(QualsResearchForOtherStudentFindManyArgs)
  async qualsResearchForOtherStudents(
    @common.Req() request: Request
  ): Promise<QualsResearchForOtherStudent[]> {
    const args = plainToClass(
      QualsResearchForOtherStudentFindManyArgs,
      request.query
    );
    return this.service.qualsResearchForOtherStudents({
      ...args,
      select: {
        approach: true,
        approachExp: true,
        id: true,
        insight: true,
        insightExp: true,
        interpretation: true,
        interpretationExp: true,
        overall: true,
        overallExp: true,
        progress: true,

        qualsCommittee: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QualsResearchForOtherStudent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qualsResearchForOtherStudent(
    @common.Param() params: QualsResearchForOtherStudentWhereUniqueInput
  ): Promise<QualsResearchForOtherStudent | null> {
    const result = await this.service.qualsResearchForOtherStudent({
      where: params,
      select: {
        approach: true,
        approachExp: true,
        id: true,
        insight: true,
        insightExp: true,
        interpretation: true,
        interpretationExp: true,
        overall: true,
        overallExp: true,
        progress: true,

        qualsCommittee: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QualsResearchForOtherStudent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQualsResearchForOtherStudent(
    @common.Param() params: QualsResearchForOtherStudentWhereUniqueInput,
    @common.Body() data: QualsResearchForOtherStudentUpdateInput
  ): Promise<QualsResearchForOtherStudent | null> {
    try {
      return await this.service.updateQualsResearchForOtherStudent({
        where: params,
        data: {
          ...data,

          qualsCommittee: data.qualsCommittee
            ? {
                connect: data.qualsCommittee,
              }
            : undefined,
        },
        select: {
          approach: true,
          approachExp: true,
          id: true,
          insight: true,
          insightExp: true,
          interpretation: true,
          interpretationExp: true,
          overall: true,
          overallExp: true,
          progress: true,

          qualsCommittee: {
            select: {
              id: true,
            },
          },

          status: true,
          studentId: true,
          summary: true,
          timestamp: true,
          understanding: true,
          understandingExp: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QualsResearchForOtherStudent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQualsResearchForOtherStudent(
    @common.Param() params: QualsResearchForOtherStudentWhereUniqueInput
  ): Promise<QualsResearchForOtherStudent | null> {
    try {
      return await this.service.deleteQualsResearchForOtherStudent({
        where: params,
        select: {
          approach: true,
          approachExp: true,
          id: true,
          insight: true,
          insightExp: true,
          interpretation: true,
          interpretationExp: true,
          overall: true,
          overallExp: true,
          progress: true,

          qualsCommittee: {
            select: {
              id: true,
            },
          },

          status: true,
          studentId: true,
          summary: true,
          timestamp: true,
          understanding: true,
          understandingExp: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
