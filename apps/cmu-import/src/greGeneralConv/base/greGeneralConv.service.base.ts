/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GreGeneralConv as PrismaGreGeneralConv } from "@prisma/client";

export class GreGeneralConvServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GreGeneralConvCountArgs, "select">
  ): Promise<number> {
    return this.prisma.greGeneralConv.count(args);
  }

  async greGeneralConvs<T extends Prisma.GreGeneralConvFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreGeneralConvFindManyArgs>
  ): Promise<PrismaGreGeneralConv[]> {
    return this.prisma.greGeneralConv.findMany<Prisma.GreGeneralConvFindManyArgs>(
      args
    );
  }
  async greGeneralConv<T extends Prisma.GreGeneralConvFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreGeneralConvFindUniqueArgs>
  ): Promise<PrismaGreGeneralConv | null> {
    return this.prisma.greGeneralConv.findUnique(args);
  }
  async createGreGeneralConv<T extends Prisma.GreGeneralConvCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreGeneralConvCreateArgs>
  ): Promise<PrismaGreGeneralConv> {
    return this.prisma.greGeneralConv.create<T>(args);
  }
  async updateGreGeneralConv<T extends Prisma.GreGeneralConvUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreGeneralConvUpdateArgs>
  ): Promise<PrismaGreGeneralConv> {
    return this.prisma.greGeneralConv.update<T>(args);
  }
  async deleteGreGeneralConv<T extends Prisma.GreGeneralConvDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GreGeneralConvDeleteArgs>
  ): Promise<PrismaGreGeneralConv> {
    return this.prisma.greGeneralConv.delete(args);
  }
}
