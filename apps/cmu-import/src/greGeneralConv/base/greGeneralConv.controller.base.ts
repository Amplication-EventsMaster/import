/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GreGeneralConvService } from "../greGeneralConv.service";
import { GreGeneralConvCreateInput } from "./GreGeneralConvCreateInput";
import { GreGeneralConv } from "./GreGeneralConv";
import { GreGeneralConvFindManyArgs } from "./GreGeneralConvFindManyArgs";
import { GreGeneralConvWhereUniqueInput } from "./GreGeneralConvWhereUniqueInput";
import { GreGeneralConvUpdateInput } from "./GreGeneralConvUpdateInput";

export class GreGeneralConvControllerBase {
  constructor(protected readonly service: GreGeneralConvService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GreGeneralConv })
  async createGreGeneralConv(
    @common.Body() data: GreGeneralConvCreateInput
  ): Promise<GreGeneralConv> {
    return await this.service.createGreGeneralConv({
      data: data,
      select: {
        currentScale: true,
        id: true,
        priorScale: true,
        subject: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GreGeneralConv] })
  @ApiNestedQuery(GreGeneralConvFindManyArgs)
  async greGeneralConvs(
    @common.Req() request: Request
  ): Promise<GreGeneralConv[]> {
    const args = plainToClass(GreGeneralConvFindManyArgs, request.query);
    return this.service.greGeneralConvs({
      ...args,
      select: {
        currentScale: true,
        id: true,
        priorScale: true,
        subject: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GreGeneralConv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async greGeneralConv(
    @common.Param() params: GreGeneralConvWhereUniqueInput
  ): Promise<GreGeneralConv | null> {
    const result = await this.service.greGeneralConv({
      where: params,
      select: {
        currentScale: true,
        id: true,
        priorScale: true,
        subject: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GreGeneralConv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGreGeneralConv(
    @common.Param() params: GreGeneralConvWhereUniqueInput,
    @common.Body() data: GreGeneralConvUpdateInput
  ): Promise<GreGeneralConv | null> {
    try {
      return await this.service.updateGreGeneralConv({
        where: params,
        data: data,
        select: {
          currentScale: true,
          id: true,
          priorScale: true,
          subject: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GreGeneralConv })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGreGeneralConv(
    @common.Param() params: GreGeneralConvWhereUniqueInput
  ): Promise<GreGeneralConv | null> {
    try {
      return await this.service.deleteGreGeneralConv({
        where: params,
        select: {
          currentScale: true,
          id: true,
          priorScale: true,
          subject: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
