/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentMentor as PrismaStudentMentor,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentMentorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentMentorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentMentor.count(args);
  }

  async studentMentors<T extends Prisma.StudentMentorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentMentorFindManyArgs>
  ): Promise<PrismaStudentMentor[]> {
    return this.prisma.studentMentor.findMany<Prisma.StudentMentorFindManyArgs>(
      args
    );
  }
  async studentMentor<T extends Prisma.StudentMentorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentMentorFindUniqueArgs>
  ): Promise<PrismaStudentMentor | null> {
    return this.prisma.studentMentor.findUnique(args);
  }
  async createStudentMentor<T extends Prisma.StudentMentorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentMentorCreateArgs>
  ): Promise<PrismaStudentMentor> {
    return this.prisma.studentMentor.create<T>(args);
  }
  async updateStudentMentor<T extends Prisma.StudentMentorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentMentorUpdateArgs>
  ): Promise<PrismaStudentMentor> {
    return this.prisma.studentMentor.update<T>(args);
  }
  async deleteStudentMentor<T extends Prisma.StudentMentorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentMentorDeleteArgs>
  ): Promise<PrismaStudentMentor> {
    return this.prisma.studentMentor.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentMentor
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
