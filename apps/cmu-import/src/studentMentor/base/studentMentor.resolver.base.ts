/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentMentor } from "./StudentMentor";
import { StudentMentorCountArgs } from "./StudentMentorCountArgs";
import { StudentMentorFindManyArgs } from "./StudentMentorFindManyArgs";
import { StudentMentorFindUniqueArgs } from "./StudentMentorFindUniqueArgs";
import { CreateStudentMentorArgs } from "./CreateStudentMentorArgs";
import { UpdateStudentMentorArgs } from "./UpdateStudentMentorArgs";
import { DeleteStudentMentorArgs } from "./DeleteStudentMentorArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentMentorService } from "../studentMentor.service";
@graphql.Resolver(() => StudentMentor)
export class StudentMentorResolverBase {
  constructor(protected readonly service: StudentMentorService) {}

  async _studentMentorsMeta(
    @graphql.Args() args: StudentMentorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentMentor])
  async studentMentors(
    @graphql.Args() args: StudentMentorFindManyArgs
  ): Promise<StudentMentor[]> {
    return this.service.studentMentors(args);
  }

  @graphql.Query(() => StudentMentor, { nullable: true })
  async studentMentor(
    @graphql.Args() args: StudentMentorFindUniqueArgs
  ): Promise<StudentMentor | null> {
    const result = await this.service.studentMentor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentMentor)
  async createStudentMentor(
    @graphql.Args() args: CreateStudentMentorArgs
  ): Promise<StudentMentor> {
    return await this.service.createStudentMentor({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentMentor)
  async updateStudentMentor(
    @graphql.Args() args: UpdateStudentMentorArgs
  ): Promise<StudentMentor | null> {
    try {
      return await this.service.updateStudentMentor({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentMentor)
  async deleteStudentMentor(
    @graphql.Args() args: DeleteStudentMentorArgs
  ): Promise<StudentMentor | null> {
    try {
      return await this.service.deleteStudentMentor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentMentor
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
