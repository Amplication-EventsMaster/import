/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentMentorService } from "../studentMentor.service";
import { StudentMentorCreateInput } from "./StudentMentorCreateInput";
import { StudentMentor } from "./StudentMentor";
import { StudentMentorFindManyArgs } from "./StudentMentorFindManyArgs";
import { StudentMentorWhereUniqueInput } from "./StudentMentorWhereUniqueInput";
import { StudentMentorUpdateInput } from "./StudentMentorUpdateInput";

export class StudentMentorControllerBase {
  constructor(protected readonly service: StudentMentorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentMentor })
  async createStudentMentor(
    @common.Body() data: StudentMentorCreateInput
  ): Promise<StudentMentor> {
    return await this.service.createStudentMentor({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentMentor] })
  @ApiNestedQuery(StudentMentorFindManyArgs)
  async studentMentors(
    @common.Req() request: Request
  ): Promise<StudentMentor[]> {
    const args = plainToClass(StudentMentorFindManyArgs, request.query);
    return this.service.studentMentors({
      ...args,
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentMentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentMentor(
    @common.Param() params: StudentMentorWhereUniqueInput
  ): Promise<StudentMentor | null> {
    const result = await this.service.studentMentor({
      where: params,
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentMentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentMentor(
    @common.Param() params: StudentMentorWhereUniqueInput,
    @common.Body() data: StudentMentorUpdateInput
  ): Promise<StudentMentor | null> {
    try {
      return await this.service.updateStudentMentor({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          consultant: true,
          current: true,
          endDate: true,
          facultyId: true,
          id: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentMentor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentMentor(
    @common.Param() params: StudentMentorWhereUniqueInput
  ): Promise<StudentMentor | null> {
    try {
      return await this.service.deleteStudentMentor({
        where: params,
        select: {
          consultant: true,
          current: true,
          endDate: true,
          facultyId: true,
          id: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
