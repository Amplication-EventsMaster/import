/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumQualsSpeakingAvQuality } from "./EnumQualsSpeakingAvQuality";
import { IsEnum, IsOptional, ValidateNested } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { Type } from "class-transformer";
import { IntFilter } from "../../util/IntFilter";
import { EnumQualsSpeakingInteraction } from "./EnumQualsSpeakingInteraction";
import { EnumQualsSpeakingOrganization } from "./EnumQualsSpeakingOrganization";
import { EnumQualsSpeakingOverall } from "./EnumQualsSpeakingOverall";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { QualsSpeakingAspectListRelationFilter } from "../../qualsSpeakingAspect/base/QualsSpeakingAspectListRelationFilter";
import { EnumQualsSpeakingSpeakingSkill } from "./EnumQualsSpeakingSpeakingSkill";
import { EnumQualsSpeakingStatus } from "./EnumQualsSpeakingStatus";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EnumQualsSpeakingUnderstanding } from "./EnumQualsSpeakingUnderstanding";

@InputType()
class QualsSpeakingWhereInput {
  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingAvQuality,
  })
  @IsEnum(EnumQualsSpeakingAvQuality)
  @IsOptional()
  @Field(() => EnumQualsSpeakingAvQuality, {
    nullable: true,
  })
  av_quality?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  avQualityExp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingInteraction,
  })
  @IsEnum(EnumQualsSpeakingInteraction)
  @IsOptional()
  @Field(() => EnumQualsSpeakingInteraction, {
    nullable: true,
  })
  interaction?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  interactionExp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingOrganization,
  })
  @IsEnum(EnumQualsSpeakingOrganization)
  @IsOptional()
  @Field(() => EnumQualsSpeakingOrganization, {
    nullable: true,
  })
  organization?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  organizationExp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingOverall,
  })
  @IsEnum(EnumQualsSpeakingOverall)
  @IsOptional()
  @Field(() => EnumQualsSpeakingOverall, {
    nullable: true,
  })
  overall?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  overallExp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  qcId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => QualsSpeakingAspectListRelationFilter,
  })
  @ValidateNested()
  @Type(() => QualsSpeakingAspectListRelationFilter)
  @IsOptional()
  @Field(() => QualsSpeakingAspectListRelationFilter, {
    nullable: true,
  })
  qualsSpeakingAspect?: QualsSpeakingAspectListRelationFilter;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingSpeakingSkill,
  })
  @IsEnum(EnumQualsSpeakingSpeakingSkill)
  @IsOptional()
  @Field(() => EnumQualsSpeakingSpeakingSkill, {
    nullable: true,
  })
  speaking_skill?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  speakingSkillExp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingStatus,
  })
  @IsEnum(EnumQualsSpeakingStatus)
  @IsOptional()
  @Field(() => EnumQualsSpeakingStatus, {
    nullable: true,
  })
  status?: "Satisfied" | "Progress";

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  studentId?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  summary?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  timestamp?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingUnderstanding,
  })
  @IsEnum(EnumQualsSpeakingUnderstanding)
  @IsOptional()
  @Field(() => EnumQualsSpeakingUnderstanding, {
    nullable: true,
  })
  understanding?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  understandingExp?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  urId?: IntNullableFilter;
}

export { QualsSpeakingWhereInput as QualsSpeakingWhereInput };
