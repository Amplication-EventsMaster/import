/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QualsSpeaking as PrismaQualsSpeaking,
  QualsSpeakingAspect as PrismaQualsSpeakingAspect,
} from "@prisma/client";

export class QualsSpeakingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualsSpeakingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualsSpeaking.count(args);
  }

  async qualsSpeakings<T extends Prisma.QualsSpeakingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingFindManyArgs>
  ): Promise<PrismaQualsSpeaking[]> {
    return this.prisma.qualsSpeaking.findMany<Prisma.QualsSpeakingFindManyArgs>(
      args
    );
  }
  async qualsSpeaking<T extends Prisma.QualsSpeakingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingFindUniqueArgs>
  ): Promise<PrismaQualsSpeaking | null> {
    return this.prisma.qualsSpeaking.findUnique(args);
  }
  async createQualsSpeaking<T extends Prisma.QualsSpeakingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingCreateArgs>
  ): Promise<PrismaQualsSpeaking> {
    return this.prisma.qualsSpeaking.create<T>(args);
  }
  async updateQualsSpeaking<T extends Prisma.QualsSpeakingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingUpdateArgs>
  ): Promise<PrismaQualsSpeaking> {
    return this.prisma.qualsSpeaking.update<T>(args);
  }
  async deleteQualsSpeaking<T extends Prisma.QualsSpeakingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingDeleteArgs>
  ): Promise<PrismaQualsSpeaking> {
    return this.prisma.qualsSpeaking.delete(args);
  }

  async findQualsSpeakingAspect(
    parentId: number,
    args: Prisma.QualsSpeakingAspectFindManyArgs
  ): Promise<PrismaQualsSpeakingAspect[]> {
    return this.prisma.qualsSpeaking
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .qualsSpeakingAspect(args);
  }
}
