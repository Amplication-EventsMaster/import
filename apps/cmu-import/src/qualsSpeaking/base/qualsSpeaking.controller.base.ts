/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualsSpeakingService } from "../qualsSpeaking.service";
import { QualsSpeakingCreateInput } from "./QualsSpeakingCreateInput";
import { QualsSpeaking } from "./QualsSpeaking";
import { QualsSpeakingFindManyArgs } from "./QualsSpeakingFindManyArgs";
import { QualsSpeakingWhereUniqueInput } from "./QualsSpeakingWhereUniqueInput";
import { QualsSpeakingUpdateInput } from "./QualsSpeakingUpdateInput";
import { QualsSpeakingAspectFindManyArgs } from "../../qualsSpeakingAspect/base/QualsSpeakingAspectFindManyArgs";
import { QualsSpeakingAspect } from "../../qualsSpeakingAspect/base/QualsSpeakingAspect";
import { QualsSpeakingAspectWhereUniqueInput } from "../../qualsSpeakingAspect/base/QualsSpeakingAspectWhereUniqueInput";

export class QualsSpeakingControllerBase {
  constructor(protected readonly service: QualsSpeakingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QualsSpeaking })
  async createQualsSpeaking(
    @common.Body() data: QualsSpeakingCreateInput
  ): Promise<QualsSpeaking> {
    return await this.service.createQualsSpeaking({
      data: data,
      select: {
        av_quality: true,
        avQualityExp: true,
        id: true,
        interaction: true,
        interactionExp: true,
        organization: true,
        organizationExp: true,
        overall: true,
        overallExp: true,
        qcId: true,
        speaking_skill: true,
        speakingSkillExp: true,
        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QualsSpeaking] })
  @ApiNestedQuery(QualsSpeakingFindManyArgs)
  async qualsSpeakings(
    @common.Req() request: Request
  ): Promise<QualsSpeaking[]> {
    const args = plainToClass(QualsSpeakingFindManyArgs, request.query);
    return this.service.qualsSpeakings({
      ...args,
      select: {
        av_quality: true,
        avQualityExp: true,
        id: true,
        interaction: true,
        interactionExp: true,
        organization: true,
        organizationExp: true,
        overall: true,
        overallExp: true,
        qcId: true,
        speaking_skill: true,
        speakingSkillExp: true,
        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QualsSpeaking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qualsSpeaking(
    @common.Param() params: QualsSpeakingWhereUniqueInput
  ): Promise<QualsSpeaking | null> {
    const result = await this.service.qualsSpeaking({
      where: params,
      select: {
        av_quality: true,
        avQualityExp: true,
        id: true,
        interaction: true,
        interactionExp: true,
        organization: true,
        organizationExp: true,
        overall: true,
        overallExp: true,
        qcId: true,
        speaking_skill: true,
        speakingSkillExp: true,
        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QualsSpeaking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQualsSpeaking(
    @common.Param() params: QualsSpeakingWhereUniqueInput,
    @common.Body() data: QualsSpeakingUpdateInput
  ): Promise<QualsSpeaking | null> {
    try {
      return await this.service.updateQualsSpeaking({
        where: params,
        data: data,
        select: {
          av_quality: true,
          avQualityExp: true,
          id: true,
          interaction: true,
          interactionExp: true,
          organization: true,
          organizationExp: true,
          overall: true,
          overallExp: true,
          qcId: true,
          speaking_skill: true,
          speakingSkillExp: true,
          status: true,
          studentId: true,
          summary: true,
          timestamp: true,
          understanding: true,
          understandingExp: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QualsSpeaking })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQualsSpeaking(
    @common.Param() params: QualsSpeakingWhereUniqueInput
  ): Promise<QualsSpeaking | null> {
    try {
      return await this.service.deleteQualsSpeaking({
        where: params,
        select: {
          av_quality: true,
          avQualityExp: true,
          id: true,
          interaction: true,
          interactionExp: true,
          organization: true,
          organizationExp: true,
          overall: true,
          overallExp: true,
          qcId: true,
          speaking_skill: true,
          speakingSkillExp: true,
          status: true,
          studentId: true,
          summary: true,
          timestamp: true,
          understanding: true,
          understandingExp: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/qualsSpeakingAspect")
  @ApiNestedQuery(QualsSpeakingAspectFindManyArgs)
  async findQualsSpeakingAspect(
    @common.Req() request: Request,
    @common.Param() params: QualsSpeakingWhereUniqueInput
  ): Promise<QualsSpeakingAspect[]> {
    const query = plainToClass(QualsSpeakingAspectFindManyArgs, request.query);
    const results = await this.service.findQualsSpeakingAspect(params.id, {
      ...query,
      select: {
        id: true,

        qualsSpeaking: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/qualsSpeakingAspect")
  async connectQualsSpeakingAspect(
    @common.Param() params: QualsSpeakingWhereUniqueInput,
    @common.Body() body: QualsSpeakingAspectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qualsSpeakingAspect: {
        connect: body,
      },
    };
    await this.service.updateQualsSpeaking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/qualsSpeakingAspect")
  async updateQualsSpeakingAspect(
    @common.Param() params: QualsSpeakingWhereUniqueInput,
    @common.Body() body: QualsSpeakingAspectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qualsSpeakingAspect: {
        set: body,
      },
    };
    await this.service.updateQualsSpeaking({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/qualsSpeakingAspect")
  async disconnectQualsSpeakingAspect(
    @common.Param() params: QualsSpeakingWhereUniqueInput,
    @common.Body() body: QualsSpeakingAspectWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qualsSpeakingAspect: {
        disconnect: body,
      },
    };
    await this.service.updateQualsSpeaking({
      where: params,
      data,
      select: { id: true },
    });
  }
}
