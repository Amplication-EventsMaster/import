/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { EnumQualsSpeakingAvQuality } from "./EnumQualsSpeakingAvQuality";
import {
  IsEnum,
  IsOptional,
  IsString,
  IsInt,
  ValidateNested,
  IsDate,
} from "class-validator";
import { EnumQualsSpeakingInteraction } from "./EnumQualsSpeakingInteraction";
import { EnumQualsSpeakingOrganization } from "./EnumQualsSpeakingOrganization";
import { EnumQualsSpeakingOverall } from "./EnumQualsSpeakingOverall";
import { QualsSpeakingAspect } from "../../qualsSpeakingAspect/base/QualsSpeakingAspect";
import { Type } from "class-transformer";
import { EnumQualsSpeakingSpeakingSkill } from "./EnumQualsSpeakingSpeakingSkill";
import { EnumQualsSpeakingStatus } from "./EnumQualsSpeakingStatus";
import { EnumQualsSpeakingUnderstanding } from "./EnumQualsSpeakingUnderstanding";

@ObjectType()
class QualsSpeaking {
  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingAvQuality,
  })
  @IsEnum(EnumQualsSpeakingAvQuality)
  @IsOptional()
  @Field(() => EnumQualsSpeakingAvQuality, {
    nullable: true,
  })
  av_quality?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  avQualityExp!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Field(() => Number)
  id!: number;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingInteraction,
  })
  @IsEnum(EnumQualsSpeakingInteraction)
  @IsOptional()
  @Field(() => EnumQualsSpeakingInteraction, {
    nullable: true,
  })
  interaction?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  interactionExp!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingOrganization,
  })
  @IsEnum(EnumQualsSpeakingOrganization)
  @IsOptional()
  @Field(() => EnumQualsSpeakingOrganization, {
    nullable: true,
  })
  organization?:
    | "Excellent"
    | "Good"
    | "Satisfactory"
    | "Unsatisfactory"
    | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  organizationExp!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingOverall,
  })
  @IsEnum(EnumQualsSpeakingOverall)
  @IsOptional()
  @Field(() => EnumQualsSpeakingOverall, {
    nullable: true,
  })
  overall?: "Excellent" | "Good" | "Satisfactory" | "Unsatisfactory" | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  overallExp!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  qcId!: number | null;

  @ApiProperty({
    required: false,
    type: () => [QualsSpeakingAspect],
  })
  @ValidateNested()
  @Type(() => QualsSpeakingAspect)
  @IsOptional()
  qualsSpeakingAspect?: Array<QualsSpeakingAspect>;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingSpeakingSkill,
  })
  @IsEnum(EnumQualsSpeakingSpeakingSkill)
  @IsOptional()
  @Field(() => EnumQualsSpeakingSpeakingSkill, {
    nullable: true,
  })
  speaking_skill?:
    | "Excellent"
    | "Good"
    | "Satisfactory"
    | "Unsatisfactory"
    | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  speakingSkillExp!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingStatus,
  })
  @IsEnum(EnumQualsSpeakingStatus)
  @IsOptional()
  @Field(() => EnumQualsSpeakingStatus, {
    nullable: true,
  })
  status?: "Satisfied" | "Progress" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  studentId!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  summary!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  timestamp!: Date | null;

  @ApiProperty({
    required: false,
    enum: EnumQualsSpeakingUnderstanding,
  })
  @IsEnum(EnumQualsSpeakingUnderstanding)
  @IsOptional()
  @Field(() => EnumQualsSpeakingUnderstanding, {
    nullable: true,
  })
  understanding?:
    | "Excellent"
    | "Good"
    | "Satisfactory"
    | "Unsatisfactory"
    | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  understandingExp!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  urId!: number | null;
}

export { QualsSpeaking as QualsSpeaking };
