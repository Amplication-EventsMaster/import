/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Icc } from "./Icc";
import { IccCountArgs } from "./IccCountArgs";
import { IccFindManyArgs } from "./IccFindManyArgs";
import { IccFindUniqueArgs } from "./IccFindUniqueArgs";
import { CreateIccArgs } from "./CreateIccArgs";
import { UpdateIccArgs } from "./UpdateIccArgs";
import { DeleteIccArgs } from "./DeleteIccArgs";
import { IccService } from "../icc.service";
@graphql.Resolver(() => Icc)
export class IccResolverBase {
  constructor(protected readonly service: IccService) {}

  async _iccsMeta(
    @graphql.Args() args: IccCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Icc])
  async iccs(@graphql.Args() args: IccFindManyArgs): Promise<Icc[]> {
    return this.service.iccs(args);
  }

  @graphql.Query(() => Icc, { nullable: true })
  async icc(@graphql.Args() args: IccFindUniqueArgs): Promise<Icc | null> {
    const result = await this.service.icc(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Icc)
  async createIcc(@graphql.Args() args: CreateIccArgs): Promise<Icc> {
    return await this.service.createIcc({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Icc)
  async updateIcc(@graphql.Args() args: UpdateIccArgs): Promise<Icc | null> {
    try {
      return await this.service.updateIcc({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Icc)
  async deleteIcc(@graphql.Args() args: DeleteIccArgs): Promise<Icc | null> {
    try {
      return await this.service.deleteIcc(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
