/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { IccService } from "../icc.service";
import { IccCreateInput } from "./IccCreateInput";
import { Icc } from "./Icc";
import { IccFindManyArgs } from "./IccFindManyArgs";
import { IccWhereUniqueInput } from "./IccWhereUniqueInput";
import { IccUpdateInput } from "./IccUpdateInput";

export class IccControllerBase {
  constructor(protected readonly service: IccService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Icc })
  async createIcc(@common.Body() data: IccCreateInput): Promise<Icc> {
    return await this.service.createIcc({
      data: data,
      select: {
        date: true,
        id: true,
        score: true,
        studentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Icc] })
  @ApiNestedQuery(IccFindManyArgs)
  async iccs(@common.Req() request: Request): Promise<Icc[]> {
    const args = plainToClass(IccFindManyArgs, request.query);
    return this.service.iccs({
      ...args,
      select: {
        date: true,
        id: true,
        score: true,
        studentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Icc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async icc(@common.Param() params: IccWhereUniqueInput): Promise<Icc | null> {
    const result = await this.service.icc({
      where: params,
      select: {
        date: true,
        id: true,
        score: true,
        studentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Icc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateIcc(
    @common.Param() params: IccWhereUniqueInput,
    @common.Body() data: IccUpdateInput
  ): Promise<Icc | null> {
    try {
      return await this.service.updateIcc({
        where: params,
        data: data,
        select: {
          date: true,
          id: true,
          score: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Icc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteIcc(
    @common.Param() params: IccWhereUniqueInput
  ): Promise<Icc | null> {
    try {
      return await this.service.deleteIcc({
        where: params,
        select: {
          date: true,
          id: true,
          score: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
