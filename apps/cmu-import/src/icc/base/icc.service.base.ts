/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Icc as PrismaIcc } from "@prisma/client";

export class IccServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.IccCountArgs, "select">): Promise<number> {
    return this.prisma.icc.count(args);
  }

  async iccs<T extends Prisma.IccFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.IccFindManyArgs>
  ): Promise<PrismaIcc[]> {
    return this.prisma.icc.findMany<Prisma.IccFindManyArgs>(args);
  }
  async icc<T extends Prisma.IccFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.IccFindUniqueArgs>
  ): Promise<PrismaIcc | null> {
    return this.prisma.icc.findUnique(args);
  }
  async createIcc<T extends Prisma.IccCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IccCreateArgs>
  ): Promise<PrismaIcc> {
    return this.prisma.icc.create<T>(args);
  }
  async updateIcc<T extends Prisma.IccUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.IccUpdateArgs>
  ): Promise<PrismaIcc> {
    return this.prisma.icc.update<T>(args);
  }
  async deleteIcc<T extends Prisma.IccDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.IccDeleteArgs>
  ): Promise<PrismaIcc> {
    return this.prisma.icc.delete(args);
  }
}
