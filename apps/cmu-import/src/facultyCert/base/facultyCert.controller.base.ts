/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FacultyCertService } from "../facultyCert.service";
import { FacultyCertCreateInput } from "./FacultyCertCreateInput";
import { FacultyCert } from "./FacultyCert";
import { FacultyCertFindManyArgs } from "./FacultyCertFindManyArgs";
import { FacultyCertWhereUniqueInput } from "./FacultyCertWhereUniqueInput";
import { FacultyCertUpdateInput } from "./FacultyCertUpdateInput";

export class FacultyCertControllerBase {
  constructor(protected readonly service: FacultyCertService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FacultyCert })
  async createFacultyCert(
    @common.Body() data: FacultyCertCreateInput
  ): Promise<FacultyCert> {
    return await this.service.createFacultyCert({
      data: data,
      select: {
        category: true,
        certDate: true,
        facultyId: true,
        id: true,
        refId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FacultyCert] })
  @ApiNestedQuery(FacultyCertFindManyArgs)
  async facultyCerts(@common.Req() request: Request): Promise<FacultyCert[]> {
    const args = plainToClass(FacultyCertFindManyArgs, request.query);
    return this.service.facultyCerts({
      ...args,
      select: {
        category: true,
        certDate: true,
        facultyId: true,
        id: true,
        refId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FacultyCert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async facultyCert(
    @common.Param() params: FacultyCertWhereUniqueInput
  ): Promise<FacultyCert | null> {
    const result = await this.service.facultyCert({
      where: params,
      select: {
        category: true,
        certDate: true,
        facultyId: true,
        id: true,
        refId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FacultyCert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFacultyCert(
    @common.Param() params: FacultyCertWhereUniqueInput,
    @common.Body() data: FacultyCertUpdateInput
  ): Promise<FacultyCert | null> {
    try {
      return await this.service.updateFacultyCert({
        where: params,
        data: data,
        select: {
          category: true,
          certDate: true,
          facultyId: true,
          id: true,
          refId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FacultyCert })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFacultyCert(
    @common.Param() params: FacultyCertWhereUniqueInput
  ): Promise<FacultyCert | null> {
    try {
      return await this.service.deleteFacultyCert({
        where: params,
        select: {
          category: true,
          certDate: true,
          facultyId: true,
          id: true,
          refId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
