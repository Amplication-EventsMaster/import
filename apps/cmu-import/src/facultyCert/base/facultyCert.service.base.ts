/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FacultyCert as PrismaFacultyCert } from "@prisma/client";

export class FacultyCertServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FacultyCertCountArgs, "select">
  ): Promise<number> {
    return this.prisma.facultyCert.count(args);
  }

  async facultyCerts<T extends Prisma.FacultyCertFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacultyCertFindManyArgs>
  ): Promise<PrismaFacultyCert[]> {
    return this.prisma.facultyCert.findMany<Prisma.FacultyCertFindManyArgs>(
      args
    );
  }
  async facultyCert<T extends Prisma.FacultyCertFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacultyCertFindUniqueArgs>
  ): Promise<PrismaFacultyCert | null> {
    return this.prisma.facultyCert.findUnique(args);
  }
  async createFacultyCert<T extends Prisma.FacultyCertCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacultyCertCreateArgs>
  ): Promise<PrismaFacultyCert> {
    return this.prisma.facultyCert.create<T>(args);
  }
  async updateFacultyCert<T extends Prisma.FacultyCertUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacultyCertUpdateArgs>
  ): Promise<PrismaFacultyCert> {
    return this.prisma.facultyCert.update<T>(args);
  }
  async deleteFacultyCert<T extends Prisma.FacultyCertDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FacultyCertDeleteArgs>
  ): Promise<PrismaFacultyCert> {
    return this.prisma.facultyCert.delete(args);
  }
}
