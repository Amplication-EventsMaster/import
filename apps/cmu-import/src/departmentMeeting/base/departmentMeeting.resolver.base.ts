/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DepartmentMeeting } from "./DepartmentMeeting";
import { DepartmentMeetingCountArgs } from "./DepartmentMeetingCountArgs";
import { DepartmentMeetingFindManyArgs } from "./DepartmentMeetingFindManyArgs";
import { DepartmentMeetingFindUniqueArgs } from "./DepartmentMeetingFindUniqueArgs";
import { CreateDepartmentMeetingArgs } from "./CreateDepartmentMeetingArgs";
import { UpdateDepartmentMeetingArgs } from "./UpdateDepartmentMeetingArgs";
import { DeleteDepartmentMeetingArgs } from "./DeleteDepartmentMeetingArgs";
import { DepartmentMeetingService } from "../departmentMeeting.service";
@graphql.Resolver(() => DepartmentMeeting)
export class DepartmentMeetingResolverBase {
  constructor(protected readonly service: DepartmentMeetingService) {}

  async _departmentMeetingsMeta(
    @graphql.Args() args: DepartmentMeetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DepartmentMeeting])
  async departmentMeetings(
    @graphql.Args() args: DepartmentMeetingFindManyArgs
  ): Promise<DepartmentMeeting[]> {
    return this.service.departmentMeetings(args);
  }

  @graphql.Query(() => DepartmentMeeting, { nullable: true })
  async departmentMeeting(
    @graphql.Args() args: DepartmentMeetingFindUniqueArgs
  ): Promise<DepartmentMeeting | null> {
    const result = await this.service.departmentMeeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DepartmentMeeting)
  async createDepartmentMeeting(
    @graphql.Args() args: CreateDepartmentMeetingArgs
  ): Promise<DepartmentMeeting> {
    return await this.service.createDepartmentMeeting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DepartmentMeeting)
  async updateDepartmentMeeting(
    @graphql.Args() args: UpdateDepartmentMeetingArgs
  ): Promise<DepartmentMeeting | null> {
    try {
      return await this.service.updateDepartmentMeeting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DepartmentMeeting)
  async deleteDepartmentMeeting(
    @graphql.Args() args: DeleteDepartmentMeetingArgs
  ): Promise<DepartmentMeeting | null> {
    try {
      return await this.service.deleteDepartmentMeeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
