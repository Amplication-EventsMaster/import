/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepartmentMeetingService } from "../departmentMeeting.service";
import { DepartmentMeetingCreateInput } from "./DepartmentMeetingCreateInput";
import { DepartmentMeeting } from "./DepartmentMeeting";
import { DepartmentMeetingFindManyArgs } from "./DepartmentMeetingFindManyArgs";
import { DepartmentMeetingWhereUniqueInput } from "./DepartmentMeetingWhereUniqueInput";
import { DepartmentMeetingUpdateInput } from "./DepartmentMeetingUpdateInput";

export class DepartmentMeetingControllerBase {
  constructor(protected readonly service: DepartmentMeetingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DepartmentMeeting })
  async createDepartmentMeeting(
    @common.Body() data: DepartmentMeetingCreateInput
  ): Promise<DepartmentMeeting> {
    return await this.service.createDepartmentMeeting({
      data: data,
      select: {
        department: true,
        id: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DepartmentMeeting] })
  @ApiNestedQuery(DepartmentMeetingFindManyArgs)
  async departmentMeetings(
    @common.Req() request: Request
  ): Promise<DepartmentMeeting[]> {
    const args = plainToClass(DepartmentMeetingFindManyArgs, request.query);
    return this.service.departmentMeetings({
      ...args,
      select: {
        department: true,
        id: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DepartmentMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async departmentMeeting(
    @common.Param() params: DepartmentMeetingWhereUniqueInput
  ): Promise<DepartmentMeeting | null> {
    const result = await this.service.departmentMeeting({
      where: params,
      select: {
        department: true,
        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DepartmentMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepartmentMeeting(
    @common.Param() params: DepartmentMeetingWhereUniqueInput,
    @common.Body() data: DepartmentMeetingUpdateInput
  ): Promise<DepartmentMeeting | null> {
    try {
      return await this.service.updateDepartmentMeeting({
        where: params,
        data: data,
        select: {
          department: true,
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DepartmentMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepartmentMeeting(
    @common.Param() params: DepartmentMeetingWhereUniqueInput
  ): Promise<DepartmentMeeting | null> {
    try {
      return await this.service.deleteDepartmentMeeting({
        where: params,
        select: {
          department: true,
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
