/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ThesisTopic as PrismaThesisTopic,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class ThesisTopicServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ThesisTopicCountArgs, "select">
  ): Promise<number> {
    return this.prisma.thesisTopic.count(args);
  }

  async thesisTopics<T extends Prisma.ThesisTopicFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisTopicFindManyArgs>
  ): Promise<PrismaThesisTopic[]> {
    return this.prisma.thesisTopic.findMany<Prisma.ThesisTopicFindManyArgs>(
      args
    );
  }
  async thesisTopic<T extends Prisma.ThesisTopicFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisTopicFindUniqueArgs>
  ): Promise<PrismaThesisTopic | null> {
    return this.prisma.thesisTopic.findUnique(args);
  }
  async createThesisTopic<T extends Prisma.ThesisTopicCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisTopicCreateArgs>
  ): Promise<PrismaThesisTopic> {
    return this.prisma.thesisTopic.create<T>(args);
  }
  async updateThesisTopic<T extends Prisma.ThesisTopicUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisTopicUpdateArgs>
  ): Promise<PrismaThesisTopic> {
    return this.prisma.thesisTopic.update<T>(args);
  }
  async deleteThesisTopic<T extends Prisma.ThesisTopicDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisTopicDeleteArgs>
  ): Promise<PrismaThesisTopic> {
    return this.prisma.thesisTopic.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.thesisTopic
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
