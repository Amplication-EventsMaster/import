/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ThesisTopic } from "./ThesisTopic";
import { ThesisTopicCountArgs } from "./ThesisTopicCountArgs";
import { ThesisTopicFindManyArgs } from "./ThesisTopicFindManyArgs";
import { ThesisTopicFindUniqueArgs } from "./ThesisTopicFindUniqueArgs";
import { CreateThesisTopicArgs } from "./CreateThesisTopicArgs";
import { UpdateThesisTopicArgs } from "./UpdateThesisTopicArgs";
import { DeleteThesisTopicArgs } from "./DeleteThesisTopicArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { ThesisTopicService } from "../thesisTopic.service";
@graphql.Resolver(() => ThesisTopic)
export class ThesisTopicResolverBase {
  constructor(protected readonly service: ThesisTopicService) {}

  async _thesisTopicsMeta(
    @graphql.Args() args: ThesisTopicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ThesisTopic])
  async thesisTopics(
    @graphql.Args() args: ThesisTopicFindManyArgs
  ): Promise<ThesisTopic[]> {
    return this.service.thesisTopics(args);
  }

  @graphql.Query(() => ThesisTopic, { nullable: true })
  async thesisTopic(
    @graphql.Args() args: ThesisTopicFindUniqueArgs
  ): Promise<ThesisTopic | null> {
    const result = await this.service.thesisTopic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ThesisTopic)
  async createThesisTopic(
    @graphql.Args() args: CreateThesisTopicArgs
  ): Promise<ThesisTopic> {
    return await this.service.createThesisTopic({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => ThesisTopic)
  async updateThesisTopic(
    @graphql.Args() args: UpdateThesisTopicArgs
  ): Promise<ThesisTopic | null> {
    try {
      return await this.service.updateThesisTopic({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ThesisTopic)
  async deleteThesisTopic(
    @graphql.Args() args: DeleteThesisTopicArgs
  ): Promise<ThesisTopic | null> {
    try {
      return await this.service.deleteThesisTopic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: ThesisTopic
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
