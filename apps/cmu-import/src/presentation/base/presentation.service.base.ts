/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Presentation as PrismaPresentation,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class PresentationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PresentationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.presentation.count(args);
  }

  async presentations<T extends Prisma.PresentationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PresentationFindManyArgs>
  ): Promise<PrismaPresentation[]> {
    return this.prisma.presentation.findMany<Prisma.PresentationFindManyArgs>(
      args
    );
  }
  async presentation<T extends Prisma.PresentationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PresentationFindUniqueArgs>
  ): Promise<PrismaPresentation | null> {
    return this.prisma.presentation.findUnique(args);
  }
  async createPresentation<T extends Prisma.PresentationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PresentationCreateArgs>
  ): Promise<PrismaPresentation> {
    return this.prisma.presentation.create<T>(args);
  }
  async updatePresentation<T extends Prisma.PresentationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PresentationUpdateArgs>
  ): Promise<PrismaPresentation> {
    return this.prisma.presentation.update<T>(args);
  }
  async deletePresentation<T extends Prisma.PresentationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PresentationDeleteArgs>
  ): Promise<PrismaPresentation> {
    return this.prisma.presentation.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.presentation
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
