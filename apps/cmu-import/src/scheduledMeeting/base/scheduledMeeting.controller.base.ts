/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ScheduledMeetingService } from "../scheduledMeeting.service";
import { ScheduledMeetingCreateInput } from "./ScheduledMeetingCreateInput";
import { ScheduledMeeting } from "./ScheduledMeeting";
import { ScheduledMeetingFindManyArgs } from "./ScheduledMeetingFindManyArgs";
import { ScheduledMeetingWhereUniqueInput } from "./ScheduledMeetingWhereUniqueInput";
import { ScheduledMeetingUpdateInput } from "./ScheduledMeetingUpdateInput";

export class ScheduledMeetingControllerBase {
  constructor(protected readonly service: ScheduledMeetingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ScheduledMeeting })
  async createScheduledMeeting(
    @common.Body() data: ScheduledMeetingCreateInput
  ): Promise<ScheduledMeeting> {
    return await this.service.createScheduledMeeting({
      data: data,
      select: {
        agendaId: true,
        alwaysVisible: true,
        department: true,
        endDate: true,
        id: true,
        startDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ScheduledMeeting] })
  @ApiNestedQuery(ScheduledMeetingFindManyArgs)
  async scheduledMeetings(
    @common.Req() request: Request
  ): Promise<ScheduledMeeting[]> {
    const args = plainToClass(ScheduledMeetingFindManyArgs, request.query);
    return this.service.scheduledMeetings({
      ...args,
      select: {
        agendaId: true,
        alwaysVisible: true,
        department: true,
        endDate: true,
        id: true,
        startDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ScheduledMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async scheduledMeeting(
    @common.Param() params: ScheduledMeetingWhereUniqueInput
  ): Promise<ScheduledMeeting | null> {
    const result = await this.service.scheduledMeeting({
      where: params,
      select: {
        agendaId: true,
        alwaysVisible: true,
        department: true,
        endDate: true,
        id: true,
        startDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ScheduledMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateScheduledMeeting(
    @common.Param() params: ScheduledMeetingWhereUniqueInput,
    @common.Body() data: ScheduledMeetingUpdateInput
  ): Promise<ScheduledMeeting | null> {
    try {
      return await this.service.updateScheduledMeeting({
        where: params,
        data: data,
        select: {
          agendaId: true,
          alwaysVisible: true,
          department: true,
          endDate: true,
          id: true,
          startDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ScheduledMeeting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteScheduledMeeting(
    @common.Param() params: ScheduledMeetingWhereUniqueInput
  ): Promise<ScheduledMeeting | null> {
    try {
      return await this.service.deleteScheduledMeeting({
        where: params,
        select: {
          agendaId: true,
          alwaysVisible: true,
          department: true,
          endDate: true,
          id: true,
          startDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
