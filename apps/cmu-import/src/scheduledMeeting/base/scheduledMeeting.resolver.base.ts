/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ScheduledMeeting } from "./ScheduledMeeting";
import { ScheduledMeetingCountArgs } from "./ScheduledMeetingCountArgs";
import { ScheduledMeetingFindManyArgs } from "./ScheduledMeetingFindManyArgs";
import { ScheduledMeetingFindUniqueArgs } from "./ScheduledMeetingFindUniqueArgs";
import { CreateScheduledMeetingArgs } from "./CreateScheduledMeetingArgs";
import { UpdateScheduledMeetingArgs } from "./UpdateScheduledMeetingArgs";
import { DeleteScheduledMeetingArgs } from "./DeleteScheduledMeetingArgs";
import { ScheduledMeetingService } from "../scheduledMeeting.service";
@graphql.Resolver(() => ScheduledMeeting)
export class ScheduledMeetingResolverBase {
  constructor(protected readonly service: ScheduledMeetingService) {}

  async _scheduledMeetingsMeta(
    @graphql.Args() args: ScheduledMeetingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ScheduledMeeting])
  async scheduledMeetings(
    @graphql.Args() args: ScheduledMeetingFindManyArgs
  ): Promise<ScheduledMeeting[]> {
    return this.service.scheduledMeetings(args);
  }

  @graphql.Query(() => ScheduledMeeting, { nullable: true })
  async scheduledMeeting(
    @graphql.Args() args: ScheduledMeetingFindUniqueArgs
  ): Promise<ScheduledMeeting | null> {
    const result = await this.service.scheduledMeeting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ScheduledMeeting)
  async createScheduledMeeting(
    @graphql.Args() args: CreateScheduledMeetingArgs
  ): Promise<ScheduledMeeting> {
    return await this.service.createScheduledMeeting({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ScheduledMeeting)
  async updateScheduledMeeting(
    @graphql.Args() args: UpdateScheduledMeetingArgs
  ): Promise<ScheduledMeeting | null> {
    try {
      return await this.service.updateScheduledMeeting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScheduledMeeting)
  async deleteScheduledMeeting(
    @graphql.Args() args: DeleteScheduledMeetingArgs
  ): Promise<ScheduledMeeting | null> {
    try {
      return await this.service.deleteScheduledMeeting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
