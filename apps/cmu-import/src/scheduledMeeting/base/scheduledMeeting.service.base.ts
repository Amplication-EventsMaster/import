/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ScheduledMeeting as PrismaScheduledMeeting,
} from "@prisma/client";

export class ScheduledMeetingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ScheduledMeetingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.scheduledMeeting.count(args);
  }

  async scheduledMeetings<T extends Prisma.ScheduledMeetingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScheduledMeetingFindManyArgs>
  ): Promise<PrismaScheduledMeeting[]> {
    return this.prisma.scheduledMeeting.findMany<Prisma.ScheduledMeetingFindManyArgs>(
      args
    );
  }
  async scheduledMeeting<T extends Prisma.ScheduledMeetingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScheduledMeetingFindUniqueArgs>
  ): Promise<PrismaScheduledMeeting | null> {
    return this.prisma.scheduledMeeting.findUnique(args);
  }
  async createScheduledMeeting<T extends Prisma.ScheduledMeetingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScheduledMeetingCreateArgs>
  ): Promise<PrismaScheduledMeeting> {
    return this.prisma.scheduledMeeting.create<T>(args);
  }
  async updateScheduledMeeting<T extends Prisma.ScheduledMeetingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScheduledMeetingUpdateArgs>
  ): Promise<PrismaScheduledMeeting> {
    return this.prisma.scheduledMeeting.update<T>(args);
  }
  async deleteScheduledMeeting<T extends Prisma.ScheduledMeetingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ScheduledMeetingDeleteArgs>
  ): Promise<PrismaScheduledMeeting> {
    return this.prisma.scheduledMeeting.delete(args);
  }
}
