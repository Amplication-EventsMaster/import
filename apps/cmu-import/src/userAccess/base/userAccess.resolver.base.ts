/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserAccess } from "./UserAccess";
import { UserAccessCountArgs } from "./UserAccessCountArgs";
import { UserAccessFindManyArgs } from "./UserAccessFindManyArgs";
import { UserAccessFindUniqueArgs } from "./UserAccessFindUniqueArgs";
import { CreateUserAccessArgs } from "./CreateUserAccessArgs";
import { UpdateUserAccessArgs } from "./UpdateUserAccessArgs";
import { DeleteUserAccessArgs } from "./DeleteUserAccessArgs";
import { UserAccessService } from "../userAccess.service";
@graphql.Resolver(() => UserAccess)
export class UserAccessResolverBase {
  constructor(protected readonly service: UserAccessService) {}

  async _userAccessesMeta(
    @graphql.Args() args: UserAccessCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserAccess])
  async userAccesses(
    @graphql.Args() args: UserAccessFindManyArgs
  ): Promise<UserAccess[]> {
    return this.service.userAccesses(args);
  }

  @graphql.Query(() => UserAccess, { nullable: true })
  async userAccess(
    @graphql.Args() args: UserAccessFindUniqueArgs
  ): Promise<UserAccess | null> {
    const result = await this.service.userAccess(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserAccess)
  async createUserAccess(
    @graphql.Args() args: CreateUserAccessArgs
  ): Promise<UserAccess> {
    return await this.service.createUserAccess({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserAccess)
  async updateUserAccess(
    @graphql.Args() args: UpdateUserAccessArgs
  ): Promise<UserAccess | null> {
    try {
      return await this.service.updateUserAccess({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAccess)
  async deleteUserAccess(
    @graphql.Args() args: DeleteUserAccessArgs
  ): Promise<UserAccess | null> {
    try {
      return await this.service.deleteUserAccess(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
