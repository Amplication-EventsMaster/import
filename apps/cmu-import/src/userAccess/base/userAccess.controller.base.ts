/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserAccessService } from "../userAccess.service";
import { UserAccessCreateInput } from "./UserAccessCreateInput";
import { UserAccess } from "./UserAccess";
import { UserAccessFindManyArgs } from "./UserAccessFindManyArgs";
import { UserAccessWhereUniqueInput } from "./UserAccessWhereUniqueInput";
import { UserAccessUpdateInput } from "./UserAccessUpdateInput";

export class UserAccessControllerBase {
  constructor(protected readonly service: UserAccessService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAccess })
  async createUserAccess(
    @common.Body() data: UserAccessCreateInput
  ): Promise<UserAccess> {
    return await this.service.createUserAccess({
      data: data,
      select: {
        access: true,
        id: true,
        userId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAccess] })
  @ApiNestedQuery(UserAccessFindManyArgs)
  async userAccesses(@common.Req() request: Request): Promise<UserAccess[]> {
    const args = plainToClass(UserAccessFindManyArgs, request.query);
    return this.service.userAccesses({
      ...args,
      select: {
        access: true,
        id: true,
        userId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAccess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userAccess(
    @common.Param() params: UserAccessWhereUniqueInput
  ): Promise<UserAccess | null> {
    const result = await this.service.userAccess({
      where: params,
      select: {
        access: true,
        id: true,
        userId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAccess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserAccess(
    @common.Param() params: UserAccessWhereUniqueInput,
    @common.Body() data: UserAccessUpdateInput
  ): Promise<UserAccess | null> {
    try {
      return await this.service.updateUserAccess({
        where: params,
        data: data,
        select: {
          access: true,
          id: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAccess })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserAccess(
    @common.Param() params: UserAccessWhereUniqueInput
  ): Promise<UserAccess | null> {
    try {
      return await this.service.deleteUserAccess({
        where: params,
        select: {
          access: true,
          id: true,
          userId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
