/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserAccess as PrismaUserAccess } from "@prisma/client";

export class UserAccessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAccessCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAccess.count(args);
  }

  async userAccesses<T extends Prisma.UserAccessFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAccessFindManyArgs>
  ): Promise<PrismaUserAccess[]> {
    return this.prisma.userAccess.findMany<Prisma.UserAccessFindManyArgs>(args);
  }
  async userAccess<T extends Prisma.UserAccessFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAccessFindUniqueArgs>
  ): Promise<PrismaUserAccess | null> {
    return this.prisma.userAccess.findUnique(args);
  }
  async createUserAccess<T extends Prisma.UserAccessCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAccessCreateArgs>
  ): Promise<PrismaUserAccess> {
    return this.prisma.userAccess.create<T>(args);
  }
  async updateUserAccess<T extends Prisma.UserAccessUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAccessUpdateArgs>
  ): Promise<PrismaUserAccess> {
    return this.prisma.userAccess.update<T>(args);
  }
  async deleteUserAccess<T extends Prisma.UserAccessDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAccessDeleteArgs>
  ): Promise<PrismaUserAccess> {
    return this.prisma.userAccess.delete(args);
  }
}
