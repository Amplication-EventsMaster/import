/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReportColumnService } from "../reportColumn.service";
import { ReportColumnCreateInput } from "./ReportColumnCreateInput";
import { ReportColumn } from "./ReportColumn";
import { ReportColumnFindManyArgs } from "./ReportColumnFindManyArgs";
import { ReportColumnWhereUniqueInput } from "./ReportColumnWhereUniqueInput";
import { ReportColumnUpdateInput } from "./ReportColumnUpdateInput";

export class ReportColumnControllerBase {
  constructor(protected readonly service: ReportColumnService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReportColumn })
  async createReportColumn(
    @common.Body() data: ReportColumnCreateInput
  ): Promise<ReportColumn> {
    return await this.service.createReportColumn({
      data: {
        ...data,

        reports: {
          connect: data.reports,
        },
      },
      select: {
        columnFormat: true,
        columnName: true,
        columnSortable: true,
        columnTitle: true,
        id: true,

        reports: {
          select: {
            id: true,
          },
        },

        sortOrder: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReportColumn] })
  @ApiNestedQuery(ReportColumnFindManyArgs)
  async reportColumns(@common.Req() request: Request): Promise<ReportColumn[]> {
    const args = plainToClass(ReportColumnFindManyArgs, request.query);
    return this.service.reportColumns({
      ...args,
      select: {
        columnFormat: true,
        columnName: true,
        columnSortable: true,
        columnTitle: true,
        id: true,

        reports: {
          select: {
            id: true,
          },
        },

        sortOrder: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReportColumn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reportColumn(
    @common.Param() params: ReportColumnWhereUniqueInput
  ): Promise<ReportColumn | null> {
    const result = await this.service.reportColumn({
      where: params,
      select: {
        columnFormat: true,
        columnName: true,
        columnSortable: true,
        columnTitle: true,
        id: true,

        reports: {
          select: {
            id: true,
          },
        },

        sortOrder: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReportColumn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReportColumn(
    @common.Param() params: ReportColumnWhereUniqueInput,
    @common.Body() data: ReportColumnUpdateInput
  ): Promise<ReportColumn | null> {
    try {
      return await this.service.updateReportColumn({
        where: params,
        data: {
          ...data,

          reports: {
            connect: data.reports,
          },
        },
        select: {
          columnFormat: true,
          columnName: true,
          columnSortable: true,
          columnTitle: true,
          id: true,

          reports: {
            select: {
              id: true,
            },
          },

          sortOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReportColumn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReportColumn(
    @common.Param() params: ReportColumnWhereUniqueInput
  ): Promise<ReportColumn | null> {
    try {
      return await this.service.deleteReportColumn({
        where: params,
        select: {
          columnFormat: true,
          columnName: true,
          columnSortable: true,
          columnTitle: true,
          id: true,

          reports: {
            select: {
              id: true,
            },
          },

          sortOrder: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
