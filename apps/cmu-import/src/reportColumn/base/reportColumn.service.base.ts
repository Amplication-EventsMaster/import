/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ReportColumn as PrismaReportColumn,
  Report as PrismaReport,
} from "@prisma/client";

export class ReportColumnServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReportColumnCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reportColumn.count(args);
  }

  async reportColumns<T extends Prisma.ReportColumnFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportColumnFindManyArgs>
  ): Promise<PrismaReportColumn[]> {
    return this.prisma.reportColumn.findMany<Prisma.ReportColumnFindManyArgs>(
      args
    );
  }
  async reportColumn<T extends Prisma.ReportColumnFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportColumnFindUniqueArgs>
  ): Promise<PrismaReportColumn | null> {
    return this.prisma.reportColumn.findUnique(args);
  }
  async createReportColumn<T extends Prisma.ReportColumnCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportColumnCreateArgs>
  ): Promise<PrismaReportColumn> {
    return this.prisma.reportColumn.create<T>(args);
  }
  async updateReportColumn<T extends Prisma.ReportColumnUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportColumnUpdateArgs>
  ): Promise<PrismaReportColumn> {
    return this.prisma.reportColumn.update<T>(args);
  }
  async deleteReportColumn<T extends Prisma.ReportColumnDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportColumnDeleteArgs>
  ): Promise<PrismaReportColumn> {
    return this.prisma.reportColumn.delete(args);
  }

  async getReports(parentId: number): Promise<PrismaReport | null> {
    return this.prisma.reportColumn
      .findUnique({
        where: { id: parentId },
      })
      .reports();
  }
}
