/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ThesisCommittee } from "./ThesisCommittee";
import { ThesisCommitteeCountArgs } from "./ThesisCommitteeCountArgs";
import { ThesisCommitteeFindManyArgs } from "./ThesisCommitteeFindManyArgs";
import { ThesisCommitteeFindUniqueArgs } from "./ThesisCommitteeFindUniqueArgs";
import { CreateThesisCommitteeArgs } from "./CreateThesisCommitteeArgs";
import { UpdateThesisCommitteeArgs } from "./UpdateThesisCommitteeArgs";
import { DeleteThesisCommitteeArgs } from "./DeleteThesisCommitteeArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { ThesisCommitteeService } from "../thesisCommittee.service";
@graphql.Resolver(() => ThesisCommittee)
export class ThesisCommitteeResolverBase {
  constructor(protected readonly service: ThesisCommitteeService) {}

  async _thesisCommitteesMeta(
    @graphql.Args() args: ThesisCommitteeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ThesisCommittee])
  async thesisCommittees(
    @graphql.Args() args: ThesisCommitteeFindManyArgs
  ): Promise<ThesisCommittee[]> {
    return this.service.thesisCommittees(args);
  }

  @graphql.Query(() => ThesisCommittee, { nullable: true })
  async thesisCommittee(
    @graphql.Args() args: ThesisCommitteeFindUniqueArgs
  ): Promise<ThesisCommittee | null> {
    const result = await this.service.thesisCommittee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ThesisCommittee)
  async createThesisCommittee(
    @graphql.Args() args: CreateThesisCommitteeArgs
  ): Promise<ThesisCommittee> {
    return await this.service.createThesisCommittee({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => ThesisCommittee)
  async updateThesisCommittee(
    @graphql.Args() args: UpdateThesisCommitteeArgs
  ): Promise<ThesisCommittee | null> {
    try {
      return await this.service.updateThesisCommittee({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ThesisCommittee)
  async deleteThesisCommittee(
    @graphql.Args() args: DeleteThesisCommitteeArgs
  ): Promise<ThesisCommittee | null> {
    try {
      return await this.service.deleteThesisCommittee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: ThesisCommittee
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
