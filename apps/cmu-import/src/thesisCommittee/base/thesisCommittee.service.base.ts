/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ThesisCommittee as PrismaThesisCommittee,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class ThesisCommitteeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ThesisCommitteeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.thesisCommittee.count(args);
  }

  async thesisCommittees<T extends Prisma.ThesisCommitteeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisCommitteeFindManyArgs>
  ): Promise<PrismaThesisCommittee[]> {
    return this.prisma.thesisCommittee.findMany<Prisma.ThesisCommitteeFindManyArgs>(
      args
    );
  }
  async thesisCommittee<T extends Prisma.ThesisCommitteeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisCommitteeFindUniqueArgs>
  ): Promise<PrismaThesisCommittee | null> {
    return this.prisma.thesisCommittee.findUnique(args);
  }
  async createThesisCommittee<T extends Prisma.ThesisCommitteeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisCommitteeCreateArgs>
  ): Promise<PrismaThesisCommittee> {
    return this.prisma.thesisCommittee.create<T>(args);
  }
  async updateThesisCommittee<T extends Prisma.ThesisCommitteeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisCommitteeUpdateArgs>
  ): Promise<PrismaThesisCommittee> {
    return this.prisma.thesisCommittee.update<T>(args);
  }
  async deleteThesisCommittee<T extends Prisma.ThesisCommitteeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ThesisCommitteeDeleteArgs>
  ): Promise<PrismaThesisCommittee> {
    return this.prisma.thesisCommittee.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.thesisCommittee
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
