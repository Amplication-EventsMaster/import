/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ThesisCommitteeService } from "../thesisCommittee.service";
import { ThesisCommitteeCreateInput } from "./ThesisCommitteeCreateInput";
import { ThesisCommittee } from "./ThesisCommittee";
import { ThesisCommitteeFindManyArgs } from "./ThesisCommitteeFindManyArgs";
import { ThesisCommitteeWhereUniqueInput } from "./ThesisCommitteeWhereUniqueInput";
import { ThesisCommitteeUpdateInput } from "./ThesisCommitteeUpdateInput";

export class ThesisCommitteeControllerBase {
  constructor(protected readonly service: ThesisCommitteeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ThesisCommittee })
  async createThesisCommittee(
    @common.Body() data: ThesisCommitteeCreateInput
  ): Promise<ThesisCommittee> {
    return await this.service.createThesisCommittee({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        committeeRole: true,
        facultyId: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },

        thesisType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ThesisCommittee] })
  @ApiNestedQuery(ThesisCommitteeFindManyArgs)
  async thesisCommittees(
    @common.Req() request: Request
  ): Promise<ThesisCommittee[]> {
    const args = plainToClass(ThesisCommitteeFindManyArgs, request.query);
    return this.service.thesisCommittees({
      ...args,
      select: {
        committeeRole: true,
        facultyId: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },

        thesisType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ThesisCommittee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async thesisCommittee(
    @common.Param() params: ThesisCommitteeWhereUniqueInput
  ): Promise<ThesisCommittee | null> {
    const result = await this.service.thesisCommittee({
      where: params,
      select: {
        committeeRole: true,
        facultyId: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },

        thesisType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ThesisCommittee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateThesisCommittee(
    @common.Param() params: ThesisCommitteeWhereUniqueInput,
    @common.Body() data: ThesisCommitteeUpdateInput
  ): Promise<ThesisCommittee | null> {
    try {
      return await this.service.updateThesisCommittee({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          committeeRole: true,
          facultyId: true,
          id: true,
          pending: true,

          studentData: {
            select: {
              id: true,
            },
          },

          thesisType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ThesisCommittee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteThesisCommittee(
    @common.Param() params: ThesisCommitteeWhereUniqueInput
  ): Promise<ThesisCommittee | null> {
    try {
      return await this.service.deleteThesisCommittee({
        where: params,
        select: {
          committeeRole: true,
          facultyId: true,
          id: true,
          pending: true,

          studentData: {
            select: {
              id: true,
            },
          },

          thesisType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
