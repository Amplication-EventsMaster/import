/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FileAccessLog as PrismaFileAccessLog } from "@prisma/client";

export class FileAccessLogServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FileAccessLogCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fileAccessLog.count(args);
  }

  async fileAccessLogs<T extends Prisma.FileAccessLogFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileAccessLogFindManyArgs>
  ): Promise<PrismaFileAccessLog[]> {
    return this.prisma.fileAccessLog.findMany<Prisma.FileAccessLogFindManyArgs>(
      args
    );
  }
  async fileAccessLog<T extends Prisma.FileAccessLogFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileAccessLogFindUniqueArgs>
  ): Promise<PrismaFileAccessLog | null> {
    return this.prisma.fileAccessLog.findUnique(args);
  }
  async createFileAccessLog<T extends Prisma.FileAccessLogCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileAccessLogCreateArgs>
  ): Promise<PrismaFileAccessLog> {
    return this.prisma.fileAccessLog.create<T>(args);
  }
  async updateFileAccessLog<T extends Prisma.FileAccessLogUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileAccessLogUpdateArgs>
  ): Promise<PrismaFileAccessLog> {
    return this.prisma.fileAccessLog.update<T>(args);
  }
  async deleteFileAccessLog<T extends Prisma.FileAccessLogDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FileAccessLogDeleteArgs>
  ): Promise<PrismaFileAccessLog> {
    return this.prisma.fileAccessLog.delete(args);
  }
}
