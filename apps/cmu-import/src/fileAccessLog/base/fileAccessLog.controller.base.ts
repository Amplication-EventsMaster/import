/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileAccessLogService } from "../fileAccessLog.service";
import { FileAccessLogCreateInput } from "./FileAccessLogCreateInput";
import { FileAccessLog } from "./FileAccessLog";
import { FileAccessLogFindManyArgs } from "./FileAccessLogFindManyArgs";
import { FileAccessLogWhereUniqueInput } from "./FileAccessLogWhereUniqueInput";
import { FileAccessLogUpdateInput } from "./FileAccessLogUpdateInput";

export class FileAccessLogControllerBase {
  constructor(protected readonly service: FileAccessLogService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FileAccessLog })
  async createFileAccessLog(
    @common.Body() data: FileAccessLogCreateInput
  ): Promise<FileAccessLog> {
    return await this.service.createFileAccessLog({
      data: data,
      select: {
        facultyId: true,
        id: true,
        sfId: true,
        time: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FileAccessLog] })
  @ApiNestedQuery(FileAccessLogFindManyArgs)
  async fileAccessLogs(
    @common.Req() request: Request
  ): Promise<FileAccessLog[]> {
    const args = plainToClass(FileAccessLogFindManyArgs, request.query);
    return this.service.fileAccessLogs({
      ...args,
      select: {
        facultyId: true,
        id: true,
        sfId: true,
        time: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FileAccessLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async fileAccessLog(
    @common.Param() params: FileAccessLogWhereUniqueInput
  ): Promise<FileAccessLog | null> {
    const result = await this.service.fileAccessLog({
      where: params,
      select: {
        facultyId: true,
        id: true,
        sfId: true,
        time: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FileAccessLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFileAccessLog(
    @common.Param() params: FileAccessLogWhereUniqueInput,
    @common.Body() data: FileAccessLogUpdateInput
  ): Promise<FileAccessLog | null> {
    try {
      return await this.service.updateFileAccessLog({
        where: params,
        data: data,
        select: {
          facultyId: true,
          id: true,
          sfId: true,
          time: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FileAccessLog })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFileAccessLog(
    @common.Param() params: FileAccessLogWhereUniqueInput
  ): Promise<FileAccessLog | null> {
    try {
      return await this.service.deleteFileAccessLog({
        where: params,
        select: {
          facultyId: true,
          id: true,
          sfId: true,
          time: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
