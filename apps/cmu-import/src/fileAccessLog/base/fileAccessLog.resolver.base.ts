/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FileAccessLog } from "./FileAccessLog";
import { FileAccessLogCountArgs } from "./FileAccessLogCountArgs";
import { FileAccessLogFindManyArgs } from "./FileAccessLogFindManyArgs";
import { FileAccessLogFindUniqueArgs } from "./FileAccessLogFindUniqueArgs";
import { CreateFileAccessLogArgs } from "./CreateFileAccessLogArgs";
import { UpdateFileAccessLogArgs } from "./UpdateFileAccessLogArgs";
import { DeleteFileAccessLogArgs } from "./DeleteFileAccessLogArgs";
import { FileAccessLogService } from "../fileAccessLog.service";
@graphql.Resolver(() => FileAccessLog)
export class FileAccessLogResolverBase {
  constructor(protected readonly service: FileAccessLogService) {}

  async _fileAccessLogsMeta(
    @graphql.Args() args: FileAccessLogCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FileAccessLog])
  async fileAccessLogs(
    @graphql.Args() args: FileAccessLogFindManyArgs
  ): Promise<FileAccessLog[]> {
    return this.service.fileAccessLogs(args);
  }

  @graphql.Query(() => FileAccessLog, { nullable: true })
  async fileAccessLog(
    @graphql.Args() args: FileAccessLogFindUniqueArgs
  ): Promise<FileAccessLog | null> {
    const result = await this.service.fileAccessLog(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FileAccessLog)
  async createFileAccessLog(
    @graphql.Args() args: CreateFileAccessLogArgs
  ): Promise<FileAccessLog> {
    return await this.service.createFileAccessLog({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FileAccessLog)
  async updateFileAccessLog(
    @graphql.Args() args: UpdateFileAccessLogArgs
  ): Promise<FileAccessLog | null> {
    try {
      return await this.service.updateFileAccessLog({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FileAccessLog)
  async deleteFileAccessLog(
    @graphql.Args() args: DeleteFileAccessLogArgs
  ): Promise<FileAccessLog | null> {
    try {
      return await this.service.deleteFileAccessLog(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
