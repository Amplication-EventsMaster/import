/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SemesterDateOverrideService } from "../semesterDateOverride.service";
import { SemesterDateOverrideCreateInput } from "./SemesterDateOverrideCreateInput";
import { SemesterDateOverride } from "./SemesterDateOverride";
import { SemesterDateOverrideFindManyArgs } from "./SemesterDateOverrideFindManyArgs";
import { SemesterDateOverrideWhereUniqueInput } from "./SemesterDateOverrideWhereUniqueInput";
import { SemesterDateOverrideUpdateInput } from "./SemesterDateOverrideUpdateInput";

export class SemesterDateOverrideControllerBase {
  constructor(protected readonly service: SemesterDateOverrideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SemesterDateOverride })
  async createSemesterDateOverride(
    @common.Body() data: SemesterDateOverrideCreateInput
  ): Promise<SemesterDateOverride> {
    return await this.service.createSemesterDateOverride({
      data: data,
      select: {
        department: true,
        id: true,
        semrefId: true,
        year: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SemesterDateOverride] })
  @ApiNestedQuery(SemesterDateOverrideFindManyArgs)
  async semesterDateOverrides(
    @common.Req() request: Request
  ): Promise<SemesterDateOverride[]> {
    const args = plainToClass(SemesterDateOverrideFindManyArgs, request.query);
    return this.service.semesterDateOverrides({
      ...args,
      select: {
        department: true,
        id: true,
        semrefId: true,
        year: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SemesterDateOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async semesterDateOverride(
    @common.Param() params: SemesterDateOverrideWhereUniqueInput
  ): Promise<SemesterDateOverride | null> {
    const result = await this.service.semesterDateOverride({
      where: params,
      select: {
        department: true,
        id: true,
        semrefId: true,
        year: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SemesterDateOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSemesterDateOverride(
    @common.Param() params: SemesterDateOverrideWhereUniqueInput,
    @common.Body() data: SemesterDateOverrideUpdateInput
  ): Promise<SemesterDateOverride | null> {
    try {
      return await this.service.updateSemesterDateOverride({
        where: params,
        data: data,
        select: {
          department: true,
          id: true,
          semrefId: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SemesterDateOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSemesterDateOverride(
    @common.Param() params: SemesterDateOverrideWhereUniqueInput
  ): Promise<SemesterDateOverride | null> {
    try {
      return await this.service.deleteSemesterDateOverride({
        where: params,
        select: {
          department: true,
          id: true,
          semrefId: true,
          year: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
