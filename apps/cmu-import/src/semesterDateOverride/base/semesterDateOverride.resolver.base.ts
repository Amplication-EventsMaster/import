/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SemesterDateOverride } from "./SemesterDateOverride";
import { SemesterDateOverrideCountArgs } from "./SemesterDateOverrideCountArgs";
import { SemesterDateOverrideFindManyArgs } from "./SemesterDateOverrideFindManyArgs";
import { SemesterDateOverrideFindUniqueArgs } from "./SemesterDateOverrideFindUniqueArgs";
import { CreateSemesterDateOverrideArgs } from "./CreateSemesterDateOverrideArgs";
import { UpdateSemesterDateOverrideArgs } from "./UpdateSemesterDateOverrideArgs";
import { DeleteSemesterDateOverrideArgs } from "./DeleteSemesterDateOverrideArgs";
import { SemesterDateOverrideService } from "../semesterDateOverride.service";
@graphql.Resolver(() => SemesterDateOverride)
export class SemesterDateOverrideResolverBase {
  constructor(protected readonly service: SemesterDateOverrideService) {}

  async _semesterDateOverridesMeta(
    @graphql.Args() args: SemesterDateOverrideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SemesterDateOverride])
  async semesterDateOverrides(
    @graphql.Args() args: SemesterDateOverrideFindManyArgs
  ): Promise<SemesterDateOverride[]> {
    return this.service.semesterDateOverrides(args);
  }

  @graphql.Query(() => SemesterDateOverride, { nullable: true })
  async semesterDateOverride(
    @graphql.Args() args: SemesterDateOverrideFindUniqueArgs
  ): Promise<SemesterDateOverride | null> {
    const result = await this.service.semesterDateOverride(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SemesterDateOverride)
  async createSemesterDateOverride(
    @graphql.Args() args: CreateSemesterDateOverrideArgs
  ): Promise<SemesterDateOverride> {
    return await this.service.createSemesterDateOverride({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SemesterDateOverride)
  async updateSemesterDateOverride(
    @graphql.Args() args: UpdateSemesterDateOverrideArgs
  ): Promise<SemesterDateOverride | null> {
    try {
      return await this.service.updateSemesterDateOverride({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SemesterDateOverride)
  async deleteSemesterDateOverride(
    @graphql.Args() args: DeleteSemesterDateOverrideArgs
  ): Promise<SemesterDateOverride | null> {
    try {
      return await this.service.deleteSemesterDateOverride(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
