/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Employment as PrismaEmployment,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class EmploymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmploymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employment.count(args);
  }

  async employments<T extends Prisma.EmploymentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmploymentFindManyArgs>
  ): Promise<PrismaEmployment[]> {
    return this.prisma.employment.findMany<Prisma.EmploymentFindManyArgs>(args);
  }
  async employment<T extends Prisma.EmploymentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmploymentFindUniqueArgs>
  ): Promise<PrismaEmployment | null> {
    return this.prisma.employment.findUnique(args);
  }
  async createEmployment<T extends Prisma.EmploymentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmploymentCreateArgs>
  ): Promise<PrismaEmployment> {
    return this.prisma.employment.create<T>(args);
  }
  async updateEmployment<T extends Prisma.EmploymentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmploymentUpdateArgs>
  ): Promise<PrismaEmployment> {
    return this.prisma.employment.update<T>(args);
  }
  async deleteEmployment<T extends Prisma.EmploymentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EmploymentDeleteArgs>
  ): Promise<PrismaEmployment> {
    return this.prisma.employment.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.employment
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
