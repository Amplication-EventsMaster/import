/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmploymentService } from "../employment.service";
import { EmploymentCreateInput } from "./EmploymentCreateInput";
import { Employment } from "./Employment";
import { EmploymentFindManyArgs } from "./EmploymentFindManyArgs";
import { EmploymentWhereUniqueInput } from "./EmploymentWhereUniqueInput";
import { EmploymentUpdateInput } from "./EmploymentUpdateInput";

export class EmploymentControllerBase {
  constructor(protected readonly service: EmploymentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Employment })
  async createEmployment(
    @common.Body() data: EmploymentCreateInput
  ): Promise<Employment> {
    return await this.service.createEmployment({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        date: true,
        email: true,
        employer: true,
        id: true,
        phone: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        typeField: true,
        zip: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Employment] })
  @ApiNestedQuery(EmploymentFindManyArgs)
  async employments(@common.Req() request: Request): Promise<Employment[]> {
    const args = plainToClass(EmploymentFindManyArgs, request.query);
    return this.service.employments({
      ...args,
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        date: true,
        email: true,
        employer: true,
        id: true,
        phone: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        typeField: true,
        zip: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Employment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employment(
    @common.Param() params: EmploymentWhereUniqueInput
  ): Promise<Employment | null> {
    const result = await this.service.employment({
      where: params,
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        date: true,
        email: true,
        employer: true,
        id: true,
        phone: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        typeField: true,
        zip: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Employment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployment(
    @common.Param() params: EmploymentWhereUniqueInput,
    @common.Body() data: EmploymentUpdateInput
  ): Promise<Employment | null> {
    try {
      return await this.service.updateEmployment({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          address1: true,
          address2: true,
          city: true,
          country: true,
          date: true,
          email: true,
          employer: true,
          id: true,
          phone: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },

          typeField: true,
          zip: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Employment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployment(
    @common.Param() params: EmploymentWhereUniqueInput
  ): Promise<Employment | null> {
    try {
      return await this.service.deleteEmployment({
        where: params,
        select: {
          address1: true,
          address2: true,
          city: true,
          country: true,
          date: true,
          email: true,
          employer: true,
          id: true,
          phone: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },

          typeField: true,
          zip: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
