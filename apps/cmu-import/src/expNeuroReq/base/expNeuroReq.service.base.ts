/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ExpNeuroReq as PrismaExpNeuroReq,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class ExpNeuroReqServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExpNeuroReqCountArgs, "select">
  ): Promise<number> {
    return this.prisma.expNeuroReq.count(args);
  }

  async expNeuroReqs<T extends Prisma.ExpNeuroReqFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpNeuroReqFindManyArgs>
  ): Promise<PrismaExpNeuroReq[]> {
    return this.prisma.expNeuroReq.findMany<Prisma.ExpNeuroReqFindManyArgs>(
      args
    );
  }
  async expNeuroReq<T extends Prisma.ExpNeuroReqFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpNeuroReqFindUniqueArgs>
  ): Promise<PrismaExpNeuroReq | null> {
    return this.prisma.expNeuroReq.findUnique(args);
  }
  async createExpNeuroReq<T extends Prisma.ExpNeuroReqCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpNeuroReqCreateArgs>
  ): Promise<PrismaExpNeuroReq> {
    return this.prisma.expNeuroReq.create<T>(args);
  }
  async updateExpNeuroReq<T extends Prisma.ExpNeuroReqUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpNeuroReqUpdateArgs>
  ): Promise<PrismaExpNeuroReq> {
    return this.prisma.expNeuroReq.update<T>(args);
  }
  async deleteExpNeuroReq<T extends Prisma.ExpNeuroReqDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ExpNeuroReqDeleteArgs>
  ): Promise<PrismaExpNeuroReq> {
    return this.prisma.expNeuroReq.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.expNeuroReq
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
