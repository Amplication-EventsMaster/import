/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ExpNeuroReqService } from "../expNeuroReq.service";
import { ExpNeuroReqCreateInput } from "./ExpNeuroReqCreateInput";
import { ExpNeuroReq } from "./ExpNeuroReq";
import { ExpNeuroReqFindManyArgs } from "./ExpNeuroReqFindManyArgs";
import { ExpNeuroReqWhereUniqueInput } from "./ExpNeuroReqWhereUniqueInput";
import { ExpNeuroReqUpdateInput } from "./ExpNeuroReqUpdateInput";

export class ExpNeuroReqControllerBase {
  constructor(protected readonly service: ExpNeuroReqService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ExpNeuroReq })
  async createExpNeuroReq(
    @common.Body() data: ExpNeuroReqCreateInput
  ): Promise<ExpNeuroReq> {
    return await this.service.createExpNeuroReq({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        complete: true,
        date: true,
        departmentCode: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ExpNeuroReq] })
  @ApiNestedQuery(ExpNeuroReqFindManyArgs)
  async expNeuroReqs(@common.Req() request: Request): Promise<ExpNeuroReq[]> {
    const args = plainToClass(ExpNeuroReqFindManyArgs, request.query);
    return this.service.expNeuroReqs({
      ...args,
      select: {
        complete: true,
        date: true,
        departmentCode: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ExpNeuroReq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async expNeuroReq(
    @common.Param() params: ExpNeuroReqWhereUniqueInput
  ): Promise<ExpNeuroReq | null> {
    const result = await this.service.expNeuroReq({
      where: params,
      select: {
        complete: true,
        date: true,
        departmentCode: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ExpNeuroReq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateExpNeuroReq(
    @common.Param() params: ExpNeuroReqWhereUniqueInput,
    @common.Body() data: ExpNeuroReqUpdateInput
  ): Promise<ExpNeuroReq | null> {
    try {
      return await this.service.updateExpNeuroReq({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          complete: true,
          date: true,
          departmentCode: true,
          id: true,
          pending: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ExpNeuroReq })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteExpNeuroReq(
    @common.Param() params: ExpNeuroReqWhereUniqueInput
  ): Promise<ExpNeuroReq | null> {
    try {
      return await this.service.deleteExpNeuroReq({
        where: params,
        select: {
          complete: true,
          date: true,
          departmentCode: true,
          id: true,
          pending: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
