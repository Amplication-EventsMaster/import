/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ExpNeuroReq } from "./ExpNeuroReq";
import { ExpNeuroReqCountArgs } from "./ExpNeuroReqCountArgs";
import { ExpNeuroReqFindManyArgs } from "./ExpNeuroReqFindManyArgs";
import { ExpNeuroReqFindUniqueArgs } from "./ExpNeuroReqFindUniqueArgs";
import { CreateExpNeuroReqArgs } from "./CreateExpNeuroReqArgs";
import { UpdateExpNeuroReqArgs } from "./UpdateExpNeuroReqArgs";
import { DeleteExpNeuroReqArgs } from "./DeleteExpNeuroReqArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { ExpNeuroReqService } from "../expNeuroReq.service";
@graphql.Resolver(() => ExpNeuroReq)
export class ExpNeuroReqResolverBase {
  constructor(protected readonly service: ExpNeuroReqService) {}

  async _expNeuroReqsMeta(
    @graphql.Args() args: ExpNeuroReqCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ExpNeuroReq])
  async expNeuroReqs(
    @graphql.Args() args: ExpNeuroReqFindManyArgs
  ): Promise<ExpNeuroReq[]> {
    return this.service.expNeuroReqs(args);
  }

  @graphql.Query(() => ExpNeuroReq, { nullable: true })
  async expNeuroReq(
    @graphql.Args() args: ExpNeuroReqFindUniqueArgs
  ): Promise<ExpNeuroReq | null> {
    const result = await this.service.expNeuroReq(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ExpNeuroReq)
  async createExpNeuroReq(
    @graphql.Args() args: CreateExpNeuroReqArgs
  ): Promise<ExpNeuroReq> {
    return await this.service.createExpNeuroReq({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => ExpNeuroReq)
  async updateExpNeuroReq(
    @graphql.Args() args: UpdateExpNeuroReqArgs
  ): Promise<ExpNeuroReq | null> {
    try {
      return await this.service.updateExpNeuroReq({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpNeuroReq)
  async deleteExpNeuroReq(
    @graphql.Args() args: DeleteExpNeuroReqArgs
  ): Promise<ExpNeuroReq | null> {
    try {
      return await this.service.deleteExpNeuroReq(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: ExpNeuroReq
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
