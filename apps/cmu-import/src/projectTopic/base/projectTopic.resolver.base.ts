/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProjectTopic } from "./ProjectTopic";
import { ProjectTopicCountArgs } from "./ProjectTopicCountArgs";
import { ProjectTopicFindManyArgs } from "./ProjectTopicFindManyArgs";
import { ProjectTopicFindUniqueArgs } from "./ProjectTopicFindUniqueArgs";
import { CreateProjectTopicArgs } from "./CreateProjectTopicArgs";
import { UpdateProjectTopicArgs } from "./UpdateProjectTopicArgs";
import { DeleteProjectTopicArgs } from "./DeleteProjectTopicArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { ProjectTopicService } from "../projectTopic.service";
@graphql.Resolver(() => ProjectTopic)
export class ProjectTopicResolverBase {
  constructor(protected readonly service: ProjectTopicService) {}

  async _projectTopicsMeta(
    @graphql.Args() args: ProjectTopicCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProjectTopic])
  async projectTopics(
    @graphql.Args() args: ProjectTopicFindManyArgs
  ): Promise<ProjectTopic[]> {
    return this.service.projectTopics(args);
  }

  @graphql.Query(() => ProjectTopic, { nullable: true })
  async projectTopic(
    @graphql.Args() args: ProjectTopicFindUniqueArgs
  ): Promise<ProjectTopic | null> {
    const result = await this.service.projectTopic(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProjectTopic)
  async createProjectTopic(
    @graphql.Args() args: CreateProjectTopicArgs
  ): Promise<ProjectTopic> {
    return await this.service.createProjectTopic({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => ProjectTopic)
  async updateProjectTopic(
    @graphql.Args() args: UpdateProjectTopicArgs
  ): Promise<ProjectTopic | null> {
    try {
      return await this.service.updateProjectTopic({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProjectTopic)
  async deleteProjectTopic(
    @graphql.Args() args: DeleteProjectTopicArgs
  ): Promise<ProjectTopic | null> {
    try {
      return await this.service.deleteProjectTopic(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: ProjectTopic
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
