/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProjectTopicService } from "../projectTopic.service";
import { ProjectTopicCreateInput } from "./ProjectTopicCreateInput";
import { ProjectTopic } from "./ProjectTopic";
import { ProjectTopicFindManyArgs } from "./ProjectTopicFindManyArgs";
import { ProjectTopicWhereUniqueInput } from "./ProjectTopicWhereUniqueInput";
import { ProjectTopicUpdateInput } from "./ProjectTopicUpdateInput";

export class ProjectTopicControllerBase {
  constructor(protected readonly service: ProjectTopicService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProjectTopic })
  async createProjectTopic(
    @common.Body() data: ProjectTopicCreateInput
  ): Promise<ProjectTopic> {
    return await this.service.createProjectTopic({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        area: true,
        clientName: true,
        date: true,
        id: true,
        notes: true,

        studentData: {
          select: {
            id: true,
          },
        },

        teamName: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProjectTopic] })
  @ApiNestedQuery(ProjectTopicFindManyArgs)
  async projectTopics(@common.Req() request: Request): Promise<ProjectTopic[]> {
    const args = plainToClass(ProjectTopicFindManyArgs, request.query);
    return this.service.projectTopics({
      ...args,
      select: {
        area: true,
        clientName: true,
        date: true,
        id: true,
        notes: true,

        studentData: {
          select: {
            id: true,
          },
        },

        teamName: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProjectTopic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async projectTopic(
    @common.Param() params: ProjectTopicWhereUniqueInput
  ): Promise<ProjectTopic | null> {
    const result = await this.service.projectTopic({
      where: params,
      select: {
        area: true,
        clientName: true,
        date: true,
        id: true,
        notes: true,

        studentData: {
          select: {
            id: true,
          },
        },

        teamName: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProjectTopic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProjectTopic(
    @common.Param() params: ProjectTopicWhereUniqueInput,
    @common.Body() data: ProjectTopicUpdateInput
  ): Promise<ProjectTopic | null> {
    try {
      return await this.service.updateProjectTopic({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          area: true,
          clientName: true,
          date: true,
          id: true,
          notes: true,

          studentData: {
            select: {
              id: true,
            },
          },

          teamName: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProjectTopic })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProjectTopic(
    @common.Param() params: ProjectTopicWhereUniqueInput
  ): Promise<ProjectTopic | null> {
    try {
      return await this.service.deleteProjectTopic({
        where: params,
        select: {
          area: true,
          clientName: true,
          date: true,
          id: true,
          notes: true,

          studentData: {
            select: {
              id: true,
            },
          },

          teamName: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
