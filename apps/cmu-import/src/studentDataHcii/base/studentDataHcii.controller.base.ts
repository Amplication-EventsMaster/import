/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDataHciiService } from "../studentDataHcii.service";
import { StudentDataHciiCreateInput } from "./StudentDataHciiCreateInput";
import { StudentDataHcii } from "./StudentDataHcii";
import { StudentDataHciiFindManyArgs } from "./StudentDataHciiFindManyArgs";
import { StudentDataHciiWhereUniqueInput } from "./StudentDataHciiWhereUniqueInput";
import { StudentDataHciiUpdateInput } from "./StudentDataHciiUpdateInput";

export class StudentDataHciiControllerBase {
  constructor(protected readonly service: StudentDataHciiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDataHcii })
  async createStudentDataHcii(
    @common.Body() data: StudentDataHciiCreateInput
  ): Promise<StudentDataHcii> {
    return await this.service.createStudentDataHcii({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        uploadDate: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDataHcii] })
  @ApiNestedQuery(StudentDataHciiFindManyArgs)
  async studentDataHciis(
    @common.Req() request: Request
  ): Promise<StudentDataHcii[]> {
    const args = plainToClass(StudentDataHciiFindManyArgs, request.query);
    return this.service.studentDataHciis({
      ...args,
      select: {
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        uploadDate: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDataHcii })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDataHcii(
    @common.Param() params: StudentDataHciiWhereUniqueInput
  ): Promise<StudentDataHcii | null> {
    const result = await this.service.studentDataHcii({
      where: params,
      select: {
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        uploadDate: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDataHcii })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDataHcii(
    @common.Param() params: StudentDataHciiWhereUniqueInput,
    @common.Body() data: StudentDataHciiUpdateInput
  ): Promise<StudentDataHcii | null> {
    try {
      return await this.service.updateStudentDataHcii({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          id: true,

          studentData: {
            select: {
              id: true,
            },
          },

          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDataHcii })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDataHcii(
    @common.Param() params: StudentDataHciiWhereUniqueInput
  ): Promise<StudentDataHcii | null> {
    try {
      return await this.service.deleteStudentDataHcii({
        where: params,
        select: {
          id: true,

          studentData: {
            select: {
              id: true,
            },
          },

          uploadDate: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
