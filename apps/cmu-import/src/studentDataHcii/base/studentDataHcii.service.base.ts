/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentDataHcii as PrismaStudentDataHcii,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentDataHciiServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentDataHciiCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentDataHcii.count(args);
  }

  async studentDataHciis<T extends Prisma.StudentDataHciiFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataHciiFindManyArgs>
  ): Promise<PrismaStudentDataHcii[]> {
    return this.prisma.studentDataHcii.findMany<Prisma.StudentDataHciiFindManyArgs>(
      args
    );
  }
  async studentDataHcii<T extends Prisma.StudentDataHciiFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataHciiFindUniqueArgs>
  ): Promise<PrismaStudentDataHcii | null> {
    return this.prisma.studentDataHcii.findUnique(args);
  }
  async createStudentDataHcii<T extends Prisma.StudentDataHciiCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataHciiCreateArgs>
  ): Promise<PrismaStudentDataHcii> {
    return this.prisma.studentDataHcii.create<T>(args);
  }
  async updateStudentDataHcii<T extends Prisma.StudentDataHciiUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataHciiUpdateArgs>
  ): Promise<PrismaStudentDataHcii> {
    return this.prisma.studentDataHcii.update<T>(args);
  }
  async deleteStudentDataHcii<T extends Prisma.StudentDataHciiDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataHciiDeleteArgs>
  ): Promise<PrismaStudentDataHcii> {
    return this.prisma.studentDataHcii.delete(args);
  }

  async getStudentData(parentId: string): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentDataHcii
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
