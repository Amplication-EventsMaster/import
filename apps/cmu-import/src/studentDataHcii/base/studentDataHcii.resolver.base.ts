/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentDataHcii } from "./StudentDataHcii";
import { StudentDataHciiCountArgs } from "./StudentDataHciiCountArgs";
import { StudentDataHciiFindManyArgs } from "./StudentDataHciiFindManyArgs";
import { StudentDataHciiFindUniqueArgs } from "./StudentDataHciiFindUniqueArgs";
import { CreateStudentDataHciiArgs } from "./CreateStudentDataHciiArgs";
import { UpdateStudentDataHciiArgs } from "./UpdateStudentDataHciiArgs";
import { DeleteStudentDataHciiArgs } from "./DeleteStudentDataHciiArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentDataHciiService } from "../studentDataHcii.service";
@graphql.Resolver(() => StudentDataHcii)
export class StudentDataHciiResolverBase {
  constructor(protected readonly service: StudentDataHciiService) {}

  async _studentDataHciisMeta(
    @graphql.Args() args: StudentDataHciiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDataHcii])
  async studentDataHciis(
    @graphql.Args() args: StudentDataHciiFindManyArgs
  ): Promise<StudentDataHcii[]> {
    return this.service.studentDataHciis(args);
  }

  @graphql.Query(() => StudentDataHcii, { nullable: true })
  async studentDataHcii(
    @graphql.Args() args: StudentDataHciiFindUniqueArgs
  ): Promise<StudentDataHcii | null> {
    const result = await this.service.studentDataHcii(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDataHcii)
  async createStudentDataHcii(
    @graphql.Args() args: CreateStudentDataHciiArgs
  ): Promise<StudentDataHcii> {
    return await this.service.createStudentDataHcii({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentDataHcii)
  async updateStudentDataHcii(
    @graphql.Args() args: UpdateStudentDataHciiArgs
  ): Promise<StudentDataHcii | null> {
    try {
      return await this.service.updateStudentDataHcii({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDataHcii)
  async deleteStudentDataHcii(
    @graphql.Args() args: DeleteStudentDataHciiArgs
  ): Promise<StudentDataHcii | null> {
    try {
      return await this.service.deleteStudentDataHcii(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentDataHcii
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
