/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StudentApp as PrismaStudentApp,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentAppServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentAppCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentApp.count(args);
  }

  async studentApps<T extends Prisma.StudentAppFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAppFindManyArgs>
  ): Promise<PrismaStudentApp[]> {
    return this.prisma.studentApp.findMany<Prisma.StudentAppFindManyArgs>(args);
  }
  async studentApp<T extends Prisma.StudentAppFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAppFindUniqueArgs>
  ): Promise<PrismaStudentApp | null> {
    return this.prisma.studentApp.findUnique(args);
  }
  async createStudentApp<T extends Prisma.StudentAppCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAppCreateArgs>
  ): Promise<PrismaStudentApp> {
    return this.prisma.studentApp.create<T>(args);
  }
  async updateStudentApp<T extends Prisma.StudentAppUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAppUpdateArgs>
  ): Promise<PrismaStudentApp> {
    return this.prisma.studentApp.update<T>(args);
  }
  async deleteStudentApp<T extends Prisma.StudentAppDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAppDeleteArgs>
  ): Promise<PrismaStudentApp> {
    return this.prisma.studentApp.delete(args);
  }

  async getStudentData(parentId: string): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentApp
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
