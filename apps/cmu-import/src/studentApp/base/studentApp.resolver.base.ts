/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentApp } from "./StudentApp";
import { StudentAppCountArgs } from "./StudentAppCountArgs";
import { StudentAppFindManyArgs } from "./StudentAppFindManyArgs";
import { StudentAppFindUniqueArgs } from "./StudentAppFindUniqueArgs";
import { CreateStudentAppArgs } from "./CreateStudentAppArgs";
import { UpdateStudentAppArgs } from "./UpdateStudentAppArgs";
import { DeleteStudentAppArgs } from "./DeleteStudentAppArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentAppService } from "../studentApp.service";
@graphql.Resolver(() => StudentApp)
export class StudentAppResolverBase {
  constructor(protected readonly service: StudentAppService) {}

  async _studentAppsMeta(
    @graphql.Args() args: StudentAppCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentApp])
  async studentApps(
    @graphql.Args() args: StudentAppFindManyArgs
  ): Promise<StudentApp[]> {
    return this.service.studentApps(args);
  }

  @graphql.Query(() => StudentApp, { nullable: true })
  async studentApp(
    @graphql.Args() args: StudentAppFindUniqueArgs
  ): Promise<StudentApp | null> {
    const result = await this.service.studentApp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentApp)
  async createStudentApp(
    @graphql.Args() args: CreateStudentAppArgs
  ): Promise<StudentApp> {
    return await this.service.createStudentApp({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentApp)
  async updateStudentApp(
    @graphql.Args() args: UpdateStudentAppArgs
  ): Promise<StudentApp | null> {
    try {
      return await this.service.updateStudentApp({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentApp)
  async deleteStudentApp(
    @graphql.Args() args: DeleteStudentAppArgs
  ): Promise<StudentApp | null> {
    try {
      return await this.service.deleteStudentApp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentApp
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
