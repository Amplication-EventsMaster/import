/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StudentDocument as PrismaStudentDocument,
} from "@prisma/client";

export class StudentDocumentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentDocumentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentDocument.count(args);
  }

  async studentDocuments<T extends Prisma.StudentDocumentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDocumentFindManyArgs>
  ): Promise<PrismaStudentDocument[]> {
    return this.prisma.studentDocument.findMany<Prisma.StudentDocumentFindManyArgs>(
      args
    );
  }
  async studentDocument<T extends Prisma.StudentDocumentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDocumentFindUniqueArgs>
  ): Promise<PrismaStudentDocument | null> {
    return this.prisma.studentDocument.findUnique(args);
  }
  async createStudentDocument<T extends Prisma.StudentDocumentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDocumentCreateArgs>
  ): Promise<PrismaStudentDocument> {
    return this.prisma.studentDocument.create<T>(args);
  }
  async updateStudentDocument<T extends Prisma.StudentDocumentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDocumentUpdateArgs>
  ): Promise<PrismaStudentDocument> {
    return this.prisma.studentDocument.update<T>(args);
  }
  async deleteStudentDocument<T extends Prisma.StudentDocumentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDocumentDeleteArgs>
  ): Promise<PrismaStudentDocument> {
    return this.prisma.studentDocument.delete(args);
  }
}
