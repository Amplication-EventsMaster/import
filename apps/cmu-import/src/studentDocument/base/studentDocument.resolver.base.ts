/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentDocument } from "./StudentDocument";
import { StudentDocumentCountArgs } from "./StudentDocumentCountArgs";
import { StudentDocumentFindManyArgs } from "./StudentDocumentFindManyArgs";
import { StudentDocumentFindUniqueArgs } from "./StudentDocumentFindUniqueArgs";
import { CreateStudentDocumentArgs } from "./CreateStudentDocumentArgs";
import { UpdateStudentDocumentArgs } from "./UpdateStudentDocumentArgs";
import { DeleteStudentDocumentArgs } from "./DeleteStudentDocumentArgs";
import { StudentDocumentService } from "../studentDocument.service";
@graphql.Resolver(() => StudentDocument)
export class StudentDocumentResolverBase {
  constructor(protected readonly service: StudentDocumentService) {}

  async _studentDocumentsMeta(
    @graphql.Args() args: StudentDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDocument])
  async studentDocuments(
    @graphql.Args() args: StudentDocumentFindManyArgs
  ): Promise<StudentDocument[]> {
    return this.service.studentDocuments(args);
  }

  @graphql.Query(() => StudentDocument, { nullable: true })
  async studentDocument(
    @graphql.Args() args: StudentDocumentFindUniqueArgs
  ): Promise<StudentDocument | null> {
    const result = await this.service.studentDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDocument)
  async createStudentDocument(
    @graphql.Args() args: CreateStudentDocumentArgs
  ): Promise<StudentDocument> {
    return await this.service.createStudentDocument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StudentDocument)
  async updateStudentDocument(
    @graphql.Args() args: UpdateStudentDocumentArgs
  ): Promise<StudentDocument | null> {
    try {
      return await this.service.updateStudentDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDocument)
  async deleteStudentDocument(
    @graphql.Args() args: DeleteStudentDocumentArgs
  ): Promise<StudentDocument | null> {
    try {
      return await this.service.deleteStudentDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
