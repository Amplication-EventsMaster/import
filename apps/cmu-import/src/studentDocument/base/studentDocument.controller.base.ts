/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDocumentService } from "../studentDocument.service";
import { StudentDocumentCreateInput } from "./StudentDocumentCreateInput";
import { StudentDocument } from "./StudentDocument";
import { StudentDocumentFindManyArgs } from "./StudentDocumentFindManyArgs";
import { StudentDocumentWhereUniqueInput } from "./StudentDocumentWhereUniqueInput";
import { StudentDocumentUpdateInput } from "./StudentDocumentUpdateInput";

export class StudentDocumentControllerBase {
  constructor(protected readonly service: StudentDocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDocument })
  async createStudentDocument(
    @common.Body() data: StudentDocumentCreateInput
  ): Promise<StudentDocument> {
    return await this.service.createStudentDocument({
      data: data,
      select: {
        id: true,
        templateId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDocument] })
  @ApiNestedQuery(StudentDocumentFindManyArgs)
  async studentDocuments(
    @common.Req() request: Request
  ): Promise<StudentDocument[]> {
    const args = plainToClass(StudentDocumentFindManyArgs, request.query);
    return this.service.studentDocuments({
      ...args,
      select: {
        id: true,
        templateId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDocument(
    @common.Param() params: StudentDocumentWhereUniqueInput
  ): Promise<StudentDocument | null> {
    const result = await this.service.studentDocument({
      where: params,
      select: {
        id: true,
        templateId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDocument(
    @common.Param() params: StudentDocumentWhereUniqueInput,
    @common.Body() data: StudentDocumentUpdateInput
  ): Promise<StudentDocument | null> {
    try {
      return await this.service.updateStudentDocument({
        where: params,
        data: data,
        select: {
          id: true,
          templateId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDocument(
    @common.Param() params: StudentDocumentWhereUniqueInput
  ): Promise<StudentDocument | null> {
    try {
      return await this.service.deleteStudentDocument({
        where: params,
        select: {
          id: true,
          templateId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
