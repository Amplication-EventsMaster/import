/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, StudentCourse as PrismaStudentCourse } from "@prisma/client";

export class StudentCourseServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentCourseCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentCourse.count(args);
  }

  async studentCourses<T extends Prisma.StudentCourseFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentCourseFindManyArgs>
  ): Promise<PrismaStudentCourse[]> {
    return this.prisma.studentCourse.findMany<Prisma.StudentCourseFindManyArgs>(
      args
    );
  }
  async studentCourse<T extends Prisma.StudentCourseFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentCourseFindUniqueArgs>
  ): Promise<PrismaStudentCourse | null> {
    return this.prisma.studentCourse.findUnique(args);
  }
  async createStudentCourse<T extends Prisma.StudentCourseCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentCourseCreateArgs>
  ): Promise<PrismaStudentCourse> {
    return this.prisma.studentCourse.create<T>(args);
  }
  async updateStudentCourse<T extends Prisma.StudentCourseUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentCourseUpdateArgs>
  ): Promise<PrismaStudentCourse> {
    return this.prisma.studentCourse.update<T>(args);
  }
  async deleteStudentCourse<T extends Prisma.StudentCourseDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentCourseDeleteArgs>
  ): Promise<PrismaStudentCourse> {
    return this.prisma.studentCourse.delete(args);
  }
}
