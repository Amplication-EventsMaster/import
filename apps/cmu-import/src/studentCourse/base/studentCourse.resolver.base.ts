/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentCourse } from "./StudentCourse";
import { StudentCourseCountArgs } from "./StudentCourseCountArgs";
import { StudentCourseFindManyArgs } from "./StudentCourseFindManyArgs";
import { StudentCourseFindUniqueArgs } from "./StudentCourseFindUniqueArgs";
import { CreateStudentCourseArgs } from "./CreateStudentCourseArgs";
import { UpdateStudentCourseArgs } from "./UpdateStudentCourseArgs";
import { DeleteStudentCourseArgs } from "./DeleteStudentCourseArgs";
import { StudentCourseService } from "../studentCourse.service";
@graphql.Resolver(() => StudentCourse)
export class StudentCourseResolverBase {
  constructor(protected readonly service: StudentCourseService) {}

  async _studentCoursesMeta(
    @graphql.Args() args: StudentCourseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentCourse])
  async studentCourses(
    @graphql.Args() args: StudentCourseFindManyArgs
  ): Promise<StudentCourse[]> {
    return this.service.studentCourses(args);
  }

  @graphql.Query(() => StudentCourse, { nullable: true })
  async studentCourse(
    @graphql.Args() args: StudentCourseFindUniqueArgs
  ): Promise<StudentCourse | null> {
    const result = await this.service.studentCourse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentCourse)
  async createStudentCourse(
    @graphql.Args() args: CreateStudentCourseArgs
  ): Promise<StudentCourse> {
    return await this.service.createStudentCourse({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => StudentCourse)
  async updateStudentCourse(
    @graphql.Args() args: UpdateStudentCourseArgs
  ): Promise<StudentCourse | null> {
    try {
      return await this.service.updateStudentCourse({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentCourse)
  async deleteStudentCourse(
    @graphql.Args() args: DeleteStudentCourseArgs
  ): Promise<StudentCourse | null> {
    try {
      return await this.service.deleteStudentCourse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
