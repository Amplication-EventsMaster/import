/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReviewPeriodReferenceService } from "../reviewPeriodReference.service";
import { ReviewPeriodReferenceCreateInput } from "./ReviewPeriodReferenceCreateInput";
import { ReviewPeriodReference } from "./ReviewPeriodReference";
import { ReviewPeriodReferenceFindManyArgs } from "./ReviewPeriodReferenceFindManyArgs";
import { ReviewPeriodReferenceWhereUniqueInput } from "./ReviewPeriodReferenceWhereUniqueInput";
import { ReviewPeriodReferenceUpdateInput } from "./ReviewPeriodReferenceUpdateInput";

export class ReviewPeriodReferenceControllerBase {
  constructor(protected readonly service: ReviewPeriodReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReviewPeriodReference })
  async createReviewPeriodReference(
    @common.Body() data: ReviewPeriodReferenceCreateInput
  ): Promise<ReviewPeriodReference> {
    return await this.service.createReviewPeriodReference({
      data: data,
      select: {
        id: true,
        refAbbrev: true,
        refDay: true,
        refMonth: true,
        refName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReviewPeriodReference] })
  @ApiNestedQuery(ReviewPeriodReferenceFindManyArgs)
  async reviewPeriodReferences(
    @common.Req() request: Request
  ): Promise<ReviewPeriodReference[]> {
    const args = plainToClass(ReviewPeriodReferenceFindManyArgs, request.query);
    return this.service.reviewPeriodReferences({
      ...args,
      select: {
        id: true,
        refAbbrev: true,
        refDay: true,
        refMonth: true,
        refName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReviewPeriodReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reviewPeriodReference(
    @common.Param() params: ReviewPeriodReferenceWhereUniqueInput
  ): Promise<ReviewPeriodReference | null> {
    const result = await this.service.reviewPeriodReference({
      where: params,
      select: {
        id: true,
        refAbbrev: true,
        refDay: true,
        refMonth: true,
        refName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReviewPeriodReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReviewPeriodReference(
    @common.Param() params: ReviewPeriodReferenceWhereUniqueInput,
    @common.Body() data: ReviewPeriodReferenceUpdateInput
  ): Promise<ReviewPeriodReference | null> {
    try {
      return await this.service.updateReviewPeriodReference({
        where: params,
        data: data,
        select: {
          id: true,
          refAbbrev: true,
          refDay: true,
          refMonth: true,
          refName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReviewPeriodReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReviewPeriodReference(
    @common.Param() params: ReviewPeriodReferenceWhereUniqueInput
  ): Promise<ReviewPeriodReference | null> {
    try {
      return await this.service.deleteReviewPeriodReference({
        where: params,
        select: {
          id: true,
          refAbbrev: true,
          refDay: true,
          refMonth: true,
          refName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
