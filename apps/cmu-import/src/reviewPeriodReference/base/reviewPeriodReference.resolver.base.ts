/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReviewPeriodReference } from "./ReviewPeriodReference";
import { ReviewPeriodReferenceCountArgs } from "./ReviewPeriodReferenceCountArgs";
import { ReviewPeriodReferenceFindManyArgs } from "./ReviewPeriodReferenceFindManyArgs";
import { ReviewPeriodReferenceFindUniqueArgs } from "./ReviewPeriodReferenceFindUniqueArgs";
import { CreateReviewPeriodReferenceArgs } from "./CreateReviewPeriodReferenceArgs";
import { UpdateReviewPeriodReferenceArgs } from "./UpdateReviewPeriodReferenceArgs";
import { DeleteReviewPeriodReferenceArgs } from "./DeleteReviewPeriodReferenceArgs";
import { ReviewPeriodReferenceService } from "../reviewPeriodReference.service";
@graphql.Resolver(() => ReviewPeriodReference)
export class ReviewPeriodReferenceResolverBase {
  constructor(protected readonly service: ReviewPeriodReferenceService) {}

  async _reviewPeriodReferencesMeta(
    @graphql.Args() args: ReviewPeriodReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReviewPeriodReference])
  async reviewPeriodReferences(
    @graphql.Args() args: ReviewPeriodReferenceFindManyArgs
  ): Promise<ReviewPeriodReference[]> {
    return this.service.reviewPeriodReferences(args);
  }

  @graphql.Query(() => ReviewPeriodReference, { nullable: true })
  async reviewPeriodReference(
    @graphql.Args() args: ReviewPeriodReferenceFindUniqueArgs
  ): Promise<ReviewPeriodReference | null> {
    const result = await this.service.reviewPeriodReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReviewPeriodReference)
  async createReviewPeriodReference(
    @graphql.Args() args: CreateReviewPeriodReferenceArgs
  ): Promise<ReviewPeriodReference> {
    return await this.service.createReviewPeriodReference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ReviewPeriodReference)
  async updateReviewPeriodReference(
    @graphql.Args() args: UpdateReviewPeriodReferenceArgs
  ): Promise<ReviewPeriodReference | null> {
    try {
      return await this.service.updateReviewPeriodReference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReviewPeriodReference)
  async deleteReviewPeriodReference(
    @graphql.Args() args: DeleteReviewPeriodReferenceArgs
  ): Promise<ReviewPeriodReference | null> {
    try {
      return await this.service.deleteReviewPeriodReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
