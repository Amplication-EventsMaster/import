/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualsWriting } from "./QualsWriting";
import { QualsWritingCountArgs } from "./QualsWritingCountArgs";
import { QualsWritingFindManyArgs } from "./QualsWritingFindManyArgs";
import { QualsWritingFindUniqueArgs } from "./QualsWritingFindUniqueArgs";
import { CreateQualsWritingArgs } from "./CreateQualsWritingArgs";
import { UpdateQualsWritingArgs } from "./UpdateQualsWritingArgs";
import { DeleteQualsWritingArgs } from "./DeleteQualsWritingArgs";
import { QualsWritingAspectFindManyArgs } from "../../qualsWritingAspect/base/QualsWritingAspectFindManyArgs";
import { QualsWritingAspect } from "../../qualsWritingAspect/base/QualsWritingAspect";
import { QualsCommittee } from "../../qualsCommittee/base/QualsCommittee";
import { QualsWritingService } from "../qualsWriting.service";
@graphql.Resolver(() => QualsWriting)
export class QualsWritingResolverBase {
  constructor(protected readonly service: QualsWritingService) {}

  async _qualsWritingsMeta(
    @graphql.Args() args: QualsWritingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualsWriting])
  async qualsWritings(
    @graphql.Args() args: QualsWritingFindManyArgs
  ): Promise<QualsWriting[]> {
    return this.service.qualsWritings(args);
  }

  @graphql.Query(() => QualsWriting, { nullable: true })
  async qualsWriting(
    @graphql.Args() args: QualsWritingFindUniqueArgs
  ): Promise<QualsWriting | null> {
    const result = await this.service.qualsWriting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualsWriting)
  async createQualsWriting(
    @graphql.Args() args: CreateQualsWritingArgs
  ): Promise<QualsWriting> {
    return await this.service.createQualsWriting({
      ...args,
      data: {
        ...args.data,

        qualsCommittee: args.data.qualsCommittee
          ? {
              connect: args.data.qualsCommittee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QualsWriting)
  async updateQualsWriting(
    @graphql.Args() args: UpdateQualsWritingArgs
  ): Promise<QualsWriting | null> {
    try {
      return await this.service.updateQualsWriting({
        ...args,
        data: {
          ...args.data,

          qualsCommittee: args.data.qualsCommittee
            ? {
                connect: args.data.qualsCommittee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualsWriting)
  async deleteQualsWriting(
    @graphql.Args() args: DeleteQualsWritingArgs
  ): Promise<QualsWriting | null> {
    try {
      return await this.service.deleteQualsWriting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [QualsWritingAspect], {
    name: "qualsWritingAspect",
  })
  async findQualsWritingAspect(
    @graphql.Parent() parent: QualsWriting,
    @graphql.Args() args: QualsWritingAspectFindManyArgs
  ): Promise<QualsWritingAspect[]> {
    const results = await this.service.findQualsWritingAspect(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => QualsCommittee, {
    nullable: true,
    name: "qualsCommittee",
  })
  async getQualsCommittee(
    @graphql.Parent() parent: QualsWriting
  ): Promise<QualsCommittee | null> {
    const result = await this.service.getQualsCommittee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
