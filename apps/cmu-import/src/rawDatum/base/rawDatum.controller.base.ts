/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RawDatumService } from "../rawDatum.service";
import { RawDatumCreateInput } from "./RawDatumCreateInput";
import { RawDatum } from "./RawDatum";
import { RawDatumFindManyArgs } from "./RawDatumFindManyArgs";
import { RawDatumWhereUniqueInput } from "./RawDatumWhereUniqueInput";
import { RawDatumUpdateInput } from "./RawDatumUpdateInput";

export class RawDatumControllerBase {
  constructor(protected readonly service: RawDatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RawDatum })
  async createRawDatum(
    @common.Body() data: RawDatumCreateInput
  ): Promise<RawDatum> {
    return await this.service.createRawDatum({
      data: data,
      select: {
        advisor: true,
        ai: true,
        alg: true,
        comments: true,
        csys: true,
        el: true,
        finish: true,
        fullRecord: true,
        id: true,
        leftProgram: true,
        name: true,
        notes: true,
        pl: true,
        programmingReq: true,
        qualdone: true,
        sex: true,
        speakingReq: true,
        ss: true,
        startSem: true,
        startYear: true,
        startYearFull: true,
        teachingReq: true,
        thesisCommittee: true,
        thesisProposal: true,
        thesisTitle: true,
        undergrad: true,
        writingReq: true,
        year: true,
        yearFull: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RawDatum] })
  @ApiNestedQuery(RawDatumFindManyArgs)
  async rawData(@common.Req() request: Request): Promise<RawDatum[]> {
    const args = plainToClass(RawDatumFindManyArgs, request.query);
    return this.service.rawData({
      ...args,
      select: {
        advisor: true,
        ai: true,
        alg: true,
        comments: true,
        csys: true,
        el: true,
        finish: true,
        fullRecord: true,
        id: true,
        leftProgram: true,
        name: true,
        notes: true,
        pl: true,
        programmingReq: true,
        qualdone: true,
        sex: true,
        speakingReq: true,
        ss: true,
        startSem: true,
        startYear: true,
        startYearFull: true,
        teachingReq: true,
        thesisCommittee: true,
        thesisProposal: true,
        thesisTitle: true,
        undergrad: true,
        writingReq: true,
        year: true,
        yearFull: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RawDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async rawDatum(
    @common.Param() params: RawDatumWhereUniqueInput
  ): Promise<RawDatum | null> {
    const result = await this.service.rawDatum({
      where: params,
      select: {
        advisor: true,
        ai: true,
        alg: true,
        comments: true,
        csys: true,
        el: true,
        finish: true,
        fullRecord: true,
        id: true,
        leftProgram: true,
        name: true,
        notes: true,
        pl: true,
        programmingReq: true,
        qualdone: true,
        sex: true,
        speakingReq: true,
        ss: true,
        startSem: true,
        startYear: true,
        startYearFull: true,
        teachingReq: true,
        thesisCommittee: true,
        thesisProposal: true,
        thesisTitle: true,
        undergrad: true,
        writingReq: true,
        year: true,
        yearFull: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RawDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRawDatum(
    @common.Param() params: RawDatumWhereUniqueInput,
    @common.Body() data: RawDatumUpdateInput
  ): Promise<RawDatum | null> {
    try {
      return await this.service.updateRawDatum({
        where: params,
        data: data,
        select: {
          advisor: true,
          ai: true,
          alg: true,
          comments: true,
          csys: true,
          el: true,
          finish: true,
          fullRecord: true,
          id: true,
          leftProgram: true,
          name: true,
          notes: true,
          pl: true,
          programmingReq: true,
          qualdone: true,
          sex: true,
          speakingReq: true,
          ss: true,
          startSem: true,
          startYear: true,
          startYearFull: true,
          teachingReq: true,
          thesisCommittee: true,
          thesisProposal: true,
          thesisTitle: true,
          undergrad: true,
          writingReq: true,
          year: true,
          yearFull: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RawDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRawDatum(
    @common.Param() params: RawDatumWhereUniqueInput
  ): Promise<RawDatum | null> {
    try {
      return await this.service.deleteRawDatum({
        where: params,
        select: {
          advisor: true,
          ai: true,
          alg: true,
          comments: true,
          csys: true,
          el: true,
          finish: true,
          fullRecord: true,
          id: true,
          leftProgram: true,
          name: true,
          notes: true,
          pl: true,
          programmingReq: true,
          qualdone: true,
          sex: true,
          speakingReq: true,
          ss: true,
          startSem: true,
          startYear: true,
          startYearFull: true,
          teachingReq: true,
          thesisCommittee: true,
          thesisProposal: true,
          thesisTitle: true,
          undergrad: true,
          writingReq: true,
          year: true,
          yearFull: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
