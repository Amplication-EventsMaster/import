/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RawDatum } from "./RawDatum";
import { RawDatumCountArgs } from "./RawDatumCountArgs";
import { RawDatumFindManyArgs } from "./RawDatumFindManyArgs";
import { RawDatumFindUniqueArgs } from "./RawDatumFindUniqueArgs";
import { CreateRawDatumArgs } from "./CreateRawDatumArgs";
import { UpdateRawDatumArgs } from "./UpdateRawDatumArgs";
import { DeleteRawDatumArgs } from "./DeleteRawDatumArgs";
import { RawDatumService } from "../rawDatum.service";
@graphql.Resolver(() => RawDatum)
export class RawDatumResolverBase {
  constructor(protected readonly service: RawDatumService) {}

  async _rawDataMeta(
    @graphql.Args() args: RawDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RawDatum])
  async rawData(
    @graphql.Args() args: RawDatumFindManyArgs
  ): Promise<RawDatum[]> {
    return this.service.rawData(args);
  }

  @graphql.Query(() => RawDatum, { nullable: true })
  async rawDatum(
    @graphql.Args() args: RawDatumFindUniqueArgs
  ): Promise<RawDatum | null> {
    const result = await this.service.rawDatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RawDatum)
  async createRawDatum(
    @graphql.Args() args: CreateRawDatumArgs
  ): Promise<RawDatum> {
    return await this.service.createRawDatum({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RawDatum)
  async updateRawDatum(
    @graphql.Args() args: UpdateRawDatumArgs
  ): Promise<RawDatum | null> {
    try {
      return await this.service.updateRawDatum({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RawDatum)
  async deleteRawDatum(
    @graphql.Args() args: DeleteRawDatumArgs
  ): Promise<RawDatum | null> {
    try {
      return await this.service.deleteRawDatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
