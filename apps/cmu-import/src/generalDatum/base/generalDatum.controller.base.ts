/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GeneralDatumService } from "../generalDatum.service";
import { GeneralDatumCreateInput } from "./GeneralDatumCreateInput";
import { GeneralDatum } from "./GeneralDatum";
import { GeneralDatumFindManyArgs } from "./GeneralDatumFindManyArgs";
import { GeneralDatumWhereUniqueInput } from "./GeneralDatumWhereUniqueInput";
import { GeneralDatumUpdateInput } from "./GeneralDatumUpdateInput";

export class GeneralDatumControllerBase {
  constructor(protected readonly service: GeneralDatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GeneralDatum })
  async createGeneralDatum(
    @common.Body() data: GeneralDatumCreateInput
  ): Promise<GeneralDatum> {
    return await this.service.createGeneralDatum({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        date: true,
        date2: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        text: true,
        val: true,
        val2: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GeneralDatum] })
  @ApiNestedQuery(GeneralDatumFindManyArgs)
  async generalData(@common.Req() request: Request): Promise<GeneralDatum[]> {
    const args = plainToClass(GeneralDatumFindManyArgs, request.query);
    return this.service.generalData({
      ...args,
      select: {
        date: true,
        date2: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        text: true,
        val: true,
        val2: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GeneralDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async generalDatum(
    @common.Param() params: GeneralDatumWhereUniqueInput
  ): Promise<GeneralDatum | null> {
    const result = await this.service.generalDatum({
      where: params,
      select: {
        date: true,
        date2: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        text: true,
        val: true,
        val2: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GeneralDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGeneralDatum(
    @common.Param() params: GeneralDatumWhereUniqueInput,
    @common.Body() data: GeneralDatumUpdateInput
  ): Promise<GeneralDatum | null> {
    try {
      return await this.service.updateGeneralDatum({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          date: true,
          date2: true,
          id: true,

          studentData: {
            select: {
              id: true,
            },
          },

          text: true,
          val: true,
          val2: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GeneralDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGeneralDatum(
    @common.Param() params: GeneralDatumWhereUniqueInput
  ): Promise<GeneralDatum | null> {
    try {
      return await this.service.deleteGeneralDatum({
        where: params,
        select: {
          date: true,
          date2: true,
          id: true,

          studentData: {
            select: {
              id: true,
            },
          },

          text: true,
          val: true,
          val2: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
