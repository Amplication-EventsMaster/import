/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GeneralDatum } from "./GeneralDatum";
import { GeneralDatumCountArgs } from "./GeneralDatumCountArgs";
import { GeneralDatumFindManyArgs } from "./GeneralDatumFindManyArgs";
import { GeneralDatumFindUniqueArgs } from "./GeneralDatumFindUniqueArgs";
import { CreateGeneralDatumArgs } from "./CreateGeneralDatumArgs";
import { UpdateGeneralDatumArgs } from "./UpdateGeneralDatumArgs";
import { DeleteGeneralDatumArgs } from "./DeleteGeneralDatumArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { GeneralDatumService } from "../generalDatum.service";
@graphql.Resolver(() => GeneralDatum)
export class GeneralDatumResolverBase {
  constructor(protected readonly service: GeneralDatumService) {}

  async _generalDataMeta(
    @graphql.Args() args: GeneralDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GeneralDatum])
  async generalData(
    @graphql.Args() args: GeneralDatumFindManyArgs
  ): Promise<GeneralDatum[]> {
    return this.service.generalData(args);
  }

  @graphql.Query(() => GeneralDatum, { nullable: true })
  async generalDatum(
    @graphql.Args() args: GeneralDatumFindUniqueArgs
  ): Promise<GeneralDatum | null> {
    const result = await this.service.generalDatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GeneralDatum)
  async createGeneralDatum(
    @graphql.Args() args: CreateGeneralDatumArgs
  ): Promise<GeneralDatum> {
    return await this.service.createGeneralDatum({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => GeneralDatum)
  async updateGeneralDatum(
    @graphql.Args() args: UpdateGeneralDatumArgs
  ): Promise<GeneralDatum | null> {
    try {
      return await this.service.updateGeneralDatum({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GeneralDatum)
  async deleteGeneralDatum(
    @graphql.Args() args: DeleteGeneralDatumArgs
  ): Promise<GeneralDatum | null> {
    try {
      return await this.service.deleteGeneralDatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: GeneralDatum
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
