/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDataRiService } from "../studentDataRi.service";
import { StudentDataRiCreateInput } from "./StudentDataRiCreateInput";
import { StudentDataRi } from "./StudentDataRi";
import { StudentDataRiFindManyArgs } from "./StudentDataRiFindManyArgs";
import { StudentDataRiWhereUniqueInput } from "./StudentDataRiWhereUniqueInput";
import { StudentDataRiUpdateInput } from "./StudentDataRiUpdateInput";

export class StudentDataRiControllerBase {
  constructor(protected readonly service: StudentDataRiService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDataRi })
  async createStudentDataRi(
    @common.Body() data: StudentDataRiCreateInput
  ): Promise<StudentDataRi> {
    return await this.service.createStudentDataRi({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        id: true,
        overrideCore: true,
        overrideSpec: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDataRi] })
  @ApiNestedQuery(StudentDataRiFindManyArgs)
  async studentDataRis(
    @common.Req() request: Request
  ): Promise<StudentDataRi[]> {
    const args = plainToClass(StudentDataRiFindManyArgs, request.query);
    return this.service.studentDataRis({
      ...args,
      select: {
        id: true,
        overrideCore: true,
        overrideSpec: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDataRi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDataRi(
    @common.Param() params: StudentDataRiWhereUniqueInput
  ): Promise<StudentDataRi | null> {
    const result = await this.service.studentDataRi({
      where: params,
      select: {
        id: true,
        overrideCore: true,
        overrideSpec: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDataRi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDataRi(
    @common.Param() params: StudentDataRiWhereUniqueInput,
    @common.Body() data: StudentDataRiUpdateInput
  ): Promise<StudentDataRi | null> {
    try {
      return await this.service.updateStudentDataRi({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          id: true,
          overrideCore: true,
          overrideSpec: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDataRi })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDataRi(
    @common.Param() params: StudentDataRiWhereUniqueInput
  ): Promise<StudentDataRi | null> {
    try {
      return await this.service.deleteStudentDataRi({
        where: params,
        select: {
          id: true,
          overrideCore: true,
          overrideSpec: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
