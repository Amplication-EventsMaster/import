/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentDataRi } from "./StudentDataRi";
import { StudentDataRiCountArgs } from "./StudentDataRiCountArgs";
import { StudentDataRiFindManyArgs } from "./StudentDataRiFindManyArgs";
import { StudentDataRiFindUniqueArgs } from "./StudentDataRiFindUniqueArgs";
import { CreateStudentDataRiArgs } from "./CreateStudentDataRiArgs";
import { UpdateStudentDataRiArgs } from "./UpdateStudentDataRiArgs";
import { DeleteStudentDataRiArgs } from "./DeleteStudentDataRiArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentDataRiService } from "../studentDataRi.service";
@graphql.Resolver(() => StudentDataRi)
export class StudentDataRiResolverBase {
  constructor(protected readonly service: StudentDataRiService) {}

  async _studentDataRisMeta(
    @graphql.Args() args: StudentDataRiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDataRi])
  async studentDataRis(
    @graphql.Args() args: StudentDataRiFindManyArgs
  ): Promise<StudentDataRi[]> {
    return this.service.studentDataRis(args);
  }

  @graphql.Query(() => StudentDataRi, { nullable: true })
  async studentDataRi(
    @graphql.Args() args: StudentDataRiFindUniqueArgs
  ): Promise<StudentDataRi | null> {
    const result = await this.service.studentDataRi(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDataRi)
  async createStudentDataRi(
    @graphql.Args() args: CreateStudentDataRiArgs
  ): Promise<StudentDataRi> {
    return await this.service.createStudentDataRi({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentDataRi)
  async updateStudentDataRi(
    @graphql.Args() args: UpdateStudentDataRiArgs
  ): Promise<StudentDataRi | null> {
    try {
      return await this.service.updateStudentDataRi({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDataRi)
  async deleteStudentDataRi(
    @graphql.Args() args: DeleteStudentDataRiArgs
  ): Promise<StudentDataRi | null> {
    try {
      return await this.service.deleteStudentDataRi(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentDataRi
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
