/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentDataRi as PrismaStudentDataRi,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentDataRiServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentDataRiCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentDataRi.count(args);
  }

  async studentDataRis<T extends Prisma.StudentDataRiFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataRiFindManyArgs>
  ): Promise<PrismaStudentDataRi[]> {
    return this.prisma.studentDataRi.findMany<Prisma.StudentDataRiFindManyArgs>(
      args
    );
  }
  async studentDataRi<T extends Prisma.StudentDataRiFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataRiFindUniqueArgs>
  ): Promise<PrismaStudentDataRi | null> {
    return this.prisma.studentDataRi.findUnique(args);
  }
  async createStudentDataRi<T extends Prisma.StudentDataRiCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataRiCreateArgs>
  ): Promise<PrismaStudentDataRi> {
    return this.prisma.studentDataRi.create<T>(args);
  }
  async updateStudentDataRi<T extends Prisma.StudentDataRiUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataRiUpdateArgs>
  ): Promise<PrismaStudentDataRi> {
    return this.prisma.studentDataRi.update<T>(args);
  }
  async deleteStudentDataRi<T extends Prisma.StudentDataRiDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataRiDeleteArgs>
  ): Promise<PrismaStudentDataRi> {
    return this.prisma.studentDataRi.delete(args);
  }

  async getStudentData(parentId: string): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentDataRi
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
