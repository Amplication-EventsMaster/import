/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserHostService } from "../userHost.service";
import { UserHostCreateInput } from "./UserHostCreateInput";
import { UserHost } from "./UserHost";
import { UserHostFindManyArgs } from "./UserHostFindManyArgs";
import { UserHostWhereUniqueInput } from "./UserHostWhereUniqueInput";
import { UserHostUpdateInput } from "./UserHostUpdateInput";

export class UserHostControllerBase {
  constructor(protected readonly service: UserHostService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserHost })
  async createUserHost(
    @common.Body() data: UserHostCreateInput
  ): Promise<UserHost> {
    return await this.service.createUserHost({
      data: data,
      select: {
        host: true,
        id: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserHost] })
  @ApiNestedQuery(UserHostFindManyArgs)
  async userHosts(@common.Req() request: Request): Promise<UserHost[]> {
    const args = plainToClass(UserHostFindManyArgs, request.query);
    return this.service.userHosts({
      ...args,
      select: {
        host: true,
        id: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserHost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userHost(
    @common.Param() params: UserHostWhereUniqueInput
  ): Promise<UserHost | null> {
    const result = await this.service.userHost({
      where: params,
      select: {
        host: true,
        id: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserHost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserHost(
    @common.Param() params: UserHostWhereUniqueInput,
    @common.Body() data: UserHostUpdateInput
  ): Promise<UserHost | null> {
    try {
      return await this.service.updateUserHost({
        where: params,
        data: data,
        select: {
          host: true,
          id: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserHost })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserHost(
    @common.Param() params: UserHostWhereUniqueInput
  ): Promise<UserHost | null> {
    try {
      return await this.service.deleteUserHost({
        where: params,
        select: {
          host: true,
          id: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
