/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserHost } from "./UserHost";
import { UserHostCountArgs } from "./UserHostCountArgs";
import { UserHostFindManyArgs } from "./UserHostFindManyArgs";
import { UserHostFindUniqueArgs } from "./UserHostFindUniqueArgs";
import { CreateUserHostArgs } from "./CreateUserHostArgs";
import { UpdateUserHostArgs } from "./UpdateUserHostArgs";
import { DeleteUserHostArgs } from "./DeleteUserHostArgs";
import { UserHostService } from "../userHost.service";
@graphql.Resolver(() => UserHost)
export class UserHostResolverBase {
  constructor(protected readonly service: UserHostService) {}

  async _userHostsMeta(
    @graphql.Args() args: UserHostCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserHost])
  async userHosts(
    @graphql.Args() args: UserHostFindManyArgs
  ): Promise<UserHost[]> {
    return this.service.userHosts(args);
  }

  @graphql.Query(() => UserHost, { nullable: true })
  async userHost(
    @graphql.Args() args: UserHostFindUniqueArgs
  ): Promise<UserHost | null> {
    const result = await this.service.userHost(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserHost)
  async createUserHost(
    @graphql.Args() args: CreateUserHostArgs
  ): Promise<UserHost> {
    return await this.service.createUserHost({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserHost)
  async updateUserHost(
    @graphql.Args() args: UpdateUserHostArgs
  ): Promise<UserHost | null> {
    try {
      return await this.service.updateUserHost({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserHost)
  async deleteUserHost(
    @graphql.Args() args: DeleteUserHostArgs
  ): Promise<UserHost | null> {
    try {
      return await this.service.deleteUserHost(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
