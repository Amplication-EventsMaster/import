/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, UserHost as PrismaUserHost } from "@prisma/client";

export class UserHostServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.UserHostCountArgs, "select">): Promise<number> {
    return this.prisma.userHost.count(args);
  }

  async userHosts<T extends Prisma.UserHostFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHostFindManyArgs>
  ): Promise<PrismaUserHost[]> {
    return this.prisma.userHost.findMany<Prisma.UserHostFindManyArgs>(args);
  }
  async userHost<T extends Prisma.UserHostFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHostFindUniqueArgs>
  ): Promise<PrismaUserHost | null> {
    return this.prisma.userHost.findUnique(args);
  }
  async createUserHost<T extends Prisma.UserHostCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHostCreateArgs>
  ): Promise<PrismaUserHost> {
    return this.prisma.userHost.create<T>(args);
  }
  async updateUserHost<T extends Prisma.UserHostUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHostUpdateArgs>
  ): Promise<PrismaUserHost> {
    return this.prisma.userHost.update<T>(args);
  }
  async deleteUserHost<T extends Prisma.UserHostDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserHostDeleteArgs>
  ): Promise<PrismaUserHost> {
    return this.prisma.userHost.delete(args);
  }
}
