/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternshipsIsrmService } from "../internshipsIsrm.service";
import { InternshipsIsrmCreateInput } from "./InternshipsIsrmCreateInput";
import { InternshipsIsrm } from "./InternshipsIsrm";
import { InternshipsIsrmFindManyArgs } from "./InternshipsIsrmFindManyArgs";
import { InternshipsIsrmWhereUniqueInput } from "./InternshipsIsrmWhereUniqueInput";
import { InternshipsIsrmUpdateInput } from "./InternshipsIsrmUpdateInput";

export class InternshipsIsrmControllerBase {
  constructor(protected readonly service: InternshipsIsrmService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternshipsIsrm })
  async createInternshipsIsrm(
    @common.Body() data: InternshipsIsrmCreateInput
  ): Promise<InternshipsIsrm> {
    return await this.service.createInternshipsIsrm({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternshipsIsrm] })
  @ApiNestedQuery(InternshipsIsrmFindManyArgs)
  async internshipsIsrms(
    @common.Req() request: Request
  ): Promise<InternshipsIsrm[]> {
    const args = plainToClass(InternshipsIsrmFindManyArgs, request.query);
    return this.service.internshipsIsrms({
      ...args,
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternshipsIsrm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internshipsIsrm(
    @common.Param() params: InternshipsIsrmWhereUniqueInput
  ): Promise<InternshipsIsrm | null> {
    const result = await this.service.internshipsIsrm({
      where: params,
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternshipsIsrm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternshipsIsrm(
    @common.Param() params: InternshipsIsrmWhereUniqueInput,
    @common.Body() data: InternshipsIsrmUpdateInput
  ): Promise<InternshipsIsrm | null> {
    try {
      return await this.service.updateInternshipsIsrm({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          city: true,
          company: true,
          companyUrl: true,
          endDate: true,
          id: true,
          pending: true,
          position: true,
          startDate: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },

          supervisorEmail: true,
          supervisorName: true,
          supervisorPhone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternshipsIsrm })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternshipsIsrm(
    @common.Param() params: InternshipsIsrmWhereUniqueInput
  ): Promise<InternshipsIsrm | null> {
    try {
      return await this.service.deleteInternshipsIsrm({
        where: params,
        select: {
          city: true,
          company: true,
          companyUrl: true,
          endDate: true,
          id: true,
          pending: true,
          position: true,
          startDate: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },

          supervisorEmail: true,
          supervisorName: true,
          supervisorPhone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
