/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InternshipsIsrm } from "./InternshipsIsrm";
import { InternshipsIsrmCountArgs } from "./InternshipsIsrmCountArgs";
import { InternshipsIsrmFindManyArgs } from "./InternshipsIsrmFindManyArgs";
import { InternshipsIsrmFindUniqueArgs } from "./InternshipsIsrmFindUniqueArgs";
import { CreateInternshipsIsrmArgs } from "./CreateInternshipsIsrmArgs";
import { UpdateInternshipsIsrmArgs } from "./UpdateInternshipsIsrmArgs";
import { DeleteInternshipsIsrmArgs } from "./DeleteInternshipsIsrmArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { InternshipsIsrmService } from "../internshipsIsrm.service";
@graphql.Resolver(() => InternshipsIsrm)
export class InternshipsIsrmResolverBase {
  constructor(protected readonly service: InternshipsIsrmService) {}

  async _internshipsIsrmsMeta(
    @graphql.Args() args: InternshipsIsrmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InternshipsIsrm])
  async internshipsIsrms(
    @graphql.Args() args: InternshipsIsrmFindManyArgs
  ): Promise<InternshipsIsrm[]> {
    return this.service.internshipsIsrms(args);
  }

  @graphql.Query(() => InternshipsIsrm, { nullable: true })
  async internshipsIsrm(
    @graphql.Args() args: InternshipsIsrmFindUniqueArgs
  ): Promise<InternshipsIsrm | null> {
    const result = await this.service.internshipsIsrm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InternshipsIsrm)
  async createInternshipsIsrm(
    @graphql.Args() args: CreateInternshipsIsrmArgs
  ): Promise<InternshipsIsrm> {
    return await this.service.createInternshipsIsrm({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => InternshipsIsrm)
  async updateInternshipsIsrm(
    @graphql.Args() args: UpdateInternshipsIsrmArgs
  ): Promise<InternshipsIsrm | null> {
    try {
      return await this.service.updateInternshipsIsrm({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InternshipsIsrm)
  async deleteInternshipsIsrm(
    @graphql.Args() args: DeleteInternshipsIsrmArgs
  ): Promise<InternshipsIsrm | null> {
    try {
      return await this.service.deleteInternshipsIsrm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: InternshipsIsrm
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
