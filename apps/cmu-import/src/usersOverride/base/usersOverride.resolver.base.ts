/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UsersOverride } from "./UsersOverride";
import { UsersOverrideCountArgs } from "./UsersOverrideCountArgs";
import { UsersOverrideFindManyArgs } from "./UsersOverrideFindManyArgs";
import { UsersOverrideFindUniqueArgs } from "./UsersOverrideFindUniqueArgs";
import { CreateUsersOverrideArgs } from "./CreateUsersOverrideArgs";
import { UpdateUsersOverrideArgs } from "./UpdateUsersOverrideArgs";
import { DeleteUsersOverrideArgs } from "./DeleteUsersOverrideArgs";
import { UsersOverrideService } from "../usersOverride.service";
@graphql.Resolver(() => UsersOverride)
export class UsersOverrideResolverBase {
  constructor(protected readonly service: UsersOverrideService) {}

  async _usersOverridesMeta(
    @graphql.Args() args: UsersOverrideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UsersOverride])
  async usersOverrides(
    @graphql.Args() args: UsersOverrideFindManyArgs
  ): Promise<UsersOverride[]> {
    return this.service.usersOverrides(args);
  }

  @graphql.Query(() => UsersOverride, { nullable: true })
  async usersOverride(
    @graphql.Args() args: UsersOverrideFindUniqueArgs
  ): Promise<UsersOverride | null> {
    const result = await this.service.usersOverride(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UsersOverride)
  async createUsersOverride(
    @graphql.Args() args: CreateUsersOverrideArgs
  ): Promise<UsersOverride> {
    return await this.service.createUsersOverride({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UsersOverride)
  async updateUsersOverride(
    @graphql.Args() args: UpdateUsersOverrideArgs
  ): Promise<UsersOverride | null> {
    try {
      return await this.service.updateUsersOverride({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UsersOverride)
  async deleteUsersOverride(
    @graphql.Args() args: DeleteUsersOverrideArgs
  ): Promise<UsersOverride | null> {
    try {
      return await this.service.deleteUsersOverride(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
