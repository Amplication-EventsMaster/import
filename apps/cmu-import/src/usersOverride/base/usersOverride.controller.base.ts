/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UsersOverrideService } from "../usersOverride.service";
import { UsersOverrideCreateInput } from "./UsersOverrideCreateInput";
import { UsersOverride } from "./UsersOverride";
import { UsersOverrideFindManyArgs } from "./UsersOverrideFindManyArgs";
import { UsersOverrideWhereUniqueInput } from "./UsersOverrideWhereUniqueInput";
import { UsersOverrideUpdateInput } from "./UsersOverrideUpdateInput";

export class UsersOverrideControllerBase {
  constructor(protected readonly service: UsersOverrideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UsersOverride })
  async createUsersOverride(
    @common.Body() data: UsersOverrideCreateInput
  ): Promise<UsersOverride> {
    return await this.service.createUsersOverride({
      data: data,
      select: {
        department: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        middleName: true,
        nickname: true,
        urId: true,
        userId: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UsersOverride] })
  @ApiNestedQuery(UsersOverrideFindManyArgs)
  async usersOverrides(
    @common.Req() request: Request
  ): Promise<UsersOverride[]> {
    const args = plainToClass(UsersOverrideFindManyArgs, request.query);
    return this.service.usersOverrides({
      ...args,
      select: {
        department: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        middleName: true,
        nickname: true,
        urId: true,
        userId: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UsersOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async usersOverride(
    @common.Param() params: UsersOverrideWhereUniqueInput
  ): Promise<UsersOverride | null> {
    const result = await this.service.usersOverride({
      where: params,
      select: {
        department: true,
        email: true,
        firstName: true,
        id: true,
        lastName: true,
        middleName: true,
        nickname: true,
        urId: true,
        userId: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UsersOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUsersOverride(
    @common.Param() params: UsersOverrideWhereUniqueInput,
    @common.Body() data: UsersOverrideUpdateInput
  ): Promise<UsersOverride | null> {
    try {
      return await this.service.updateUsersOverride({
        where: params,
        data: data,
        select: {
          department: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          middleName: true,
          nickname: true,
          urId: true,
          userId: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UsersOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUsersOverride(
    @common.Param() params: UsersOverrideWhereUniqueInput
  ): Promise<UsersOverride | null> {
    try {
      return await this.service.deleteUsersOverride({
        where: params,
        select: {
          department: true,
          email: true,
          firstName: true,
          id: true,
          lastName: true,
          middleName: true,
          nickname: true,
          urId: true,
          userId: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
