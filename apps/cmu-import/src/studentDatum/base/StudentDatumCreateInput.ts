/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AdvisorCreateNestedManyWithoutStudentDataInput } from "./AdvisorCreateNestedManyWithoutStudentDataInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  IsDate,
  IsBoolean,
  IsInt,
  IsNumber,
} from "class-validator";
import { Type } from "class-transformer";
import { AreaCreateNestedManyWithoutStudentDataInput } from "./AreaCreateNestedManyWithoutStudentDataInput";
import { AwardCreateNestedManyWithoutStudentDataInput } from "./AwardCreateNestedManyWithoutStudentDataInput";
import { CommitteeServiceCreateNestedManyWithoutStudentDataInput } from "./CommitteeServiceCreateNestedManyWithoutStudentDataInput";
import { DegreeStatusCreateNestedManyWithoutStudentDataInput } from "./DegreeStatusCreateNestedManyWithoutStudentDataInput";
import { EmploymentCreateNestedManyWithoutStudentDataInput } from "./EmploymentCreateNestedManyWithoutStudentDataInput";
import { EvaluationLetterCreateNestedManyWithoutStudentDataInput } from "./EvaluationLetterCreateNestedManyWithoutStudentDataInput";
import { ExpNeuroReqCreateNestedManyWithoutStudentDataInput } from "./ExpNeuroReqCreateNestedManyWithoutStudentDataInput";
import { FellowshipCreateNestedManyWithoutStudentDataInput } from "./FellowshipCreateNestedManyWithoutStudentDataInput";
import { FundingCreateNestedManyWithoutStudentDataInput } from "./FundingCreateNestedManyWithoutStudentDataInput";
import { GeneralDatumCreateNestedManyWithoutStudentDataInput } from "./GeneralDatumCreateNestedManyWithoutStudentDataInput";
import { InternshipCreateNestedManyWithoutStudentDataInput } from "./InternshipCreateNestedManyWithoutStudentDataInput";
import { InternshipsCdCreateNestedManyWithoutStudentDataInput } from "./InternshipsCdCreateNestedManyWithoutStudentDataInput";
import { InternshipsIniCreateNestedManyWithoutStudentDataInput } from "./InternshipsIniCreateNestedManyWithoutStudentDataInput";
import { InternshipsIsrmCreateNestedManyWithoutStudentDataInput } from "./InternshipsIsrmCreateNestedManyWithoutStudentDataInput";
import { InterviewCreateNestedManyWithoutStudentDataInput } from "./InterviewCreateNestedManyWithoutStudentDataInput";
import { ItaCreateNestedManyWithoutStudentDataInput } from "./ItaCreateNestedManyWithoutStudentDataInput";
import { LegacyRequirementCreateNestedManyWithoutStudentDataInput } from "./LegacyRequirementCreateNestedManyWithoutStudentDataInput";
import { NoteCreateNestedManyWithoutStudentDataInput } from "./NoteCreateNestedManyWithoutStudentDataInput";
import { PracticumCreateNestedManyWithoutStudentDataInput } from "./PracticumCreateNestedManyWithoutStudentDataInput";
import { PresentationCreateNestedManyWithoutStudentDataInput } from "./PresentationCreateNestedManyWithoutStudentDataInput";
import { ProgramStatusCreateNestedManyWithoutStudentDataInput } from "./ProgramStatusCreateNestedManyWithoutStudentDataInput";
import { ProjectTopicCreateNestedManyWithoutStudentDataInput } from "./ProjectTopicCreateNestedManyWithoutStudentDataInput";
import { QualsCommitteeCreateNestedManyWithoutStudentDataInput } from "./QualsCommitteeCreateNestedManyWithoutStudentDataInput";
import { RotationCreateNestedManyWithoutStudentDataInput } from "./RotationCreateNestedManyWithoutStudentDataInput";
import { StatementCreateNestedManyWithoutStudentDataInput } from "./StatementCreateNestedManyWithoutStudentDataInput";
import { StudentAdvisorCreateNestedManyWithoutStudentDataInput } from "./StudentAdvisorCreateNestedManyWithoutStudentDataInput";
import { StudentAppCreateNestedManyWithoutStudentDataInput } from "./StudentAppCreateNestedManyWithoutStudentDataInput";
import { StudentDataHciiCreateNestedManyWithoutStudentDataInput } from "./StudentDataHciiCreateNestedManyWithoutStudentDataInput";
import { StudentDataIniCreateNestedManyWithoutStudentDataInput } from "./StudentDataIniCreateNestedManyWithoutStudentDataInput";
import { StudentDataMlCreateNestedManyWithoutStudentDataInput } from "./StudentDataMlCreateNestedManyWithoutStudentDataInput";
import { StudentDataRiWhereUniqueInput } from "../../studentDataRi/base/StudentDataRiWhereUniqueInput";
import { StudentFileCreateNestedManyWithoutStudentDataInput } from "./StudentFileCreateNestedManyWithoutStudentDataInput";
import { StudentInstituteCreateNestedManyWithoutStudentDataInput } from "./StudentInstituteCreateNestedManyWithoutStudentDataInput";
import { StudentMentorCreateNestedManyWithoutStudentDataInput } from "./StudentMentorCreateNestedManyWithoutStudentDataInput";
import { StudentOverrideCreateNestedManyWithoutStudentDataInput } from "./StudentOverrideCreateNestedManyWithoutStudentDataInput";
import { StudentPubCreateNestedManyWithoutStudentDataInput } from "./StudentPubCreateNestedManyWithoutStudentDataInput";
import { StudentResidencyCreateNestedManyWithoutStudentDataInput } from "./StudentResidencyCreateNestedManyWithoutStudentDataInput";
import { StudentSkillCreateNestedManyWithoutStudentDataInput } from "./StudentSkillCreateNestedManyWithoutStudentDataInput";
import { TeachingReqCreateNestedManyWithoutStudentDataInput } from "./TeachingReqCreateNestedManyWithoutStudentDataInput";
import { ThesisCommitteeCreateNestedManyWithoutStudentDataInput } from "./ThesisCommitteeCreateNestedManyWithoutStudentDataInput";
import { ThesisTopicCreateNestedManyWithoutStudentDataInput } from "./ThesisTopicCreateNestedManyWithoutStudentDataInput";
import { UserRoleWhereUniqueInput } from "../../userRole/base/UserRoleWhereUniqueInput";

@InputType()
class StudentDatumCreateInput {
  @ApiProperty({
    required: false,
    type: () => AdvisorCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => AdvisorCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => AdvisorCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  advisors?: AdvisorCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  area?: string | null;

  @ApiProperty({
    required: false,
    type: () => AreaCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => AreaCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => AreaCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  areas?: AreaCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => AwardCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => AwardCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => AwardCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  awards?: AwardCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  citizenship?: string | null;

  @ApiProperty({
    required: false,
    type: () => CommitteeServiceCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => CommitteeServiceCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => CommitteeServiceCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  committeeService?: CommitteeServiceCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  curriculum?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  degree?: string | null;

  @ApiProperty({
    required: false,
    type: () => DegreeStatusCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => DegreeStatusCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => DegreeStatusCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  degreeStatus?: DegreeStatusCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  department?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmploymentCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => EmploymentCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => EmploymentCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  employment?: EmploymentCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  enterDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => EvaluationLetterCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => EvaluationLetterCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => EvaluationLetterCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  evaluationLetters?: EvaluationLetterCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => ExpNeuroReqCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => ExpNeuroReqCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => ExpNeuroReqCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  expNeuroReq?: ExpNeuroReqCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => FellowshipCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => FellowshipCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => FellowshipCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  fellowships?: FellowshipCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => FundingCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => FundingCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => FundingCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  funding?: FundingCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  gender?: string | null;

  @ApiProperty({
    required: false,
    type: () => GeneralDatumCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => GeneralDatumCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => GeneralDatumCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  generalData?: GeneralDatumCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  guid?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  institutesId?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  institutesName?: string | null;

  @ApiProperty({
    required: false,
    type: () => InternshipCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => InternshipCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => InternshipCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  internships?: InternshipCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => InternshipsCdCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => InternshipsCdCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => InternshipsCdCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  internshipsCds?: InternshipsCdCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => InternshipsIniCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => InternshipsIniCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => InternshipsIniCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  internshipsIni?: InternshipsIniCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => InternshipsIsrmCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => InternshipsIsrmCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => InternshipsIsrmCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  internshipsIsrms?: InternshipsIsrmCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => InterviewCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => InterviewCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => InterviewCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  interview?: InterviewCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => ItaCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => ItaCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => ItaCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  ita?: ItaCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => LegacyRequirementCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => LegacyRequirementCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => LegacyRequirementCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  legacyRequirements?: LegacyRequirementCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  mltSwitch?: boolean | null;

  @ApiProperty({
    required: false,
    type: () => NoteCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => NoteCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => NoteCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  notes?: NoteCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  parttime?: number | null;

  @ApiProperty({
    required: false,
    type: () => PracticumCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => PracticumCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => PracticumCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  practicum?: PracticumCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => PresentationCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => PresentationCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => PresentationCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  presentations?: PresentationCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  program?: string | null;

  @ApiProperty({
    required: false,
    type: () => ProgramStatusCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => ProgramStatusCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => ProgramStatusCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  programStatus?: ProgramStatusCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => ProjectTopicCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => ProjectTopicCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => ProjectTopicCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  projectTopic?: ProjectTopicCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => QualsCommitteeCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => QualsCommitteeCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => QualsCommitteeCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  qualsCommittee?: QualsCommitteeCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  residency?: string | null;

  @ApiProperty({
    required: false,
    type: () => RotationCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => RotationCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => RotationCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  rotations?: RotationCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StatementCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StatementCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StatementCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  statements?: StatementCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  status?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  statusDate?: Date | null;

  @ApiProperty({
    required: false,
    type: () => StudentAdvisorCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentAdvisorCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentAdvisorCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentAdvisors?: StudentAdvisorCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentAppCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentAppCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentAppCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentApps?: StudentAppCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentDataHciiCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentDataHciiCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentDataHciiCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentDataHcii?: StudentDataHciiCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentDataIniCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentDataIniCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentDataIniCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentDataIni?: StudentDataIniCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentDataMlCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentDataMlCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentDataMlCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentDataMl?: StudentDataMlCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentDataRiWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StudentDataRiWhereUniqueInput)
  @IsOptional()
  @Field(() => StudentDataRiWhereUniqueInput, {
    nullable: true,
  })
  studentDataRi?: StudentDataRiWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => StudentFileCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentFileCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentFileCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentFiles?: StudentFileCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentInstituteCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentInstituteCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentInstituteCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentInstitutes?: StudentInstituteCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentMentorCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentMentorCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentMentorCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentMentors?: StudentMentorCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentOverrideCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentOverrideCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentOverrideCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentOverrides?: StudentOverrideCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentPubCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentPubCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentPubCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentPubs?: StudentPubCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentResidencyCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentResidencyCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentResidencyCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentResidency?: StudentResidencyCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => StudentSkillCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => StudentSkillCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => StudentSkillCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  studentSkills?: StudentSkillCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => TeachingReqCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => TeachingReqCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => TeachingReqCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  teachingReq?: TeachingReqCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => ThesisCommitteeCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => ThesisCommitteeCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => ThesisCommitteeCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  thesisCommittee?: ThesisCommitteeCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: () => ThesisTopicCreateNestedManyWithoutStudentDataInput,
  })
  @ValidateNested()
  @Type(() => ThesisTopicCreateNestedManyWithoutStudentDataInput)
  @IsOptional()
  @Field(() => ThesisTopicCreateNestedManyWithoutStudentDataInput, {
    nullable: true,
  })
  thesisTopic?: ThesisTopicCreateNestedManyWithoutStudentDataInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  undergrad?: string | null;

  @ApiProperty({
    required: false,
    type: () => UserRoleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserRoleWhereUniqueInput)
  @IsOptional()
  @Field(() => UserRoleWhereUniqueInput, {
    nullable: true,
  })
  userRole?: UserRoleWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  year?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  yearAdjust?: string | null;
}

export { StudentDatumCreateInput as StudentDatumCreateInput };
