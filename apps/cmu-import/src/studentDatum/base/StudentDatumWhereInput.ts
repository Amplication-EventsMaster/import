/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AdvisorListRelationFilter } from "../../advisor/base/AdvisorListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { AreaListRelationFilter } from "../../area/base/AreaListRelationFilter";
import { AwardListRelationFilter } from "../../award/base/AwardListRelationFilter";
import { CommitteeServiceListRelationFilter } from "../../committeeService/base/CommitteeServiceListRelationFilter";
import { DegreeStatusListRelationFilter } from "../../degreeStatus/base/DegreeStatusListRelationFilter";
import { EmploymentListRelationFilter } from "../../employment/base/EmploymentListRelationFilter";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";
import { EvaluationLetterListRelationFilter } from "../../evaluationLetter/base/EvaluationLetterListRelationFilter";
import { ExpNeuroReqListRelationFilter } from "../../expNeuroReq/base/ExpNeuroReqListRelationFilter";
import { FellowshipListRelationFilter } from "../../fellowship/base/FellowshipListRelationFilter";
import { FundingListRelationFilter } from "../../funding/base/FundingListRelationFilter";
import { GeneralDatumListRelationFilter } from "../../generalDatum/base/GeneralDatumListRelationFilter";
import { IntFilter } from "../../util/IntFilter";
import { InternshipListRelationFilter } from "../../internship/base/InternshipListRelationFilter";
import { InternshipsCdListRelationFilter } from "../../internshipsCd/base/InternshipsCdListRelationFilter";
import { InternshipsIniListRelationFilter } from "../../internshipsIni/base/InternshipsIniListRelationFilter";
import { InternshipsIsrmListRelationFilter } from "../../internshipsIsrm/base/InternshipsIsrmListRelationFilter";
import { InterviewListRelationFilter } from "../../interview/base/InterviewListRelationFilter";
import { ItaListRelationFilter } from "../../ita/base/ItaListRelationFilter";
import { LegacyRequirementListRelationFilter } from "../../legacyRequirement/base/LegacyRequirementListRelationFilter";
import { BooleanNullableFilter } from "../../util/BooleanNullableFilter";
import { NoteListRelationFilter } from "../../note/base/NoteListRelationFilter";
import { IntNullableFilter } from "../../util/IntNullableFilter";
import { PracticumListRelationFilter } from "../../practicum/base/PracticumListRelationFilter";
import { PresentationListRelationFilter } from "../../presentation/base/PresentationListRelationFilter";
import { ProgramStatusListRelationFilter } from "../../programStatus/base/ProgramStatusListRelationFilter";
import { ProjectTopicListRelationFilter } from "../../projectTopic/base/ProjectTopicListRelationFilter";
import { QualsCommitteeListRelationFilter } from "../../qualsCommittee/base/QualsCommitteeListRelationFilter";
import { RotationListRelationFilter } from "../../rotation/base/RotationListRelationFilter";
import { StatementListRelationFilter } from "../../statement/base/StatementListRelationFilter";
import { StudentAdvisorListRelationFilter } from "../../studentAdvisor/base/StudentAdvisorListRelationFilter";
import { StudentAppListRelationFilter } from "../../studentApp/base/StudentAppListRelationFilter";
import { StudentDataHciiListRelationFilter } from "../../studentDataHcii/base/StudentDataHciiListRelationFilter";
import { StudentDataIniListRelationFilter } from "../../studentDataIni/base/StudentDataIniListRelationFilter";
import { StudentDataMlListRelationFilter } from "../../studentDataMl/base/StudentDataMlListRelationFilter";
import { StudentDataRiWhereUniqueInput } from "../../studentDataRi/base/StudentDataRiWhereUniqueInput";
import { StudentFileListRelationFilter } from "../../studentFile/base/StudentFileListRelationFilter";
import { StudentInstituteListRelationFilter } from "../../studentInstitute/base/StudentInstituteListRelationFilter";
import { StudentMentorListRelationFilter } from "../../studentMentor/base/StudentMentorListRelationFilter";
import { StudentOverrideListRelationFilter } from "../../studentOverride/base/StudentOverrideListRelationFilter";
import { StudentPubListRelationFilter } from "../../studentPub/base/StudentPubListRelationFilter";
import { StudentResidencyListRelationFilter } from "../../studentResidency/base/StudentResidencyListRelationFilter";
import { StudentSkillListRelationFilter } from "../../studentSkill/base/StudentSkillListRelationFilter";
import { TeachingReqListRelationFilter } from "../../teachingReq/base/TeachingReqListRelationFilter";
import { ThesisCommitteeListRelationFilter } from "../../thesisCommittee/base/ThesisCommitteeListRelationFilter";
import { ThesisTopicListRelationFilter } from "../../thesisTopic/base/ThesisTopicListRelationFilter";
import { UserRoleWhereUniqueInput } from "../../userRole/base/UserRoleWhereUniqueInput";
import { FloatNullableFilter } from "../../util/FloatNullableFilter";

@InputType()
class StudentDatumWhereInput {
  @ApiProperty({
    required: false,
    type: () => AdvisorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AdvisorListRelationFilter)
  @IsOptional()
  @Field(() => AdvisorListRelationFilter, {
    nullable: true,
  })
  advisors?: AdvisorListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  area?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => AreaListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AreaListRelationFilter)
  @IsOptional()
  @Field(() => AreaListRelationFilter, {
    nullable: true,
  })
  areas?: AreaListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AwardListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AwardListRelationFilter)
  @IsOptional()
  @Field(() => AwardListRelationFilter, {
    nullable: true,
  })
  awards?: AwardListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  citizenship?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => CommitteeServiceListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CommitteeServiceListRelationFilter)
  @IsOptional()
  @Field(() => CommitteeServiceListRelationFilter, {
    nullable: true,
  })
  committeeService?: CommitteeServiceListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  curriculum?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  degree?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => DegreeStatusListRelationFilter,
  })
  @ValidateNested()
  @Type(() => DegreeStatusListRelationFilter)
  @IsOptional()
  @Field(() => DegreeStatusListRelationFilter, {
    nullable: true,
  })
  degreeStatus?: DegreeStatusListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  department?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EmploymentListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EmploymentListRelationFilter)
  @IsOptional()
  @Field(() => EmploymentListRelationFilter, {
    nullable: true,
  })
  employment?: EmploymentListRelationFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  enterDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => EvaluationLetterListRelationFilter,
  })
  @ValidateNested()
  @Type(() => EvaluationLetterListRelationFilter)
  @IsOptional()
  @Field(() => EvaluationLetterListRelationFilter, {
    nullable: true,
  })
  evaluationLetters?: EvaluationLetterListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ExpNeuroReqListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ExpNeuroReqListRelationFilter)
  @IsOptional()
  @Field(() => ExpNeuroReqListRelationFilter, {
    nullable: true,
  })
  expNeuroReq?: ExpNeuroReqListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FellowshipListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FellowshipListRelationFilter)
  @IsOptional()
  @Field(() => FellowshipListRelationFilter, {
    nullable: true,
  })
  fellowships?: FellowshipListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FundingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FundingListRelationFilter)
  @IsOptional()
  @Field(() => FundingListRelationFilter, {
    nullable: true,
  })
  funding?: FundingListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  gender?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => GeneralDatumListRelationFilter,
  })
  @ValidateNested()
  @Type(() => GeneralDatumListRelationFilter)
  @IsOptional()
  @Field(() => GeneralDatumListRelationFilter, {
    nullable: true,
  })
  generalData?: GeneralDatumListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  guid?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: IntFilter,
  })
  @Type(() => IntFilter)
  @IsOptional()
  @Field(() => IntFilter, {
    nullable: true,
  })
  id?: IntFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  institutesId?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  institutesName?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => InternshipListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InternshipListRelationFilter)
  @IsOptional()
  @Field(() => InternshipListRelationFilter, {
    nullable: true,
  })
  internships?: InternshipListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InternshipsCdListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InternshipsCdListRelationFilter)
  @IsOptional()
  @Field(() => InternshipsCdListRelationFilter, {
    nullable: true,
  })
  internshipsCds?: InternshipsCdListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InternshipsIniListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InternshipsIniListRelationFilter)
  @IsOptional()
  @Field(() => InternshipsIniListRelationFilter, {
    nullable: true,
  })
  internshipsIni?: InternshipsIniListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InternshipsIsrmListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InternshipsIsrmListRelationFilter)
  @IsOptional()
  @Field(() => InternshipsIsrmListRelationFilter, {
    nullable: true,
  })
  internshipsIsrms?: InternshipsIsrmListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => InterviewListRelationFilter,
  })
  @ValidateNested()
  @Type(() => InterviewListRelationFilter)
  @IsOptional()
  @Field(() => InterviewListRelationFilter, {
    nullable: true,
  })
  interview?: InterviewListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ItaListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ItaListRelationFilter)
  @IsOptional()
  @Field(() => ItaListRelationFilter, {
    nullable: true,
  })
  ita?: ItaListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => LegacyRequirementListRelationFilter,
  })
  @ValidateNested()
  @Type(() => LegacyRequirementListRelationFilter)
  @IsOptional()
  @Field(() => LegacyRequirementListRelationFilter, {
    nullable: true,
  })
  legacyRequirements?: LegacyRequirementListRelationFilter;

  @ApiProperty({
    required: false,
    type: BooleanNullableFilter,
  })
  @Type(() => BooleanNullableFilter)
  @IsOptional()
  @Field(() => BooleanNullableFilter, {
    nullable: true,
  })
  mltSwitch?: BooleanNullableFilter;

  @ApiProperty({
    required: false,
    type: () => NoteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NoteListRelationFilter)
  @IsOptional()
  @Field(() => NoteListRelationFilter, {
    nullable: true,
  })
  notes?: NoteListRelationFilter;

  @ApiProperty({
    required: false,
    type: IntNullableFilter,
  })
  @Type(() => IntNullableFilter)
  @IsOptional()
  @Field(() => IntNullableFilter, {
    nullable: true,
  })
  parttime?: IntNullableFilter;

  @ApiProperty({
    required: false,
    type: () => PracticumListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PracticumListRelationFilter)
  @IsOptional()
  @Field(() => PracticumListRelationFilter, {
    nullable: true,
  })
  practicum?: PracticumListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => PresentationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PresentationListRelationFilter)
  @IsOptional()
  @Field(() => PresentationListRelationFilter, {
    nullable: true,
  })
  presentations?: PresentationListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  program?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => ProgramStatusListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProgramStatusListRelationFilter)
  @IsOptional()
  @Field(() => ProgramStatusListRelationFilter, {
    nullable: true,
  })
  programStatus?: ProgramStatusListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProjectTopicListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProjectTopicListRelationFilter)
  @IsOptional()
  @Field(() => ProjectTopicListRelationFilter, {
    nullable: true,
  })
  projectTopic?: ProjectTopicListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => QualsCommitteeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => QualsCommitteeListRelationFilter)
  @IsOptional()
  @Field(() => QualsCommitteeListRelationFilter, {
    nullable: true,
  })
  qualsCommittee?: QualsCommitteeListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  residency?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => RotationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => RotationListRelationFilter)
  @IsOptional()
  @Field(() => RotationListRelationFilter, {
    nullable: true,
  })
  rotations?: RotationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StatementListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StatementListRelationFilter)
  @IsOptional()
  @Field(() => StatementListRelationFilter, {
    nullable: true,
  })
  statements?: StatementListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  status?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  statusDate?: DateTimeNullableFilter;

  @ApiProperty({
    required: false,
    type: () => StudentAdvisorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentAdvisorListRelationFilter)
  @IsOptional()
  @Field(() => StudentAdvisorListRelationFilter, {
    nullable: true,
  })
  studentAdvisors?: StudentAdvisorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentAppListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentAppListRelationFilter)
  @IsOptional()
  @Field(() => StudentAppListRelationFilter, {
    nullable: true,
  })
  studentApps?: StudentAppListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentDataHciiListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentDataHciiListRelationFilter)
  @IsOptional()
  @Field(() => StudentDataHciiListRelationFilter, {
    nullable: true,
  })
  studentDataHcii?: StudentDataHciiListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentDataIniListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentDataIniListRelationFilter)
  @IsOptional()
  @Field(() => StudentDataIniListRelationFilter, {
    nullable: true,
  })
  studentDataIni?: StudentDataIniListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentDataMlListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentDataMlListRelationFilter)
  @IsOptional()
  @Field(() => StudentDataMlListRelationFilter, {
    nullable: true,
  })
  studentDataMl?: StudentDataMlListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentDataRiWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StudentDataRiWhereUniqueInput)
  @IsOptional()
  @Field(() => StudentDataRiWhereUniqueInput, {
    nullable: true,
  })
  studentDataRi?: StudentDataRiWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => StudentFileListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentFileListRelationFilter)
  @IsOptional()
  @Field(() => StudentFileListRelationFilter, {
    nullable: true,
  })
  studentFiles?: StudentFileListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentInstituteListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentInstituteListRelationFilter)
  @IsOptional()
  @Field(() => StudentInstituteListRelationFilter, {
    nullable: true,
  })
  studentInstitutes?: StudentInstituteListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentMentorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentMentorListRelationFilter)
  @IsOptional()
  @Field(() => StudentMentorListRelationFilter, {
    nullable: true,
  })
  studentMentors?: StudentMentorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentOverrideListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentOverrideListRelationFilter)
  @IsOptional()
  @Field(() => StudentOverrideListRelationFilter, {
    nullable: true,
  })
  studentOverrides?: StudentOverrideListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentPubListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentPubListRelationFilter)
  @IsOptional()
  @Field(() => StudentPubListRelationFilter, {
    nullable: true,
  })
  studentPubs?: StudentPubListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentResidencyListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentResidencyListRelationFilter)
  @IsOptional()
  @Field(() => StudentResidencyListRelationFilter, {
    nullable: true,
  })
  studentResidency?: StudentResidencyListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StudentSkillListRelationFilter,
  })
  @ValidateNested()
  @Type(() => StudentSkillListRelationFilter)
  @IsOptional()
  @Field(() => StudentSkillListRelationFilter, {
    nullable: true,
  })
  studentSkills?: StudentSkillListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => TeachingReqListRelationFilter,
  })
  @ValidateNested()
  @Type(() => TeachingReqListRelationFilter)
  @IsOptional()
  @Field(() => TeachingReqListRelationFilter, {
    nullable: true,
  })
  teachingReq?: TeachingReqListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ThesisCommitteeListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ThesisCommitteeListRelationFilter)
  @IsOptional()
  @Field(() => ThesisCommitteeListRelationFilter, {
    nullable: true,
  })
  thesisCommittee?: ThesisCommitteeListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ThesisTopicListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ThesisTopicListRelationFilter)
  @IsOptional()
  @Field(() => ThesisTopicListRelationFilter, {
    nullable: true,
  })
  thesisTopic?: ThesisTopicListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  undergrad?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => UserRoleWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserRoleWhereUniqueInput)
  @IsOptional()
  @Field(() => UserRoleWhereUniqueInput, {
    nullable: true,
  })
  userRole?: UserRoleWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: FloatNullableFilter,
  })
  @Type(() => FloatNullableFilter)
  @IsOptional()
  @Field(() => FloatNullableFilter, {
    nullable: true,
  })
  year?: FloatNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  yearAdjust?: StringNullableFilter;
}

export { StudentDatumWhereInput as StudentDatumWhereInput };
