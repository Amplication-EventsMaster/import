/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentDatum } from "./StudentDatum";
import { StudentDatumCountArgs } from "./StudentDatumCountArgs";
import { StudentDatumFindManyArgs } from "./StudentDatumFindManyArgs";
import { StudentDatumFindUniqueArgs } from "./StudentDatumFindUniqueArgs";
import { CreateStudentDatumArgs } from "./CreateStudentDatumArgs";
import { UpdateStudentDatumArgs } from "./UpdateStudentDatumArgs";
import { DeleteStudentDatumArgs } from "./DeleteStudentDatumArgs";
import { AdvisorFindManyArgs } from "../../advisor/base/AdvisorFindManyArgs";
import { Advisor } from "../../advisor/base/Advisor";
import { AreaFindManyArgs } from "../../area/base/AreaFindManyArgs";
import { Area } from "../../area/base/Area";
import { AwardFindManyArgs } from "../../award/base/AwardFindManyArgs";
import { Award } from "../../award/base/Award";
import { CommitteeServiceFindManyArgs } from "../../committeeService/base/CommitteeServiceFindManyArgs";
import { CommitteeService } from "../../committeeService/base/CommitteeService";
import { DegreeStatusFindManyArgs } from "../../degreeStatus/base/DegreeStatusFindManyArgs";
import { DegreeStatus } from "../../degreeStatus/base/DegreeStatus";
import { EmploymentFindManyArgs } from "../../employment/base/EmploymentFindManyArgs";
import { Employment } from "../../employment/base/Employment";
import { EvaluationLetterFindManyArgs } from "../../evaluationLetter/base/EvaluationLetterFindManyArgs";
import { EvaluationLetter } from "../../evaluationLetter/base/EvaluationLetter";
import { ExpNeuroReqFindManyArgs } from "../../expNeuroReq/base/ExpNeuroReqFindManyArgs";
import { ExpNeuroReq } from "../../expNeuroReq/base/ExpNeuroReq";
import { FellowshipFindManyArgs } from "../../fellowship/base/FellowshipFindManyArgs";
import { Fellowship } from "../../fellowship/base/Fellowship";
import { FundingFindManyArgs } from "../../funding/base/FundingFindManyArgs";
import { Funding } from "../../funding/base/Funding";
import { GeneralDatumFindManyArgs } from "../../generalDatum/base/GeneralDatumFindManyArgs";
import { GeneralDatum } from "../../generalDatum/base/GeneralDatum";
import { InternshipFindManyArgs } from "../../internship/base/InternshipFindManyArgs";
import { Internship } from "../../internship/base/Internship";
import { InternshipsCdFindManyArgs } from "../../internshipsCd/base/InternshipsCdFindManyArgs";
import { InternshipsCd } from "../../internshipsCd/base/InternshipsCd";
import { InternshipsIniFindManyArgs } from "../../internshipsIni/base/InternshipsIniFindManyArgs";
import { InternshipsIni } from "../../internshipsIni/base/InternshipsIni";
import { InternshipsIsrmFindManyArgs } from "../../internshipsIsrm/base/InternshipsIsrmFindManyArgs";
import { InternshipsIsrm } from "../../internshipsIsrm/base/InternshipsIsrm";
import { InterviewFindManyArgs } from "../../interview/base/InterviewFindManyArgs";
import { Interview } from "../../interview/base/Interview";
import { ItaFindManyArgs } from "../../ita/base/ItaFindManyArgs";
import { Ita } from "../../ita/base/Ita";
import { LegacyRequirementFindManyArgs } from "../../legacyRequirement/base/LegacyRequirementFindManyArgs";
import { LegacyRequirement } from "../../legacyRequirement/base/LegacyRequirement";
import { NoteFindManyArgs } from "../../note/base/NoteFindManyArgs";
import { Note } from "../../note/base/Note";
import { PracticumFindManyArgs } from "../../practicum/base/PracticumFindManyArgs";
import { Practicum } from "../../practicum/base/Practicum";
import { PresentationFindManyArgs } from "../../presentation/base/PresentationFindManyArgs";
import { Presentation } from "../../presentation/base/Presentation";
import { ProgramStatusFindManyArgs } from "../../programStatus/base/ProgramStatusFindManyArgs";
import { ProgramStatus } from "../../programStatus/base/ProgramStatus";
import { ProjectTopicFindManyArgs } from "../../projectTopic/base/ProjectTopicFindManyArgs";
import { ProjectTopic } from "../../projectTopic/base/ProjectTopic";
import { QualsCommitteeFindManyArgs } from "../../qualsCommittee/base/QualsCommitteeFindManyArgs";
import { QualsCommittee } from "../../qualsCommittee/base/QualsCommittee";
import { RotationFindManyArgs } from "../../rotation/base/RotationFindManyArgs";
import { Rotation } from "../../rotation/base/Rotation";
import { StatementFindManyArgs } from "../../statement/base/StatementFindManyArgs";
import { Statement } from "../../statement/base/Statement";
import { StudentAdvisorFindManyArgs } from "../../studentAdvisor/base/StudentAdvisorFindManyArgs";
import { StudentAdvisor } from "../../studentAdvisor/base/StudentAdvisor";
import { StudentAppFindManyArgs } from "../../studentApp/base/StudentAppFindManyArgs";
import { StudentApp } from "../../studentApp/base/StudentApp";
import { StudentDataHciiFindManyArgs } from "../../studentDataHcii/base/StudentDataHciiFindManyArgs";
import { StudentDataHcii } from "../../studentDataHcii/base/StudentDataHcii";
import { StudentDataIniFindManyArgs } from "../../studentDataIni/base/StudentDataIniFindManyArgs";
import { StudentDataIni } from "../../studentDataIni/base/StudentDataIni";
import { StudentDataMlFindManyArgs } from "../../studentDataMl/base/StudentDataMlFindManyArgs";
import { StudentDataMl } from "../../studentDataMl/base/StudentDataMl";
import { StudentFileFindManyArgs } from "../../studentFile/base/StudentFileFindManyArgs";
import { StudentFile } from "../../studentFile/base/StudentFile";
import { StudentInstituteFindManyArgs } from "../../studentInstitute/base/StudentInstituteFindManyArgs";
import { StudentInstitute } from "../../studentInstitute/base/StudentInstitute";
import { StudentMentorFindManyArgs } from "../../studentMentor/base/StudentMentorFindManyArgs";
import { StudentMentor } from "../../studentMentor/base/StudentMentor";
import { StudentOverrideFindManyArgs } from "../../studentOverride/base/StudentOverrideFindManyArgs";
import { StudentOverride } from "../../studentOverride/base/StudentOverride";
import { StudentPubFindManyArgs } from "../../studentPub/base/StudentPubFindManyArgs";
import { StudentPub } from "../../studentPub/base/StudentPub";
import { StudentResidencyFindManyArgs } from "../../studentResidency/base/StudentResidencyFindManyArgs";
import { StudentResidency } from "../../studentResidency/base/StudentResidency";
import { StudentSkillFindManyArgs } from "../../studentSkill/base/StudentSkillFindManyArgs";
import { StudentSkill } from "../../studentSkill/base/StudentSkill";
import { TeachingReqFindManyArgs } from "../../teachingReq/base/TeachingReqFindManyArgs";
import { TeachingReq } from "../../teachingReq/base/TeachingReq";
import { ThesisCommitteeFindManyArgs } from "../../thesisCommittee/base/ThesisCommitteeFindManyArgs";
import { ThesisCommittee } from "../../thesisCommittee/base/ThesisCommittee";
import { ThesisTopicFindManyArgs } from "../../thesisTopic/base/ThesisTopicFindManyArgs";
import { ThesisTopic } from "../../thesisTopic/base/ThesisTopic";
import { StudentDataRi } from "../../studentDataRi/base/StudentDataRi";
import { UserRole } from "../../userRole/base/UserRole";
import { StudentDatumService } from "../studentDatum.service";
@graphql.Resolver(() => StudentDatum)
export class StudentDatumResolverBase {
  constructor(protected readonly service: StudentDatumService) {}

  async _studentDataMeta(
    @graphql.Args() args: StudentDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentDatum])
  async studentData(
    @graphql.Args() args: StudentDatumFindManyArgs
  ): Promise<StudentDatum[]> {
    return this.service.studentData(args);
  }

  @graphql.Query(() => StudentDatum, { nullable: true })
  async studentDatum(
    @graphql.Args() args: StudentDatumFindUniqueArgs
  ): Promise<StudentDatum | null> {
    const result = await this.service.studentDatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentDatum)
  async createStudentDatum(
    @graphql.Args() args: CreateStudentDatumArgs
  ): Promise<StudentDatum> {
    return await this.service.createStudentDatum({
      ...args,
      data: {
        ...args.data,

        studentDataRi: args.data.studentDataRi
          ? {
              connect: args.data.studentDataRi,
            }
          : undefined,

        userRole: args.data.userRole
          ? {
              connect: args.data.userRole,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => StudentDatum)
  async updateStudentDatum(
    @graphql.Args() args: UpdateStudentDatumArgs
  ): Promise<StudentDatum | null> {
    try {
      return await this.service.updateStudentDatum({
        ...args,
        data: {
          ...args.data,

          studentDataRi: args.data.studentDataRi
            ? {
                connect: args.data.studentDataRi,
              }
            : undefined,

          userRole: args.data.userRole
            ? {
                connect: args.data.userRole,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentDatum)
  async deleteStudentDatum(
    @graphql.Args() args: DeleteStudentDatumArgs
  ): Promise<StudentDatum | null> {
    try {
      return await this.service.deleteStudentDatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Advisor], { name: "advisors" })
  async findAdvisors(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: AdvisorFindManyArgs
  ): Promise<Advisor[]> {
    const results = await this.service.findAdvisors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Area], { name: "areas" })
  async findAreas(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: AreaFindManyArgs
  ): Promise<Area[]> {
    const results = await this.service.findAreas(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Award], { name: "awards" })
  async findAwards(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: AwardFindManyArgs
  ): Promise<Award[]> {
    const results = await this.service.findAwards(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CommitteeService], { name: "committeeService" })
  async findCommitteeService(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: CommitteeServiceFindManyArgs
  ): Promise<CommitteeService[]> {
    const results = await this.service.findCommitteeService(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [DegreeStatus], { name: "degreeStatus" })
  async findDegreeStatus(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: DegreeStatusFindManyArgs
  ): Promise<DegreeStatus[]> {
    const results = await this.service.findDegreeStatus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Employment], { name: "employment" })
  async findEmployment(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: EmploymentFindManyArgs
  ): Promise<Employment[]> {
    const results = await this.service.findEmployment(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [EvaluationLetter], { name: "evaluationLetters" })
  async findEvaluationLetters(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: EvaluationLetterFindManyArgs
  ): Promise<EvaluationLetter[]> {
    const results = await this.service.findEvaluationLetters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ExpNeuroReq], { name: "expNeuroReq" })
  async findExpNeuroReq(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: ExpNeuroReqFindManyArgs
  ): Promise<ExpNeuroReq[]> {
    const results = await this.service.findExpNeuroReq(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Fellowship], { name: "fellowships" })
  async findFellowships(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: FellowshipFindManyArgs
  ): Promise<Fellowship[]> {
    const results = await this.service.findFellowships(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Funding], { name: "funding" })
  async findFunding(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: FundingFindManyArgs
  ): Promise<Funding[]> {
    const results = await this.service.findFunding(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [GeneralDatum], { name: "generalData" })
  async findGeneralData(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: GeneralDatumFindManyArgs
  ): Promise<GeneralDatum[]> {
    const results = await this.service.findGeneralData(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Internship], { name: "internships" })
  async findInternships(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: InternshipFindManyArgs
  ): Promise<Internship[]> {
    const results = await this.service.findInternships(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InternshipsCd], { name: "internshipsCds" })
  async findInternshipsCds(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: InternshipsCdFindManyArgs
  ): Promise<InternshipsCd[]> {
    const results = await this.service.findInternshipsCds(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InternshipsIni], { name: "internshipsIni" })
  async findInternshipsIni(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: InternshipsIniFindManyArgs
  ): Promise<InternshipsIni[]> {
    const results = await this.service.findInternshipsIni(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [InternshipsIsrm], { name: "internshipsIsrms" })
  async findInternshipsIsrms(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: InternshipsIsrmFindManyArgs
  ): Promise<InternshipsIsrm[]> {
    const results = await this.service.findInternshipsIsrms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Interview], { name: "interview" })
  async findInterview(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: InterviewFindManyArgs
  ): Promise<Interview[]> {
    const results = await this.service.findInterview(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Ita], { name: "ita" })
  async findIta(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: ItaFindManyArgs
  ): Promise<Ita[]> {
    const results = await this.service.findIta(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [LegacyRequirement], {
    name: "legacyRequirements",
  })
  async findLegacyRequirements(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: LegacyRequirementFindManyArgs
  ): Promise<LegacyRequirement[]> {
    const results = await this.service.findLegacyRequirements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Note], { name: "notes" })
  async findNotes(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: NoteFindManyArgs
  ): Promise<Note[]> {
    const results = await this.service.findNotes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Practicum], { name: "practicum" })
  async findPracticum(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: PracticumFindManyArgs
  ): Promise<Practicum[]> {
    const results = await this.service.findPracticum(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Presentation], { name: "presentations" })
  async findPresentations(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: PresentationFindManyArgs
  ): Promise<Presentation[]> {
    const results = await this.service.findPresentations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProgramStatus], { name: "programStatus" })
  async findProgramStatus(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: ProgramStatusFindManyArgs
  ): Promise<ProgramStatus[]> {
    const results = await this.service.findProgramStatus(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ProjectTopic], { name: "projectTopic" })
  async findProjectTopic(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: ProjectTopicFindManyArgs
  ): Promise<ProjectTopic[]> {
    const results = await this.service.findProjectTopic(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [QualsCommittee], { name: "qualsCommittee" })
  async findQualsCommittee(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: QualsCommitteeFindManyArgs
  ): Promise<QualsCommittee[]> {
    const results = await this.service.findQualsCommittee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Rotation], { name: "rotations" })
  async findRotations(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: RotationFindManyArgs
  ): Promise<Rotation[]> {
    const results = await this.service.findRotations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [Statement], { name: "statements" })
  async findStatements(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StatementFindManyArgs
  ): Promise<Statement[]> {
    const results = await this.service.findStatements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentAdvisor], { name: "studentAdvisors" })
  async findStudentAdvisors(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentAdvisorFindManyArgs
  ): Promise<StudentAdvisor[]> {
    const results = await this.service.findStudentAdvisors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentApp], { name: "studentApps" })
  async findStudentApps(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentAppFindManyArgs
  ): Promise<StudentApp[]> {
    const results = await this.service.findStudentApps(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentDataHcii], { name: "studentDataHcii" })
  async findStudentDataHcii(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentDataHciiFindManyArgs
  ): Promise<StudentDataHcii[]> {
    const results = await this.service.findStudentDataHcii(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentDataIni], { name: "studentDataIni" })
  async findStudentDataIni(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentDataIniFindManyArgs
  ): Promise<StudentDataIni[]> {
    const results = await this.service.findStudentDataIni(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentDataMl], { name: "studentDataMl" })
  async findStudentDataMl(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentDataMlFindManyArgs
  ): Promise<StudentDataMl[]> {
    const results = await this.service.findStudentDataMl(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentFile], { name: "studentFiles" })
  async findStudentFiles(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentFileFindManyArgs
  ): Promise<StudentFile[]> {
    const results = await this.service.findStudentFiles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentInstitute], { name: "studentInstitutes" })
  async findStudentInstitutes(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentInstituteFindManyArgs
  ): Promise<StudentInstitute[]> {
    const results = await this.service.findStudentInstitutes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentMentor], { name: "studentMentors" })
  async findStudentMentors(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentMentorFindManyArgs
  ): Promise<StudentMentor[]> {
    const results = await this.service.findStudentMentors(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentOverride], { name: "studentOverrides" })
  async findStudentOverrides(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentOverrideFindManyArgs
  ): Promise<StudentOverride[]> {
    const results = await this.service.findStudentOverrides(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentPub], { name: "studentPubs" })
  async findStudentPubs(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentPubFindManyArgs
  ): Promise<StudentPub[]> {
    const results = await this.service.findStudentPubs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentResidency], { name: "studentResidency" })
  async findStudentResidency(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentResidencyFindManyArgs
  ): Promise<StudentResidency[]> {
    const results = await this.service.findStudentResidency(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [StudentSkill], { name: "studentSkills" })
  async findStudentSkills(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: StudentSkillFindManyArgs
  ): Promise<StudentSkill[]> {
    const results = await this.service.findStudentSkills(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [TeachingReq], { name: "teachingReq" })
  async findTeachingReq(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: TeachingReqFindManyArgs
  ): Promise<TeachingReq[]> {
    const results = await this.service.findTeachingReq(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ThesisCommittee], { name: "thesisCommittee" })
  async findThesisCommittee(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: ThesisCommitteeFindManyArgs
  ): Promise<ThesisCommittee[]> {
    const results = await this.service.findThesisCommittee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [ThesisTopic], { name: "thesisTopic" })
  async findThesisTopic(
    @graphql.Parent() parent: StudentDatum,
    @graphql.Args() args: ThesisTopicFindManyArgs
  ): Promise<ThesisTopic[]> {
    const results = await this.service.findThesisTopic(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => StudentDataRi, {
    nullable: true,
    name: "studentDataRi",
  })
  async getStudentDataRi(
    @graphql.Parent() parent: StudentDatum
  ): Promise<StudentDataRi | null> {
    const result = await this.service.getStudentDataRi(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserRole, {
    nullable: true,
    name: "userRole",
  })
  async getUserRole(
    @graphql.Parent() parent: StudentDatum
  ): Promise<UserRole | null> {
    const result = await this.service.getUserRole(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
