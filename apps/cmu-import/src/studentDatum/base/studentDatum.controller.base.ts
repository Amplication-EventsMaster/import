/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDatumService } from "../studentDatum.service";
import { StudentDatumCreateInput } from "./StudentDatumCreateInput";
import { StudentDatum } from "./StudentDatum";
import { StudentDatumFindManyArgs } from "./StudentDatumFindManyArgs";
import { StudentDatumWhereUniqueInput } from "./StudentDatumWhereUniqueInput";
import { StudentDatumUpdateInput } from "./StudentDatumUpdateInput";
import { AdvisorFindManyArgs } from "../../advisor/base/AdvisorFindManyArgs";
import { Advisor } from "../../advisor/base/Advisor";
import { AdvisorWhereUniqueInput } from "../../advisor/base/AdvisorWhereUniqueInput";
import { AreaFindManyArgs } from "../../area/base/AreaFindManyArgs";
import { Area } from "../../area/base/Area";
import { AreaWhereUniqueInput } from "../../area/base/AreaWhereUniqueInput";
import { AwardFindManyArgs } from "../../award/base/AwardFindManyArgs";
import { Award } from "../../award/base/Award";
import { AwardWhereUniqueInput } from "../../award/base/AwardWhereUniqueInput";
import { CommitteeServiceFindManyArgs } from "../../committeeService/base/CommitteeServiceFindManyArgs";
import { CommitteeService } from "../../committeeService/base/CommitteeService";
import { CommitteeServiceWhereUniqueInput } from "../../committeeService/base/CommitteeServiceWhereUniqueInput";
import { DegreeStatusFindManyArgs } from "../../degreeStatus/base/DegreeStatusFindManyArgs";
import { DegreeStatus } from "../../degreeStatus/base/DegreeStatus";
import { DegreeStatusWhereUniqueInput } from "../../degreeStatus/base/DegreeStatusWhereUniqueInput";
import { EmploymentFindManyArgs } from "../../employment/base/EmploymentFindManyArgs";
import { Employment } from "../../employment/base/Employment";
import { EmploymentWhereUniqueInput } from "../../employment/base/EmploymentWhereUniqueInput";
import { EvaluationLetterFindManyArgs } from "../../evaluationLetter/base/EvaluationLetterFindManyArgs";
import { EvaluationLetter } from "../../evaluationLetter/base/EvaluationLetter";
import { EvaluationLetterWhereUniqueInput } from "../../evaluationLetter/base/EvaluationLetterWhereUniqueInput";
import { ExpNeuroReqFindManyArgs } from "../../expNeuroReq/base/ExpNeuroReqFindManyArgs";
import { ExpNeuroReq } from "../../expNeuroReq/base/ExpNeuroReq";
import { ExpNeuroReqWhereUniqueInput } from "../../expNeuroReq/base/ExpNeuroReqWhereUniqueInput";
import { FellowshipFindManyArgs } from "../../fellowship/base/FellowshipFindManyArgs";
import { Fellowship } from "../../fellowship/base/Fellowship";
import { FellowshipWhereUniqueInput } from "../../fellowship/base/FellowshipWhereUniqueInput";
import { FundingFindManyArgs } from "../../funding/base/FundingFindManyArgs";
import { Funding } from "../../funding/base/Funding";
import { FundingWhereUniqueInput } from "../../funding/base/FundingWhereUniqueInput";
import { GeneralDatumFindManyArgs } from "../../generalDatum/base/GeneralDatumFindManyArgs";
import { GeneralDatum } from "../../generalDatum/base/GeneralDatum";
import { GeneralDatumWhereUniqueInput } from "../../generalDatum/base/GeneralDatumWhereUniqueInput";
import { InternshipFindManyArgs } from "../../internship/base/InternshipFindManyArgs";
import { Internship } from "../../internship/base/Internship";
import { InternshipWhereUniqueInput } from "../../internship/base/InternshipWhereUniqueInput";
import { InternshipsCdFindManyArgs } from "../../internshipsCd/base/InternshipsCdFindManyArgs";
import { InternshipsCd } from "../../internshipsCd/base/InternshipsCd";
import { InternshipsCdWhereUniqueInput } from "../../internshipsCd/base/InternshipsCdWhereUniqueInput";
import { InternshipsIniFindManyArgs } from "../../internshipsIni/base/InternshipsIniFindManyArgs";
import { InternshipsIni } from "../../internshipsIni/base/InternshipsIni";
import { InternshipsIniWhereUniqueInput } from "../../internshipsIni/base/InternshipsIniWhereUniqueInput";
import { InternshipsIsrmFindManyArgs } from "../../internshipsIsrm/base/InternshipsIsrmFindManyArgs";
import { InternshipsIsrm } from "../../internshipsIsrm/base/InternshipsIsrm";
import { InternshipsIsrmWhereUniqueInput } from "../../internshipsIsrm/base/InternshipsIsrmWhereUniqueInput";
import { InterviewFindManyArgs } from "../../interview/base/InterviewFindManyArgs";
import { Interview } from "../../interview/base/Interview";
import { InterviewWhereUniqueInput } from "../../interview/base/InterviewWhereUniqueInput";
import { ItaFindManyArgs } from "../../ita/base/ItaFindManyArgs";
import { Ita } from "../../ita/base/Ita";
import { ItaWhereUniqueInput } from "../../ita/base/ItaWhereUniqueInput";
import { LegacyRequirementFindManyArgs } from "../../legacyRequirement/base/LegacyRequirementFindManyArgs";
import { LegacyRequirement } from "../../legacyRequirement/base/LegacyRequirement";
import { LegacyRequirementWhereUniqueInput } from "../../legacyRequirement/base/LegacyRequirementWhereUniqueInput";
import { NoteFindManyArgs } from "../../note/base/NoteFindManyArgs";
import { Note } from "../../note/base/Note";
import { NoteWhereUniqueInput } from "../../note/base/NoteWhereUniqueInput";
import { PracticumFindManyArgs } from "../../practicum/base/PracticumFindManyArgs";
import { Practicum } from "../../practicum/base/Practicum";
import { PracticumWhereUniqueInput } from "../../practicum/base/PracticumWhereUniqueInput";
import { PresentationFindManyArgs } from "../../presentation/base/PresentationFindManyArgs";
import { Presentation } from "../../presentation/base/Presentation";
import { PresentationWhereUniqueInput } from "../../presentation/base/PresentationWhereUniqueInput";
import { ProgramStatusFindManyArgs } from "../../programStatus/base/ProgramStatusFindManyArgs";
import { ProgramStatus } from "../../programStatus/base/ProgramStatus";
import { ProgramStatusWhereUniqueInput } from "../../programStatus/base/ProgramStatusWhereUniqueInput";
import { ProjectTopicFindManyArgs } from "../../projectTopic/base/ProjectTopicFindManyArgs";
import { ProjectTopic } from "../../projectTopic/base/ProjectTopic";
import { ProjectTopicWhereUniqueInput } from "../../projectTopic/base/ProjectTopicWhereUniqueInput";
import { QualsCommitteeFindManyArgs } from "../../qualsCommittee/base/QualsCommitteeFindManyArgs";
import { QualsCommittee } from "../../qualsCommittee/base/QualsCommittee";
import { QualsCommitteeWhereUniqueInput } from "../../qualsCommittee/base/QualsCommitteeWhereUniqueInput";
import { RotationFindManyArgs } from "../../rotation/base/RotationFindManyArgs";
import { Rotation } from "../../rotation/base/Rotation";
import { RotationWhereUniqueInput } from "../../rotation/base/RotationWhereUniqueInput";
import { StatementFindManyArgs } from "../../statement/base/StatementFindManyArgs";
import { Statement } from "../../statement/base/Statement";
import { StatementWhereUniqueInput } from "../../statement/base/StatementWhereUniqueInput";
import { StudentAdvisorFindManyArgs } from "../../studentAdvisor/base/StudentAdvisorFindManyArgs";
import { StudentAdvisor } from "../../studentAdvisor/base/StudentAdvisor";
import { StudentAdvisorWhereUniqueInput } from "../../studentAdvisor/base/StudentAdvisorWhereUniqueInput";
import { StudentAppFindManyArgs } from "../../studentApp/base/StudentAppFindManyArgs";
import { StudentApp } from "../../studentApp/base/StudentApp";
import { StudentAppWhereUniqueInput } from "../../studentApp/base/StudentAppWhereUniqueInput";
import { StudentDataHciiFindManyArgs } from "../../studentDataHcii/base/StudentDataHciiFindManyArgs";
import { StudentDataHcii } from "../../studentDataHcii/base/StudentDataHcii";
import { StudentDataHciiWhereUniqueInput } from "../../studentDataHcii/base/StudentDataHciiWhereUniqueInput";
import { StudentDataIniFindManyArgs } from "../../studentDataIni/base/StudentDataIniFindManyArgs";
import { StudentDataIni } from "../../studentDataIni/base/StudentDataIni";
import { StudentDataIniWhereUniqueInput } from "../../studentDataIni/base/StudentDataIniWhereUniqueInput";
import { StudentDataMlFindManyArgs } from "../../studentDataMl/base/StudentDataMlFindManyArgs";
import { StudentDataMl } from "../../studentDataMl/base/StudentDataMl";
import { StudentDataMlWhereUniqueInput } from "../../studentDataMl/base/StudentDataMlWhereUniqueInput";
import { StudentFileFindManyArgs } from "../../studentFile/base/StudentFileFindManyArgs";
import { StudentFile } from "../../studentFile/base/StudentFile";
import { StudentFileWhereUniqueInput } from "../../studentFile/base/StudentFileWhereUniqueInput";
import { StudentInstituteFindManyArgs } from "../../studentInstitute/base/StudentInstituteFindManyArgs";
import { StudentInstitute } from "../../studentInstitute/base/StudentInstitute";
import { StudentInstituteWhereUniqueInput } from "../../studentInstitute/base/StudentInstituteWhereUniqueInput";
import { StudentMentorFindManyArgs } from "../../studentMentor/base/StudentMentorFindManyArgs";
import { StudentMentor } from "../../studentMentor/base/StudentMentor";
import { StudentMentorWhereUniqueInput } from "../../studentMentor/base/StudentMentorWhereUniqueInput";
import { StudentOverrideFindManyArgs } from "../../studentOverride/base/StudentOverrideFindManyArgs";
import { StudentOverride } from "../../studentOverride/base/StudentOverride";
import { StudentOverrideWhereUniqueInput } from "../../studentOverride/base/StudentOverrideWhereUniqueInput";
import { StudentPubFindManyArgs } from "../../studentPub/base/StudentPubFindManyArgs";
import { StudentPub } from "../../studentPub/base/StudentPub";
import { StudentPubWhereUniqueInput } from "../../studentPub/base/StudentPubWhereUniqueInput";
import { StudentResidencyFindManyArgs } from "../../studentResidency/base/StudentResidencyFindManyArgs";
import { StudentResidency } from "../../studentResidency/base/StudentResidency";
import { StudentResidencyWhereUniqueInput } from "../../studentResidency/base/StudentResidencyWhereUniqueInput";
import { StudentSkillFindManyArgs } from "../../studentSkill/base/StudentSkillFindManyArgs";
import { StudentSkill } from "../../studentSkill/base/StudentSkill";
import { StudentSkillWhereUniqueInput } from "../../studentSkill/base/StudentSkillWhereUniqueInput";
import { TeachingReqFindManyArgs } from "../../teachingReq/base/TeachingReqFindManyArgs";
import { TeachingReq } from "../../teachingReq/base/TeachingReq";
import { TeachingReqWhereUniqueInput } from "../../teachingReq/base/TeachingReqWhereUniqueInput";
import { ThesisCommitteeFindManyArgs } from "../../thesisCommittee/base/ThesisCommitteeFindManyArgs";
import { ThesisCommittee } from "../../thesisCommittee/base/ThesisCommittee";
import { ThesisCommitteeWhereUniqueInput } from "../../thesisCommittee/base/ThesisCommitteeWhereUniqueInput";
import { ThesisTopicFindManyArgs } from "../../thesisTopic/base/ThesisTopicFindManyArgs";
import { ThesisTopic } from "../../thesisTopic/base/ThesisTopic";
import { ThesisTopicWhereUniqueInput } from "../../thesisTopic/base/ThesisTopicWhereUniqueInput";

export class StudentDatumControllerBase {
  constructor(protected readonly service: StudentDatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDatum })
  async createStudentDatum(
    @common.Body() data: StudentDatumCreateInput
  ): Promise<StudentDatum> {
    return await this.service.createStudentDatum({
      data: {
        ...data,

        studentDataRi: data.studentDataRi
          ? {
              connect: data.studentDataRi,
            }
          : undefined,

        userRole: data.userRole
          ? {
              connect: data.userRole,
            }
          : undefined,
      },
      select: {
        area: true,
        citizenship: true,
        curriculum: true,
        degree: true,
        department: true,
        enterDate: true,
        gender: true,
        guid: true,
        id: true,
        institutesId: true,
        institutesName: true,
        mltSwitch: true,
        parttime: true,
        program: true,
        residency: true,
        status: true,
        statusDate: true,

        studentDataRi: {
          select: {
            id: true,
          },
        },

        undergrad: true,

        userRole: {
          select: {
            id: true,
          },
        },

        year: true,
        yearAdjust: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDatum] })
  @ApiNestedQuery(StudentDatumFindManyArgs)
  async studentData(@common.Req() request: Request): Promise<StudentDatum[]> {
    const args = plainToClass(StudentDatumFindManyArgs, request.query);
    return this.service.studentData({
      ...args,
      select: {
        area: true,
        citizenship: true,
        curriculum: true,
        degree: true,
        department: true,
        enterDate: true,
        gender: true,
        guid: true,
        id: true,
        institutesId: true,
        institutesName: true,
        mltSwitch: true,
        parttime: true,
        program: true,
        residency: true,
        status: true,
        statusDate: true,

        studentDataRi: {
          select: {
            id: true,
          },
        },

        undergrad: true,

        userRole: {
          select: {
            id: true,
          },
        },

        year: true,
        yearAdjust: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDatum(
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentDatum | null> {
    const result = await this.service.studentDatum({
      where: params,
      select: {
        area: true,
        citizenship: true,
        curriculum: true,
        degree: true,
        department: true,
        enterDate: true,
        gender: true,
        guid: true,
        id: true,
        institutesId: true,
        institutesName: true,
        mltSwitch: true,
        parttime: true,
        program: true,
        residency: true,
        status: true,
        statusDate: true,

        studentDataRi: {
          select: {
            id: true,
          },
        },

        undergrad: true,

        userRole: {
          select: {
            id: true,
          },
        },

        year: true,
        yearAdjust: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDatum(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() data: StudentDatumUpdateInput
  ): Promise<StudentDatum | null> {
    try {
      return await this.service.updateStudentDatum({
        where: params,
        data: {
          ...data,

          studentDataRi: data.studentDataRi
            ? {
                connect: data.studentDataRi,
              }
            : undefined,

          userRole: data.userRole
            ? {
                connect: data.userRole,
              }
            : undefined,
        },
        select: {
          area: true,
          citizenship: true,
          curriculum: true,
          degree: true,
          department: true,
          enterDate: true,
          gender: true,
          guid: true,
          id: true,
          institutesId: true,
          institutesName: true,
          mltSwitch: true,
          parttime: true,
          program: true,
          residency: true,
          status: true,
          statusDate: true,

          studentDataRi: {
            select: {
              id: true,
            },
          },

          undergrad: true,

          userRole: {
            select: {
              id: true,
            },
          },

          year: true,
          yearAdjust: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDatum(
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentDatum | null> {
    try {
      return await this.service.deleteStudentDatum({
        where: params,
        select: {
          area: true,
          citizenship: true,
          curriculum: true,
          degree: true,
          department: true,
          enterDate: true,
          gender: true,
          guid: true,
          id: true,
          institutesId: true,
          institutesName: true,
          mltSwitch: true,
          parttime: true,
          program: true,
          residency: true,
          status: true,
          statusDate: true,

          studentDataRi: {
            select: {
              id: true,
            },
          },

          undergrad: true,

          userRole: {
            select: {
              id: true,
            },
          },

          year: true,
          yearAdjust: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/advisors")
  @ApiNestedQuery(AdvisorFindManyArgs)
  async findAdvisors(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Advisor[]> {
    const query = plainToClass(AdvisorFindManyArgs, request.query);
    const results = await this.service.findAdvisors(params.id, {
      ...query,
      select: {
        date: true,
        facultyId: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/advisors")
  async connectAdvisors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      advisors: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/advisors")
  async updateAdvisors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      advisors: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/advisors")
  async disconnectAdvisors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      advisors: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/areas")
  @ApiNestedQuery(AreaFindManyArgs)
  async findAreas(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Area[]> {
    const query = plainToClass(AreaFindManyArgs, request.query);
    const results = await this.service.findAreas(params.id, {
      ...query,
      select: {
        arank: true,
        area: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/areas")
  async connectAreas(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areas: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/areas")
  async updateAreas(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areas: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/areas")
  async disconnectAreas(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AreaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      areas: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/awards")
  @ApiNestedQuery(AwardFindManyArgs)
  async findAwards(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Award[]> {
    const query = plainToClass(AwardFindManyArgs, request.query);
    const results = await this.service.findAwards(params.id, {
      ...query,
      select: {
        awardDate: true,
        awardName: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/awards")
  async connectAwards(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      awards: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/awards")
  async updateAwards(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      awards: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/awards")
  async disconnectAwards(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: AwardWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      awards: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/committeeService")
  @ApiNestedQuery(CommitteeServiceFindManyArgs)
  async findCommitteeService(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<CommitteeService[]> {
    const query = plainToClass(CommitteeServiceFindManyArgs, request.query);
    const results = await this.service.findCommitteeService(params.id, {
      ...query,
      select: {
        committeeName: true,
        endDate: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/committeeService")
  async connectCommitteeService(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: CommitteeServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      committeeService: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/committeeService")
  async updateCommitteeService(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: CommitteeServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      committeeService: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/committeeService")
  async disconnectCommitteeService(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: CommitteeServiceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      committeeService: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/degreeStatus")
  @ApiNestedQuery(DegreeStatusFindManyArgs)
  async findDegreeStatus(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<DegreeStatus[]> {
    const query = plainToClass(DegreeStatusFindManyArgs, request.query);
    const results = await this.service.findDegreeStatus(params.id, {
      ...query,
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/degreeStatus")
  async connectDegreeStatus(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: DegreeStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      degreeStatus: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/degreeStatus")
  async updateDegreeStatus(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: DegreeStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      degreeStatus: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/degreeStatus")
  async disconnectDegreeStatus(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: DegreeStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      degreeStatus: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/employment")
  @ApiNestedQuery(EmploymentFindManyArgs)
  async findEmployment(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Employment[]> {
    const query = plainToClass(EmploymentFindManyArgs, request.query);
    const results = await this.service.findEmployment(params.id, {
      ...query,
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        date: true,
        email: true,
        employer: true,
        id: true,
        phone: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        typeField: true,
        zip: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employment")
  async connectEmployment(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: EmploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employment: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employment")
  async updateEmployment(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: EmploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employment: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employment")
  async disconnectEmployment(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: EmploymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employment: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/evaluationLetters")
  @ApiNestedQuery(EvaluationLetterFindManyArgs)
  async findEvaluationLetters(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<EvaluationLetter[]> {
    const query = plainToClass(EvaluationLetterFindManyArgs, request.query);
    const results = await this.service.findEvaluationLetters(params.id, {
      ...query,
      select: {
        date: true,
        documentId: true,
        id: true,
        performanceCode: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        student_read: true,
        text: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/evaluationLetters")
  async connectEvaluationLetters(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: EvaluationLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      evaluationLetters: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/evaluationLetters")
  async updateEvaluationLetters(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: EvaluationLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      evaluationLetters: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/evaluationLetters")
  async disconnectEvaluationLetters(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: EvaluationLetterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      evaluationLetters: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/expNeuroReq")
  @ApiNestedQuery(ExpNeuroReqFindManyArgs)
  async findExpNeuroReq(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<ExpNeuroReq[]> {
    const query = plainToClass(ExpNeuroReqFindManyArgs, request.query);
    const results = await this.service.findExpNeuroReq(params.id, {
      ...query,
      select: {
        complete: true,
        date: true,
        departmentCode: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/expNeuroReq")
  async connectExpNeuroReq(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ExpNeuroReqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expNeuroReq: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/expNeuroReq")
  async updateExpNeuroReq(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ExpNeuroReqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expNeuroReq: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/expNeuroReq")
  async disconnectExpNeuroReq(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ExpNeuroReqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      expNeuroReq: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/fellowships")
  @ApiNestedQuery(FellowshipFindManyArgs)
  async findFellowships(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Fellowship[]> {
    const query = plainToClass(FellowshipFindManyArgs, request.query);
    const results = await this.service.findFellowships(params.id, {
      ...query,
      select: {
        amount: true,
        amountSemester: true,
        beginDate: true,
        duration: true,
        endDate: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fellowships")
  async connectFellowships(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: FellowshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fellowships: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fellowships")
  async updateFellowships(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: FellowshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fellowships: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fellowships")
  async disconnectFellowships(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: FellowshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fellowships: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/funding")
  @ApiNestedQuery(FundingFindManyArgs)
  async findFunding(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Funding[]> {
    const query = plainToClass(FundingFindManyArgs, request.query);
    const results = await this.service.findFunding(params.id, {
      ...query,
      select: {
        fundingDate: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/funding")
  async connectFunding(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: FundingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      funding: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/funding")
  async updateFunding(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: FundingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      funding: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/funding")
  async disconnectFunding(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: FundingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      funding: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/generalData")
  @ApiNestedQuery(GeneralDatumFindManyArgs)
  async findGeneralData(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<GeneralDatum[]> {
    const query = plainToClass(GeneralDatumFindManyArgs, request.query);
    const results = await this.service.findGeneralData(params.id, {
      ...query,
      select: {
        date: true,
        date2: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        text: true,
        val: true,
        val2: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/generalData")
  async connectGeneralData(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: GeneralDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generalData: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/generalData")
  async updateGeneralData(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: GeneralDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generalData: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/generalData")
  async disconnectGeneralData(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: GeneralDatumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      generalData: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/internships")
  @ApiNestedQuery(InternshipFindManyArgs)
  async findInternships(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Internship[]> {
    const query = plainToClass(InternshipFindManyArgs, request.query);
    const results = await this.service.findInternships(params.id, {
      ...query,
      select: {
        company: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/internships")
  async connectInternships(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internships: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/internships")
  async updateInternships(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internships: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/internships")
  async disconnectInternships(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internships: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/internshipsCds")
  @ApiNestedQuery(InternshipsCdFindManyArgs)
  async findInternshipsCds(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<InternshipsCd[]> {
    const query = plainToClass(InternshipsCdFindManyArgs, request.query);
    const results = await this.service.findInternshipsCds(params.id, {
      ...query,
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/internshipsCds")
  async connectInternshipsCds(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsCdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsCds: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/internshipsCds")
  async updateInternshipsCds(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsCdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsCds: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/internshipsCds")
  async disconnectInternshipsCds(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsCdWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsCds: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/internshipsIni")
  @ApiNestedQuery(InternshipsIniFindManyArgs)
  async findInternshipsIni(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<InternshipsIni[]> {
    const query = plainToClass(InternshipsIniFindManyArgs, request.query);
    const results = await this.service.findInternshipsIni(params.id, {
      ...query,
      select: {
        city: true,
        company: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/internshipsIni")
  async connectInternshipsIni(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsIniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsIni: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/internshipsIni")
  async updateInternshipsIni(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsIniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsIni: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/internshipsIni")
  async disconnectInternshipsIni(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsIniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsIni: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/internshipsIsrms")
  @ApiNestedQuery(InternshipsIsrmFindManyArgs)
  async findInternshipsIsrms(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<InternshipsIsrm[]> {
    const query = plainToClass(InternshipsIsrmFindManyArgs, request.query);
    const results = await this.service.findInternshipsIsrms(params.id, {
      ...query,
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/internshipsIsrms")
  async connectInternshipsIsrms(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsIsrmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsIsrms: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/internshipsIsrms")
  async updateInternshipsIsrms(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsIsrmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsIsrms: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/internshipsIsrms")
  async disconnectInternshipsIsrms(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InternshipsIsrmWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      internshipsIsrms: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/interview")
  @ApiNestedQuery(InterviewFindManyArgs)
  async findInterview(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Interview[]> {
    const query = plainToClass(InterviewFindManyArgs, request.query);
    const results = await this.service.findInterview(params.id, {
      ...query,
      select: {
        date: true,
        employer: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        typeField: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/interview")
  async connectInterview(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interview: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/interview")
  async updateInterview(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interview: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/interview")
  async disconnectInterview(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: InterviewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      interview: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/ita")
  @ApiNestedQuery(ItaFindManyArgs)
  async findIta(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Ita[]> {
    const query = plainToClass(ItaFindManyArgs, request.query);
    const results = await this.service.findIta(params.id, {
      ...query,
      select: {
        date: true,
        id: true,
        score: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/ita")
  async connectIta(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ItaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ita: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/ita")
  async updateIta(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ItaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ita: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/ita")
  async disconnectIta(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ItaWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      ita: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/legacyRequirements")
  @ApiNestedQuery(LegacyRequirementFindManyArgs)
  async findLegacyRequirements(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<LegacyRequirement[]> {
    const query = plainToClass(LegacyRequirementFindManyArgs, request.query);
    const results = await this.service.findLegacyRequirements(params.id, {
      ...query,
      select: {
        course: true,
        id: true,
        requirementTitle: true,
        requirementType: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/legacyRequirements")
  async connectLegacyRequirements(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: LegacyRequirementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      legacyRequirements: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/legacyRequirements")
  async updateLegacyRequirements(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: LegacyRequirementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      legacyRequirements: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/legacyRequirements")
  async disconnectLegacyRequirements(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: LegacyRequirementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      legacyRequirements: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/notes")
  @ApiNestedQuery(NoteFindManyArgs)
  async findNotes(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Note[]> {
    const query = plainToClass(NoteFindManyArgs, request.query);
    const results = await this.service.findNotes(params.id, {
      ...query,
      select: {
        date: true,
        id: true,
        note_type: true,

        studentData: {
          select: {
            id: true,
          },
        },

        text: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/notes")
  async connectNotes(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: NoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notes: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/notes")
  async updateNotes(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: NoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notes: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/notes")
  async disconnectNotes(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: NoteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      notes: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/practicum")
  @ApiNestedQuery(PracticumFindManyArgs)
  async findPracticum(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Practicum[]> {
    const query = plainToClass(PracticumFindManyArgs, request.query);
    const results = await this.service.findPracticum(params.id, {
      ...query,
      select: {
        date: true,
        id: true,
        pracType: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/practicum")
  async connectPracticum(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: PracticumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      practicum: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/practicum")
  async updatePracticum(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: PracticumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      practicum: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/practicum")
  async disconnectPracticum(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: PracticumWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      practicum: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/presentations")
  @ApiNestedQuery(PresentationFindManyArgs)
  async findPresentations(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Presentation[]> {
    const query = plainToClass(PresentationFindManyArgs, request.query);
    const results = await this.service.findPresentations(params.id, {
      ...query,
      select: {
        date: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/presentations")
  async connectPresentations(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: PresentationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      presentations: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/presentations")
  async updatePresentations(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: PresentationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      presentations: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/presentations")
  async disconnectPresentations(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: PresentationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      presentations: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/programStatus")
  @ApiNestedQuery(ProgramStatusFindManyArgs)
  async findProgramStatus(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<ProgramStatus[]> {
    const query = plainToClass(ProgramStatusFindManyArgs, request.query);
    const results = await this.service.findProgramStatus(params.id, {
      ...query,
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/programStatus")
  async connectProgramStatus(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ProgramStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programStatus: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/programStatus")
  async updateProgramStatus(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ProgramStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programStatus: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/programStatus")
  async disconnectProgramStatus(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ProgramStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      programStatus: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/projectTopic")
  @ApiNestedQuery(ProjectTopicFindManyArgs)
  async findProjectTopic(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<ProjectTopic[]> {
    const query = plainToClass(ProjectTopicFindManyArgs, request.query);
    const results = await this.service.findProjectTopic(params.id, {
      ...query,
      select: {
        area: true,
        clientName: true,
        date: true,
        id: true,
        notes: true,

        studentData: {
          select: {
            id: true,
          },
        },

        teamName: true,
        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/projectTopic")
  async connectProjectTopic(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ProjectTopicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectTopic: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/projectTopic")
  async updateProjectTopic(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ProjectTopicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectTopic: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/projectTopic")
  async disconnectProjectTopic(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ProjectTopicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      projectTopic: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/qualsCommittee")
  @ApiNestedQuery(QualsCommitteeFindManyArgs)
  async findQualsCommittee(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<QualsCommittee[]> {
    const query = plainToClass(QualsCommitteeFindManyArgs, request.query);
    const results = await this.service.findQualsCommittee(params.id, {
      ...query,
      select: {
        id: true,
        memberType: true,
        overrideResearch: true,
        overrideSpeaking: true,
        overrideWriting: true,

        studentData: {
          select: {
            id: true,
          },
        },

        urId: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/qualsCommittee")
  async connectQualsCommittee(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: QualsCommitteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qualsCommittee: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/qualsCommittee")
  async updateQualsCommittee(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: QualsCommitteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qualsCommittee: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/qualsCommittee")
  async disconnectQualsCommittee(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: QualsCommitteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      qualsCommittee: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/rotations")
  @ApiNestedQuery(RotationFindManyArgs)
  async findRotations(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Rotation[]> {
    const query = plainToClass(RotationFindManyArgs, request.query);
    const results = await this.service.findRotations(params.id, {
      ...query,
      select: {
        comment: true,
        endDate: true,
        facultyId: true,
        id: true,
        sfId: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/rotations")
  async connectRotations(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: RotationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rotations: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/rotations")
  async updateRotations(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: RotationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rotations: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/rotations")
  async disconnectRotations(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: RotationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      rotations: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/statements")
  @ApiNestedQuery(StatementFindManyArgs)
  async findStatements(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<Statement[]> {
    const query = plainToClass(StatementFindManyArgs, request.query);
    const results = await this.service.findStatements(params.id, {
      ...query,
      select: {
        createdDate: true,
        date: true,
        documentId: true,
        id: true,
        modifiedDate: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        text: true,
        textAll: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/statements")
  async connectStatements(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StatementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statements: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/statements")
  async updateStatements(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StatementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statements: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/statements")
  async disconnectStatements(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StatementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      statements: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentAdvisors")
  @ApiNestedQuery(StudentAdvisorFindManyArgs)
  async findStudentAdvisors(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentAdvisor[]> {
    const query = plainToClass(StudentAdvisorFindManyArgs, request.query);
    const results = await this.service.findStudentAdvisors(params.id, {
      ...query,
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentAdvisors")
  async connectStudentAdvisors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentAdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAdvisors: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentAdvisors")
  async updateStudentAdvisors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentAdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAdvisors: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentAdvisors")
  async disconnectStudentAdvisors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentAdvisorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentAdvisors: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentApps")
  @ApiNestedQuery(StudentAppFindManyArgs)
  async findStudentApps(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentApp[]> {
    const query = plainToClass(StudentAppFindManyArgs, request.query);
    const results = await this.service.findStudentApps(params.id, {
      ...query,
      select: {
        appId: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentApps")
  async connectStudentApps(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentAppWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentApps: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentApps")
  async updateStudentApps(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentAppWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentApps: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentApps")
  async disconnectStudentApps(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentAppWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentApps: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentDataHcii")
  @ApiNestedQuery(StudentDataHciiFindManyArgs)
  async findStudentDataHcii(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentDataHcii[]> {
    const query = plainToClass(StudentDataHciiFindManyArgs, request.query);
    const results = await this.service.findStudentDataHcii(params.id, {
      ...query,
      select: {
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        uploadDate: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentDataHcii")
  async connectStudentDataHcii(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataHciiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataHcii: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentDataHcii")
  async updateStudentDataHcii(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataHciiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataHcii: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentDataHcii")
  async disconnectStudentDataHcii(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataHciiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataHcii: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentDataIni")
  @ApiNestedQuery(StudentDataIniFindManyArgs)
  async findStudentDataIni(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentDataIni[]> {
    const query = plainToClass(StudentDataIniFindManyArgs, request.query);
    const results = await this.service.findStudentDataIni(params.id, {
      ...query,
      select: {
        curriculumOption: true,
        curriculumTrack: true,
        id: true,
        programDuration: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentDataIni")
  async connectStudentDataIni(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataIniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataIni: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentDataIni")
  async updateStudentDataIni(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataIniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataIni: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentDataIni")
  async disconnectStudentDataIni(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataIniWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataIni: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentDataMl")
  @ApiNestedQuery(StudentDataMlFindManyArgs)
  async findStudentDataMl(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentDataMl[]> {
    const query = plainToClass(StudentDataMlFindManyArgs, request.query);
    const results = await this.service.findStudentDataMl(params.id, {
      ...query,
      select: {
        id: true,
        origDepartment: true,
        overrideCore: true,
        overrideElectives: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentDataMl")
  async connectStudentDataMl(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataMlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataMl: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentDataMl")
  async updateStudentDataMl(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataMlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataMl: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentDataMl")
  async disconnectStudentDataMl(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentDataMlWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentDataMl: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentFiles")
  @ApiNestedQuery(StudentFileFindManyArgs)
  async findStudentFiles(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentFile[]> {
    const query = plainToClass(StudentFileFindManyArgs, request.query);
    const results = await this.service.findStudentFiles(params.id, {
      ...query,
      select: {
        fileChanges: true,
        fileDate: true,
        fileDesc: true,
        fileName: true,
        fileType: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentFiles")
  async connectStudentFiles(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentFiles: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentFiles")
  async updateStudentFiles(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentFiles: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentFiles")
  async disconnectStudentFiles(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentFileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentFiles: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentInstitutes")
  @ApiNestedQuery(StudentInstituteFindManyArgs)
  async findStudentInstitutes(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentInstitute[]> {
    const query = plainToClass(StudentInstituteFindManyArgs, request.query);
    const results = await this.service.findStudentInstitutes(params.id, {
      ...query,
      select: {
        degree: true,
        id: true,
        institutesAbbr: true,
        institutesId: true,
        institutesName: true,
        institutesText: true,
        irank: true,
        major: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentInstitutes")
  async connectStudentInstitutes(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentInstituteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentInstitutes: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentInstitutes")
  async updateStudentInstitutes(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentInstituteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentInstitutes: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentInstitutes")
  async disconnectStudentInstitutes(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentInstituteWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentInstitutes: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentMentors")
  @ApiNestedQuery(StudentMentorFindManyArgs)
  async findStudentMentors(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentMentor[]> {
    const query = plainToClass(StudentMentorFindManyArgs, request.query);
    const results = await this.service.findStudentMentors(params.id, {
      ...query,
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentMentors")
  async connectStudentMentors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentMentorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentMentors: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentMentors")
  async updateStudentMentors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentMentorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentMentors: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentMentors")
  async disconnectStudentMentors(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentMentorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentMentors: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentOverrides")
  @ApiNestedQuery(StudentOverrideFindManyArgs)
  async findStudentOverrides(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentOverride[]> {
    const query = plainToClass(StudentOverrideFindManyArgs, request.query);
    const results = await this.service.findStudentOverrides(params.id, {
      ...query,
      select: {
        id: true,
        noteId: true,
        requirement: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentOverrides")
  async connectStudentOverrides(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentOverrideWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentOverrides: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentOverrides")
  async updateStudentOverrides(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentOverrideWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentOverrides: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentOverrides")
  async disconnectStudentOverrides(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentOverrideWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentOverrides: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentPubs")
  @ApiNestedQuery(StudentPubFindManyArgs)
  async findStudentPubs(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentPub[]> {
    const query = plainToClass(StudentPubFindManyArgs, request.query);
    const results = await this.service.findStudentPubs(params.id, {
      ...query,
      select: {
        authors: true,
        citation: true,
        forum: true,
        id: true,
        pubDate: true,
        sfId: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
        url: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentPubs")
  async connectStudentPubs(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentPubWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentPubs: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentPubs")
  async updateStudentPubs(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentPubWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentPubs: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentPubs")
  async disconnectStudentPubs(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentPubWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentPubs: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentResidency")
  @ApiNestedQuery(StudentResidencyFindManyArgs)
  async findStudentResidency(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentResidency[]> {
    const query = plainToClass(StudentResidencyFindManyArgs, request.query);
    const results = await this.service.findStudentResidency(params.id, {
      ...query,
      select: {
        id: true,
        residencyDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentResidency")
  async connectStudentResidency(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentResidencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentResidency: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentResidency")
  async updateStudentResidency(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentResidencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentResidency: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentResidency")
  async disconnectStudentResidency(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentResidencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentResidency: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/studentSkills")
  @ApiNestedQuery(StudentSkillFindManyArgs)
  async findStudentSkills(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<StudentSkill[]> {
    const query = plainToClass(StudentSkillFindManyArgs, request.query);
    const results = await this.service.findStudentSkills(params.id, {
      ...query,
      select: {
        collab: true,
        comment: true,
        date: true,
        grade: true,
        id: true,
        pending: true,
        skill: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
        units: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/studentSkills")
  async connectStudentSkills(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentSkills: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/studentSkills")
  async updateStudentSkills(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentSkills: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/studentSkills")
  async disconnectStudentSkills(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: StudentSkillWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      studentSkills: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/teachingReq")
  @ApiNestedQuery(TeachingReqFindManyArgs)
  async findTeachingReq(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<TeachingReq[]> {
    const query = plainToClass(TeachingReqFindManyArgs, request.query);
    const results = await this.service.findTeachingReq(params.id, {
      ...query,
      select: {
        complete: true,
        courseNum: true,
        courseSection: true,
        date: true,
        departmentCode: true,
        id: true,
        pending: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
        units: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/teachingReq")
  async connectTeachingReq(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: TeachingReqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teachingReq: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/teachingReq")
  async updateTeachingReq(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: TeachingReqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teachingReq: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/teachingReq")
  async disconnectTeachingReq(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: TeachingReqWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      teachingReq: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/thesisCommittee")
  @ApiNestedQuery(ThesisCommitteeFindManyArgs)
  async findThesisCommittee(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<ThesisCommittee[]> {
    const query = plainToClass(ThesisCommitteeFindManyArgs, request.query);
    const results = await this.service.findThesisCommittee(params.id, {
      ...query,
      select: {
        committeeRole: true,
        facultyId: true,
        id: true,
        pending: true,

        studentData: {
          select: {
            id: true,
          },
        },

        thesisType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/thesisCommittee")
  async connectThesisCommittee(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ThesisCommitteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      thesisCommittee: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/thesisCommittee")
  async updateThesisCommittee(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ThesisCommitteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      thesisCommittee: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/thesisCommittee")
  async disconnectThesisCommittee(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ThesisCommitteeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      thesisCommittee: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/thesisTopic")
  @ApiNestedQuery(ThesisTopicFindManyArgs)
  async findThesisTopic(
    @common.Req() request: Request,
    @common.Param() params: StudentDatumWhereUniqueInput
  ): Promise<ThesisTopic[]> {
    const query = plainToClass(ThesisTopicFindManyArgs, request.query);
    const results = await this.service.findThesisTopic(params.id, {
      ...query,
      select: {
        date: true,
        defenseComplete: true,
        defenseDate: true,
        defensePending: true,
        defenseTitle: true,
        id: true,
        pending: true,
        proposalComplete: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/thesisTopic")
  async connectThesisTopic(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ThesisTopicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      thesisTopic: {
        connect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/thesisTopic")
  async updateThesisTopic(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ThesisTopicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      thesisTopic: {
        set: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/thesisTopic")
  async disconnectThesisTopic(
    @common.Param() params: StudentDatumWhereUniqueInput,
    @common.Body() body: ThesisTopicWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      thesisTopic: {
        disconnect: body,
      },
    };
    await this.service.updateStudentDatum({
      where: params,
      data,
      select: { id: true },
    });
  }
}
