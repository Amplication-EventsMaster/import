/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentDatum as PrismaStudentDatum,
  Advisor as PrismaAdvisor,
  Area as PrismaArea,
  Award as PrismaAward,
  CommitteeService as PrismaCommitteeService,
  DegreeStatus as PrismaDegreeStatus,
  Employment as PrismaEmployment,
  EvaluationLetter as PrismaEvaluationLetter,
  ExpNeuroReq as PrismaExpNeuroReq,
  Fellowship as PrismaFellowship,
  Funding as PrismaFunding,
  GeneralDatum as PrismaGeneralDatum,
  Internship as PrismaInternship,
  InternshipsCd as PrismaInternshipsCd,
  InternshipsIni as PrismaInternshipsIni,
  InternshipsIsrm as PrismaInternshipsIsrm,
  Interview as PrismaInterview,
  Ita as PrismaIta,
  LegacyRequirement as PrismaLegacyRequirement,
  Note as PrismaNote,
  Practicum as PrismaPracticum,
  Presentation as PrismaPresentation,
  ProgramStatus as PrismaProgramStatus,
  ProjectTopic as PrismaProjectTopic,
  QualsCommittee as PrismaQualsCommittee,
  Rotation as PrismaRotation,
  Statement as PrismaStatement,
  StudentAdvisor as PrismaStudentAdvisor,
  StudentApp as PrismaStudentApp,
  StudentDataHcii as PrismaStudentDataHcii,
  StudentDataIni as PrismaStudentDataIni,
  StudentDataMl as PrismaStudentDataMl,
  StudentFile as PrismaStudentFile,
  StudentInstitute as PrismaStudentInstitute,
  StudentMentor as PrismaStudentMentor,
  StudentOverride as PrismaStudentOverride,
  StudentPub as PrismaStudentPub,
  StudentResidency as PrismaStudentResidency,
  StudentSkill as PrismaStudentSkill,
  TeachingReq as PrismaTeachingReq,
  ThesisCommittee as PrismaThesisCommittee,
  ThesisTopic as PrismaThesisTopic,
  StudentDataRi as PrismaStudentDataRi,
  UserRole as PrismaUserRole,
} from "@prisma/client";

export class StudentDatumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentDatumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentDatum.count(args);
  }

  async studentData<T extends Prisma.StudentDatumFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDatumFindManyArgs>
  ): Promise<PrismaStudentDatum[]> {
    return this.prisma.studentDatum.findMany<Prisma.StudentDatumFindManyArgs>(
      args
    );
  }
  async studentDatum<T extends Prisma.StudentDatumFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDatumFindUniqueArgs>
  ): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentDatum.findUnique(args);
  }
  async createStudentDatum<T extends Prisma.StudentDatumCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDatumCreateArgs>
  ): Promise<PrismaStudentDatum> {
    return this.prisma.studentDatum.create<T>(args);
  }
  async updateStudentDatum<T extends Prisma.StudentDatumUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDatumUpdateArgs>
  ): Promise<PrismaStudentDatum> {
    return this.prisma.studentDatum.update<T>(args);
  }
  async deleteStudentDatum<T extends Prisma.StudentDatumDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDatumDeleteArgs>
  ): Promise<PrismaStudentDatum> {
    return this.prisma.studentDatum.delete(args);
  }

  async findAdvisors(
    parentId: number,
    args: Prisma.AdvisorFindManyArgs
  ): Promise<PrismaAdvisor[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .advisors(args);
  }

  async findAreas(
    parentId: number,
    args: Prisma.AreaFindManyArgs
  ): Promise<PrismaArea[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .areas(args);
  }

  async findAwards(
    parentId: number,
    args: Prisma.AwardFindManyArgs
  ): Promise<PrismaAward[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .awards(args);
  }

  async findCommitteeService(
    parentId: number,
    args: Prisma.CommitteeServiceFindManyArgs
  ): Promise<PrismaCommitteeService[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .committeeService(args);
  }

  async findDegreeStatus(
    parentId: number,
    args: Prisma.DegreeStatusFindManyArgs
  ): Promise<PrismaDegreeStatus[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .degreeStatus(args);
  }

  async findEmployment(
    parentId: number,
    args: Prisma.EmploymentFindManyArgs
  ): Promise<PrismaEmployment[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employment(args);
  }

  async findEvaluationLetters(
    parentId: number,
    args: Prisma.EvaluationLetterFindManyArgs
  ): Promise<PrismaEvaluationLetter[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .evaluationLetters(args);
  }

  async findExpNeuroReq(
    parentId: number,
    args: Prisma.ExpNeuroReqFindManyArgs
  ): Promise<PrismaExpNeuroReq[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expNeuroReq(args);
  }

  async findFellowships(
    parentId: number,
    args: Prisma.FellowshipFindManyArgs
  ): Promise<PrismaFellowship[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .fellowships(args);
  }

  async findFunding(
    parentId: number,
    args: Prisma.FundingFindManyArgs
  ): Promise<PrismaFunding[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .funding(args);
  }

  async findGeneralData(
    parentId: number,
    args: Prisma.GeneralDatumFindManyArgs
  ): Promise<PrismaGeneralDatum[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .generalData(args);
  }

  async findInternships(
    parentId: number,
    args: Prisma.InternshipFindManyArgs
  ): Promise<PrismaInternship[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .internships(args);
  }

  async findInternshipsCds(
    parentId: number,
    args: Prisma.InternshipsCdFindManyArgs
  ): Promise<PrismaInternshipsCd[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .internshipsCds(args);
  }

  async findInternshipsIni(
    parentId: number,
    args: Prisma.InternshipsIniFindManyArgs
  ): Promise<PrismaInternshipsIni[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .internshipsIni(args);
  }

  async findInternshipsIsrms(
    parentId: number,
    args: Prisma.InternshipsIsrmFindManyArgs
  ): Promise<PrismaInternshipsIsrm[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .internshipsIsrms(args);
  }

  async findInterview(
    parentId: number,
    args: Prisma.InterviewFindManyArgs
  ): Promise<PrismaInterview[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .interview(args);
  }

  async findIta(
    parentId: number,
    args: Prisma.ItaFindManyArgs
  ): Promise<PrismaIta[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ita(args);
  }

  async findLegacyRequirements(
    parentId: number,
    args: Prisma.LegacyRequirementFindManyArgs
  ): Promise<PrismaLegacyRequirement[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .legacyRequirements(args);
  }

  async findNotes(
    parentId: number,
    args: Prisma.NoteFindManyArgs
  ): Promise<PrismaNote[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .notes(args);
  }

  async findPracticum(
    parentId: number,
    args: Prisma.PracticumFindManyArgs
  ): Promise<PrismaPracticum[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .practicum(args);
  }

  async findPresentations(
    parentId: number,
    args: Prisma.PresentationFindManyArgs
  ): Promise<PrismaPresentation[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .presentations(args);
  }

  async findProgramStatus(
    parentId: number,
    args: Prisma.ProgramStatusFindManyArgs
  ): Promise<PrismaProgramStatus[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .programStatus(args);
  }

  async findProjectTopic(
    parentId: number,
    args: Prisma.ProjectTopicFindManyArgs
  ): Promise<PrismaProjectTopic[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .projectTopic(args);
  }

  async findQualsCommittee(
    parentId: number,
    args: Prisma.QualsCommitteeFindManyArgs
  ): Promise<PrismaQualsCommittee[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .qualsCommittee(args);
  }

  async findRotations(
    parentId: number,
    args: Prisma.RotationFindManyArgs
  ): Promise<PrismaRotation[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .rotations(args);
  }

  async findStatements(
    parentId: number,
    args: Prisma.StatementFindManyArgs
  ): Promise<PrismaStatement[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .statements(args);
  }

  async findStudentAdvisors(
    parentId: number,
    args: Prisma.StudentAdvisorFindManyArgs
  ): Promise<PrismaStudentAdvisor[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentAdvisors(args);
  }

  async findStudentApps(
    parentId: number,
    args: Prisma.StudentAppFindManyArgs
  ): Promise<PrismaStudentApp[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentApps(args);
  }

  async findStudentDataHcii(
    parentId: number,
    args: Prisma.StudentDataHciiFindManyArgs
  ): Promise<PrismaStudentDataHcii[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentDataHcii(args);
  }

  async findStudentDataIni(
    parentId: number,
    args: Prisma.StudentDataIniFindManyArgs
  ): Promise<PrismaStudentDataIni[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentDataIni(args);
  }

  async findStudentDataMl(
    parentId: number,
    args: Prisma.StudentDataMlFindManyArgs
  ): Promise<PrismaStudentDataMl[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentDataMl(args);
  }

  async findStudentFiles(
    parentId: number,
    args: Prisma.StudentFileFindManyArgs
  ): Promise<PrismaStudentFile[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentFiles(args);
  }

  async findStudentInstitutes(
    parentId: number,
    args: Prisma.StudentInstituteFindManyArgs
  ): Promise<PrismaStudentInstitute[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentInstitutes(args);
  }

  async findStudentMentors(
    parentId: number,
    args: Prisma.StudentMentorFindManyArgs
  ): Promise<PrismaStudentMentor[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentMentors(args);
  }

  async findStudentOverrides(
    parentId: number,
    args: Prisma.StudentOverrideFindManyArgs
  ): Promise<PrismaStudentOverride[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentOverrides(args);
  }

  async findStudentPubs(
    parentId: number,
    args: Prisma.StudentPubFindManyArgs
  ): Promise<PrismaStudentPub[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentPubs(args);
  }

  async findStudentResidency(
    parentId: number,
    args: Prisma.StudentResidencyFindManyArgs
  ): Promise<PrismaStudentResidency[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentResidency(args);
  }

  async findStudentSkills(
    parentId: number,
    args: Prisma.StudentSkillFindManyArgs
  ): Promise<PrismaStudentSkill[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .studentSkills(args);
  }

  async findTeachingReq(
    parentId: number,
    args: Prisma.TeachingReqFindManyArgs
  ): Promise<PrismaTeachingReq[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .teachingReq(args);
  }

  async findThesisCommittee(
    parentId: number,
    args: Prisma.ThesisCommitteeFindManyArgs
  ): Promise<PrismaThesisCommittee[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .thesisCommittee(args);
  }

  async findThesisTopic(
    parentId: number,
    args: Prisma.ThesisTopicFindManyArgs
  ): Promise<PrismaThesisTopic[]> {
    return this.prisma.studentDatum
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .thesisTopic(args);
  }

  async getStudentDataRi(
    parentId: number
  ): Promise<PrismaStudentDataRi | null> {
    return this.prisma.studentDatum
      .findUnique({
        where: { id: parentId },
      })
      .studentDataRi();
  }

  async getUserRole(parentId: number): Promise<PrismaUserRole | null> {
    return this.prisma.studentDatum
      .findUnique({
        where: { id: parentId },
      })
      .userRole();
  }
}
