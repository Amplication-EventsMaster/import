/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternshipsIniService } from "../internshipsIni.service";
import { InternshipsIniCreateInput } from "./InternshipsIniCreateInput";
import { InternshipsIni } from "./InternshipsIni";
import { InternshipsIniFindManyArgs } from "./InternshipsIniFindManyArgs";
import { InternshipsIniWhereUniqueInput } from "./InternshipsIniWhereUniqueInput";
import { InternshipsIniUpdateInput } from "./InternshipsIniUpdateInput";

export class InternshipsIniControllerBase {
  constructor(protected readonly service: InternshipsIniService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternshipsIni })
  async createInternshipsIni(
    @common.Body() data: InternshipsIniCreateInput
  ): Promise<InternshipsIni> {
    return await this.service.createInternshipsIni({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        city: true,
        company: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternshipsIni] })
  @ApiNestedQuery(InternshipsIniFindManyArgs)
  async internshipsInis(
    @common.Req() request: Request
  ): Promise<InternshipsIni[]> {
    const args = plainToClass(InternshipsIniFindManyArgs, request.query);
    return this.service.internshipsInis({
      ...args,
      select: {
        city: true,
        company: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternshipsIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internshipsIni(
    @common.Param() params: InternshipsIniWhereUniqueInput
  ): Promise<InternshipsIni | null> {
    const result = await this.service.internshipsIni({
      where: params,
      select: {
        city: true,
        company: true,
        endDate: true,
        id: true,
        pending: true,
        position: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternshipsIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternshipsIni(
    @common.Param() params: InternshipsIniWhereUniqueInput,
    @common.Body() data: InternshipsIniUpdateInput
  ): Promise<InternshipsIni | null> {
    try {
      return await this.service.updateInternshipsIni({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          city: true,
          company: true,
          endDate: true,
          id: true,
          pending: true,
          position: true,
          startDate: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternshipsIni })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternshipsIni(
    @common.Param() params: InternshipsIniWhereUniqueInput
  ): Promise<InternshipsIni | null> {
    try {
      return await this.service.deleteInternshipsIni({
        where: params,
        select: {
          city: true,
          company: true,
          endDate: true,
          id: true,
          pending: true,
          position: true,
          startDate: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
