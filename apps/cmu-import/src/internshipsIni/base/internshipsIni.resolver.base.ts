/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InternshipsIni } from "./InternshipsIni";
import { InternshipsIniCountArgs } from "./InternshipsIniCountArgs";
import { InternshipsIniFindManyArgs } from "./InternshipsIniFindManyArgs";
import { InternshipsIniFindUniqueArgs } from "./InternshipsIniFindUniqueArgs";
import { CreateInternshipsIniArgs } from "./CreateInternshipsIniArgs";
import { UpdateInternshipsIniArgs } from "./UpdateInternshipsIniArgs";
import { DeleteInternshipsIniArgs } from "./DeleteInternshipsIniArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { InternshipsIniService } from "../internshipsIni.service";
@graphql.Resolver(() => InternshipsIni)
export class InternshipsIniResolverBase {
  constructor(protected readonly service: InternshipsIniService) {}

  async _internshipsInisMeta(
    @graphql.Args() args: InternshipsIniCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InternshipsIni])
  async internshipsInis(
    @graphql.Args() args: InternshipsIniFindManyArgs
  ): Promise<InternshipsIni[]> {
    return this.service.internshipsInis(args);
  }

  @graphql.Query(() => InternshipsIni, { nullable: true })
  async internshipsIni(
    @graphql.Args() args: InternshipsIniFindUniqueArgs
  ): Promise<InternshipsIni | null> {
    const result = await this.service.internshipsIni(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InternshipsIni)
  async createInternshipsIni(
    @graphql.Args() args: CreateInternshipsIniArgs
  ): Promise<InternshipsIni> {
    return await this.service.createInternshipsIni({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => InternshipsIni)
  async updateInternshipsIni(
    @graphql.Args() args: UpdateInternshipsIniArgs
  ): Promise<InternshipsIni | null> {
    try {
      return await this.service.updateInternshipsIni({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InternshipsIni)
  async deleteInternshipsIni(
    @graphql.Args() args: DeleteInternshipsIniArgs
  ): Promise<InternshipsIni | null> {
    try {
      return await this.service.deleteInternshipsIni(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: InternshipsIni
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
