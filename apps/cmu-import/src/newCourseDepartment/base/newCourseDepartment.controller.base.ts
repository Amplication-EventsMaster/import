/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { NewCourseDepartmentService } from "../newCourseDepartment.service";
import { NewCourseDepartmentCreateInput } from "./NewCourseDepartmentCreateInput";
import { NewCourseDepartment } from "./NewCourseDepartment";
import { NewCourseDepartmentFindManyArgs } from "./NewCourseDepartmentFindManyArgs";
import { NewCourseDepartmentWhereUniqueInput } from "./NewCourseDepartmentWhereUniqueInput";
import { NewCourseDepartmentUpdateInput } from "./NewCourseDepartmentUpdateInput";

export class NewCourseDepartmentControllerBase {
  constructor(protected readonly service: NewCourseDepartmentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: NewCourseDepartment })
  async createNewCourseDepartment(
    @common.Body() data: NewCourseDepartmentCreateInput
  ): Promise<NewCourseDepartment> {
    return await this.service.createNewCourseDepartment({
      data: data,
      select: {
        courseId: true,
        id: true,
        requirementType: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [NewCourseDepartment] })
  @ApiNestedQuery(NewCourseDepartmentFindManyArgs)
  async newCourseDepartments(
    @common.Req() request: Request
  ): Promise<NewCourseDepartment[]> {
    const args = plainToClass(NewCourseDepartmentFindManyArgs, request.query);
    return this.service.newCourseDepartments({
      ...args,
      select: {
        courseId: true,
        id: true,
        requirementType: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: NewCourseDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async newCourseDepartment(
    @common.Param() params: NewCourseDepartmentWhereUniqueInput
  ): Promise<NewCourseDepartment | null> {
    const result = await this.service.newCourseDepartment({
      where: params,
      select: {
        courseId: true,
        id: true,
        requirementType: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: NewCourseDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateNewCourseDepartment(
    @common.Param() params: NewCourseDepartmentWhereUniqueInput,
    @common.Body() data: NewCourseDepartmentUpdateInput
  ): Promise<NewCourseDepartment | null> {
    try {
      return await this.service.updateNewCourseDepartment({
        where: params,
        data: data,
        select: {
          courseId: true,
          id: true,
          requirementType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: NewCourseDepartment })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteNewCourseDepartment(
    @common.Param() params: NewCourseDepartmentWhereUniqueInput
  ): Promise<NewCourseDepartment | null> {
    try {
      return await this.service.deleteNewCourseDepartment({
        where: params,
        select: {
          courseId: true,
          id: true,
          requirementType: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
