/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { NewCourseDepartment } from "./NewCourseDepartment";
import { NewCourseDepartmentCountArgs } from "./NewCourseDepartmentCountArgs";
import { NewCourseDepartmentFindManyArgs } from "./NewCourseDepartmentFindManyArgs";
import { NewCourseDepartmentFindUniqueArgs } from "./NewCourseDepartmentFindUniqueArgs";
import { CreateNewCourseDepartmentArgs } from "./CreateNewCourseDepartmentArgs";
import { UpdateNewCourseDepartmentArgs } from "./UpdateNewCourseDepartmentArgs";
import { DeleteNewCourseDepartmentArgs } from "./DeleteNewCourseDepartmentArgs";
import { NewCourseDepartmentService } from "../newCourseDepartment.service";
@graphql.Resolver(() => NewCourseDepartment)
export class NewCourseDepartmentResolverBase {
  constructor(protected readonly service: NewCourseDepartmentService) {}

  async _newCourseDepartmentsMeta(
    @graphql.Args() args: NewCourseDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [NewCourseDepartment])
  async newCourseDepartments(
    @graphql.Args() args: NewCourseDepartmentFindManyArgs
  ): Promise<NewCourseDepartment[]> {
    return this.service.newCourseDepartments(args);
  }

  @graphql.Query(() => NewCourseDepartment, { nullable: true })
  async newCourseDepartment(
    @graphql.Args() args: NewCourseDepartmentFindUniqueArgs
  ): Promise<NewCourseDepartment | null> {
    const result = await this.service.newCourseDepartment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => NewCourseDepartment)
  async createNewCourseDepartment(
    @graphql.Args() args: CreateNewCourseDepartmentArgs
  ): Promise<NewCourseDepartment> {
    return await this.service.createNewCourseDepartment({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => NewCourseDepartment)
  async updateNewCourseDepartment(
    @graphql.Args() args: UpdateNewCourseDepartmentArgs
  ): Promise<NewCourseDepartment | null> {
    try {
      return await this.service.updateNewCourseDepartment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => NewCourseDepartment)
  async deleteNewCourseDepartment(
    @graphql.Args() args: DeleteNewCourseDepartmentArgs
  ): Promise<NewCourseDepartment | null> {
    try {
      return await this.service.deleteNewCourseDepartment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
