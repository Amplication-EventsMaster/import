/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EvaluationLetter } from "./EvaluationLetter";
import { EvaluationLetterCountArgs } from "./EvaluationLetterCountArgs";
import { EvaluationLetterFindManyArgs } from "./EvaluationLetterFindManyArgs";
import { EvaluationLetterFindUniqueArgs } from "./EvaluationLetterFindUniqueArgs";
import { CreateEvaluationLetterArgs } from "./CreateEvaluationLetterArgs";
import { UpdateEvaluationLetterArgs } from "./UpdateEvaluationLetterArgs";
import { DeleteEvaluationLetterArgs } from "./DeleteEvaluationLetterArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { EvaluationLetterService } from "../evaluationLetter.service";
@graphql.Resolver(() => EvaluationLetter)
export class EvaluationLetterResolverBase {
  constructor(protected readonly service: EvaluationLetterService) {}

  async _evaluationLettersMeta(
    @graphql.Args() args: EvaluationLetterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EvaluationLetter])
  async evaluationLetters(
    @graphql.Args() args: EvaluationLetterFindManyArgs
  ): Promise<EvaluationLetter[]> {
    return this.service.evaluationLetters(args);
  }

  @graphql.Query(() => EvaluationLetter, { nullable: true })
  async evaluationLetter(
    @graphql.Args() args: EvaluationLetterFindUniqueArgs
  ): Promise<EvaluationLetter | null> {
    const result = await this.service.evaluationLetter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EvaluationLetter)
  async createEvaluationLetter(
    @graphql.Args() args: CreateEvaluationLetterArgs
  ): Promise<EvaluationLetter> {
    return await this.service.createEvaluationLetter({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => EvaluationLetter)
  async updateEvaluationLetter(
    @graphql.Args() args: UpdateEvaluationLetterArgs
  ): Promise<EvaluationLetter | null> {
    try {
      return await this.service.updateEvaluationLetter({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EvaluationLetter)
  async deleteEvaluationLetter(
    @graphql.Args() args: DeleteEvaluationLetterArgs
  ): Promise<EvaluationLetter | null> {
    try {
      return await this.service.deleteEvaluationLetter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: EvaluationLetter
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
