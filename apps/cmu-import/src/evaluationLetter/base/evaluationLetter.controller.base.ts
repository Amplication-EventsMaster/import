/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EvaluationLetterService } from "../evaluationLetter.service";
import { EvaluationLetterCreateInput } from "./EvaluationLetterCreateInput";
import { EvaluationLetter } from "./EvaluationLetter";
import { EvaluationLetterFindManyArgs } from "./EvaluationLetterFindManyArgs";
import { EvaluationLetterWhereUniqueInput } from "./EvaluationLetterWhereUniqueInput";
import { EvaluationLetterUpdateInput } from "./EvaluationLetterUpdateInput";

export class EvaluationLetterControllerBase {
  constructor(protected readonly service: EvaluationLetterService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EvaluationLetter })
  async createEvaluationLetter(
    @common.Body() data: EvaluationLetterCreateInput
  ): Promise<EvaluationLetter> {
    return await this.service.createEvaluationLetter({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        date: true,
        documentId: true,
        id: true,
        performanceCode: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        student_read: true,
        text: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EvaluationLetter] })
  @ApiNestedQuery(EvaluationLetterFindManyArgs)
  async evaluationLetters(
    @common.Req() request: Request
  ): Promise<EvaluationLetter[]> {
    const args = plainToClass(EvaluationLetterFindManyArgs, request.query);
    return this.service.evaluationLetters({
      ...args,
      select: {
        date: true,
        documentId: true,
        id: true,
        performanceCode: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        student_read: true,
        text: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EvaluationLetter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async evaluationLetter(
    @common.Param() params: EvaluationLetterWhereUniqueInput
  ): Promise<EvaluationLetter | null> {
    const result = await this.service.evaluationLetter({
      where: params,
      select: {
        date: true,
        documentId: true,
        id: true,
        performanceCode: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },

        student_read: true,
        text: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EvaluationLetter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEvaluationLetter(
    @common.Param() params: EvaluationLetterWhereUniqueInput,
    @common.Body() data: EvaluationLetterUpdateInput
  ): Promise<EvaluationLetter | null> {
    try {
      return await this.service.updateEvaluationLetter({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          date: true,
          documentId: true,
          id: true,
          performanceCode: true,
          status: true,

          studentData: {
            select: {
              id: true,
            },
          },

          student_read: true,
          text: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EvaluationLetter })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEvaluationLetter(
    @common.Param() params: EvaluationLetterWhereUniqueInput
  ): Promise<EvaluationLetter | null> {
    try {
      return await this.service.deleteEvaluationLetter({
        where: params,
        select: {
          date: true,
          documentId: true,
          id: true,
          performanceCode: true,
          status: true,

          studentData: {
            select: {
              id: true,
            },
          },

          student_read: true,
          text: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
