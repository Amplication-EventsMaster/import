/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EvaluationLetter as PrismaEvaluationLetter,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class EvaluationLetterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EvaluationLetterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.evaluationLetter.count(args);
  }

  async evaluationLetters<T extends Prisma.EvaluationLetterFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluationLetterFindManyArgs>
  ): Promise<PrismaEvaluationLetter[]> {
    return this.prisma.evaluationLetter.findMany<Prisma.EvaluationLetterFindManyArgs>(
      args
    );
  }
  async evaluationLetter<T extends Prisma.EvaluationLetterFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluationLetterFindUniqueArgs>
  ): Promise<PrismaEvaluationLetter | null> {
    return this.prisma.evaluationLetter.findUnique(args);
  }
  async createEvaluationLetter<T extends Prisma.EvaluationLetterCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluationLetterCreateArgs>
  ): Promise<PrismaEvaluationLetter> {
    return this.prisma.evaluationLetter.create<T>(args);
  }
  async updateEvaluationLetter<T extends Prisma.EvaluationLetterUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluationLetterUpdateArgs>
  ): Promise<PrismaEvaluationLetter> {
    return this.prisma.evaluationLetter.update<T>(args);
  }
  async deleteEvaluationLetter<T extends Prisma.EvaluationLetterDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EvaluationLetterDeleteArgs>
  ): Promise<PrismaEvaluationLetter> {
    return this.prisma.evaluationLetter.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.evaluationLetter
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
