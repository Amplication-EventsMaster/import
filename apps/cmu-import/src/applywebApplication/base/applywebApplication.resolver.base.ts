/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplywebApplication } from "./ApplywebApplication";
import { ApplywebApplicationCountArgs } from "./ApplywebApplicationCountArgs";
import { ApplywebApplicationFindManyArgs } from "./ApplywebApplicationFindManyArgs";
import { ApplywebApplicationFindUniqueArgs } from "./ApplywebApplicationFindUniqueArgs";
import { CreateApplywebApplicationArgs } from "./CreateApplywebApplicationArgs";
import { UpdateApplywebApplicationArgs } from "./UpdateApplywebApplicationArgs";
import { DeleteApplywebApplicationArgs } from "./DeleteApplywebApplicationArgs";
import { ApplywebApplicationService } from "../applywebApplication.service";
@graphql.Resolver(() => ApplywebApplication)
export class ApplywebApplicationResolverBase {
  constructor(protected readonly service: ApplywebApplicationService) {}

  async _applywebApplicationsMeta(
    @graphql.Args() args: ApplywebApplicationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplywebApplication])
  async applywebApplications(
    @graphql.Args() args: ApplywebApplicationFindManyArgs
  ): Promise<ApplywebApplication[]> {
    return this.service.applywebApplications(args);
  }

  @graphql.Query(() => ApplywebApplication, { nullable: true })
  async applywebApplication(
    @graphql.Args() args: ApplywebApplicationFindUniqueArgs
  ): Promise<ApplywebApplication | null> {
    const result = await this.service.applywebApplication(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplywebApplication)
  async createApplywebApplication(
    @graphql.Args() args: CreateApplywebApplicationArgs
  ): Promise<ApplywebApplication> {
    return await this.service.createApplywebApplication({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplywebApplication)
  async updateApplywebApplication(
    @graphql.Args() args: UpdateApplywebApplicationArgs
  ): Promise<ApplywebApplication | null> {
    try {
      return await this.service.updateApplywebApplication({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplywebApplication)
  async deleteApplywebApplication(
    @graphql.Args() args: DeleteApplywebApplicationArgs
  ): Promise<ApplywebApplication | null> {
    try {
      return await this.service.deleteApplywebApplication(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
