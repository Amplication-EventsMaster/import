/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplywebApplicationService } from "../applywebApplication.service";
import { ApplywebApplicationCreateInput } from "./ApplywebApplicationCreateInput";
import { ApplywebApplication } from "./ApplywebApplication";
import { ApplywebApplicationFindManyArgs } from "./ApplywebApplicationFindManyArgs";
import { ApplywebApplicationWhereUniqueInput } from "./ApplywebApplicationWhereUniqueInput";
import { ApplywebApplicationUpdateInput } from "./ApplywebApplicationUpdateInput";

export class ApplywebApplicationControllerBase {
  constructor(protected readonly service: ApplywebApplicationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplywebApplication })
  async createApplywebApplication(
    @common.Body() data: ApplywebApplicationCreateInput
  ): Promise<ApplywebApplication> {
    return await this.service.createApplywebApplication({
      data: data,
      select: {
        dateSubmitted: true,
        id: true,
        pier: true,
        resumeFilepath: true,
        statementOfPurposeFilepath: true,
        studentCitizenshipCountry: true,
        studentDateOfBirth: true,
        studentEthnicity: true,
        studentGender: true,
        studentNameFirst: true,
        studentNameLast: true,
        studentTitle: true,
        womenFellowship: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplywebApplication] })
  @ApiNestedQuery(ApplywebApplicationFindManyArgs)
  async applywebApplications(
    @common.Req() request: Request
  ): Promise<ApplywebApplication[]> {
    const args = plainToClass(ApplywebApplicationFindManyArgs, request.query);
    return this.service.applywebApplications({
      ...args,
      select: {
        dateSubmitted: true,
        id: true,
        pier: true,
        resumeFilepath: true,
        statementOfPurposeFilepath: true,
        studentCitizenshipCountry: true,
        studentDateOfBirth: true,
        studentEthnicity: true,
        studentGender: true,
        studentNameFirst: true,
        studentNameLast: true,
        studentTitle: true,
        womenFellowship: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplywebApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applywebApplication(
    @common.Param() params: ApplywebApplicationWhereUniqueInput
  ): Promise<ApplywebApplication | null> {
    const result = await this.service.applywebApplication({
      where: params,
      select: {
        dateSubmitted: true,
        id: true,
        pier: true,
        resumeFilepath: true,
        statementOfPurposeFilepath: true,
        studentCitizenshipCountry: true,
        studentDateOfBirth: true,
        studentEthnicity: true,
        studentGender: true,
        studentNameFirst: true,
        studentNameLast: true,
        studentTitle: true,
        womenFellowship: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplywebApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplywebApplication(
    @common.Param() params: ApplywebApplicationWhereUniqueInput,
    @common.Body() data: ApplywebApplicationUpdateInput
  ): Promise<ApplywebApplication | null> {
    try {
      return await this.service.updateApplywebApplication({
        where: params,
        data: data,
        select: {
          dateSubmitted: true,
          id: true,
          pier: true,
          resumeFilepath: true,
          statementOfPurposeFilepath: true,
          studentCitizenshipCountry: true,
          studentDateOfBirth: true,
          studentEthnicity: true,
          studentGender: true,
          studentNameFirst: true,
          studentNameLast: true,
          studentTitle: true,
          womenFellowship: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplywebApplication })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplywebApplication(
    @common.Param() params: ApplywebApplicationWhereUniqueInput
  ): Promise<ApplywebApplication | null> {
    try {
      return await this.service.deleteApplywebApplication({
        where: params,
        select: {
          dateSubmitted: true,
          id: true,
          pier: true,
          resumeFilepath: true,
          statementOfPurposeFilepath: true,
          studentCitizenshipCountry: true,
          studentDateOfBirth: true,
          studentEthnicity: true,
          studentGender: true,
          studentNameFirst: true,
          studentNameLast: true,
          studentTitle: true,
          womenFellowship: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
