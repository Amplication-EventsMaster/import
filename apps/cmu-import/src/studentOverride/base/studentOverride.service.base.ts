/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentOverride as PrismaStudentOverride,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentOverrideServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentOverrideCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentOverride.count(args);
  }

  async studentOverrides<T extends Prisma.StudentOverrideFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentOverrideFindManyArgs>
  ): Promise<PrismaStudentOverride[]> {
    return this.prisma.studentOverride.findMany<Prisma.StudentOverrideFindManyArgs>(
      args
    );
  }
  async studentOverride<T extends Prisma.StudentOverrideFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentOverrideFindUniqueArgs>
  ): Promise<PrismaStudentOverride | null> {
    return this.prisma.studentOverride.findUnique(args);
  }
  async createStudentOverride<T extends Prisma.StudentOverrideCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentOverrideCreateArgs>
  ): Promise<PrismaStudentOverride> {
    return this.prisma.studentOverride.create<T>(args);
  }
  async updateStudentOverride<T extends Prisma.StudentOverrideUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentOverrideUpdateArgs>
  ): Promise<PrismaStudentOverride> {
    return this.prisma.studentOverride.update<T>(args);
  }
  async deleteStudentOverride<T extends Prisma.StudentOverrideDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentOverrideDeleteArgs>
  ): Promise<PrismaStudentOverride> {
    return this.prisma.studentOverride.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentOverride
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
