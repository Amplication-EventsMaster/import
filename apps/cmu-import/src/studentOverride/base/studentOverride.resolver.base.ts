/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentOverride } from "./StudentOverride";
import { StudentOverrideCountArgs } from "./StudentOverrideCountArgs";
import { StudentOverrideFindManyArgs } from "./StudentOverrideFindManyArgs";
import { StudentOverrideFindUniqueArgs } from "./StudentOverrideFindUniqueArgs";
import { CreateStudentOverrideArgs } from "./CreateStudentOverrideArgs";
import { UpdateStudentOverrideArgs } from "./UpdateStudentOverrideArgs";
import { DeleteStudentOverrideArgs } from "./DeleteStudentOverrideArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentOverrideService } from "../studentOverride.service";
@graphql.Resolver(() => StudentOverride)
export class StudentOverrideResolverBase {
  constructor(protected readonly service: StudentOverrideService) {}

  async _studentOverridesMeta(
    @graphql.Args() args: StudentOverrideCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentOverride])
  async studentOverrides(
    @graphql.Args() args: StudentOverrideFindManyArgs
  ): Promise<StudentOverride[]> {
    return this.service.studentOverrides(args);
  }

  @graphql.Query(() => StudentOverride, { nullable: true })
  async studentOverride(
    @graphql.Args() args: StudentOverrideFindUniqueArgs
  ): Promise<StudentOverride | null> {
    const result = await this.service.studentOverride(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentOverride)
  async createStudentOverride(
    @graphql.Args() args: CreateStudentOverrideArgs
  ): Promise<StudentOverride> {
    return await this.service.createStudentOverride({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentOverride)
  async updateStudentOverride(
    @graphql.Args() args: UpdateStudentOverrideArgs
  ): Promise<StudentOverride | null> {
    try {
      return await this.service.updateStudentOverride({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentOverride)
  async deleteStudentOverride(
    @graphql.Args() args: DeleteStudentOverrideArgs
  ): Promise<StudentOverride | null> {
    try {
      return await this.service.deleteStudentOverride(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentOverride
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
