/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentOverrideService } from "../studentOverride.service";
import { StudentOverrideCreateInput } from "./StudentOverrideCreateInput";
import { StudentOverride } from "./StudentOverride";
import { StudentOverrideFindManyArgs } from "./StudentOverrideFindManyArgs";
import { StudentOverrideWhereUniqueInput } from "./StudentOverrideWhereUniqueInput";
import { StudentOverrideUpdateInput } from "./StudentOverrideUpdateInput";

export class StudentOverrideControllerBase {
  constructor(protected readonly service: StudentOverrideService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentOverride })
  async createStudentOverride(
    @common.Body() data: StudentOverrideCreateInput
  ): Promise<StudentOverride> {
    return await this.service.createStudentOverride({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        id: true,
        noteId: true,
        requirement: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentOverride] })
  @ApiNestedQuery(StudentOverrideFindManyArgs)
  async studentOverrides(
    @common.Req() request: Request
  ): Promise<StudentOverride[]> {
    const args = plainToClass(StudentOverrideFindManyArgs, request.query);
    return this.service.studentOverrides({
      ...args,
      select: {
        id: true,
        noteId: true,
        requirement: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentOverride(
    @common.Param() params: StudentOverrideWhereUniqueInput
  ): Promise<StudentOverride | null> {
    const result = await this.service.studentOverride({
      where: params,
      select: {
        id: true,
        noteId: true,
        requirement: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentOverride(
    @common.Param() params: StudentOverrideWhereUniqueInput,
    @common.Body() data: StudentOverrideUpdateInput
  ): Promise<StudentOverride | null> {
    try {
      return await this.service.updateStudentOverride({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          id: true,
          noteId: true,
          requirement: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentOverride })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentOverride(
    @common.Param() params: StudentOverrideWhereUniqueInput
  ): Promise<StudentOverride | null> {
    try {
      return await this.service.deleteStudentOverride({
        where: params,
        select: {
          id: true,
          noteId: true,
          requirement: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
