/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DegreeStatusService } from "../degreeStatus.service";
import { DegreeStatusCreateInput } from "./DegreeStatusCreateInput";
import { DegreeStatus } from "./DegreeStatus";
import { DegreeStatusFindManyArgs } from "./DegreeStatusFindManyArgs";
import { DegreeStatusWhereUniqueInput } from "./DegreeStatusWhereUniqueInput";
import { DegreeStatusUpdateInput } from "./DegreeStatusUpdateInput";

export class DegreeStatusControllerBase {
  constructor(protected readonly service: DegreeStatusService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DegreeStatus })
  async createDegreeStatus(
    @common.Body() data: DegreeStatusCreateInput
  ): Promise<DegreeStatus> {
    return await this.service.createDegreeStatus({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DegreeStatus] })
  @ApiNestedQuery(DegreeStatusFindManyArgs)
  async degreeStatuses(
    @common.Req() request: Request
  ): Promise<DegreeStatus[]> {
    const args = plainToClass(DegreeStatusFindManyArgs, request.query);
    return this.service.degreeStatuses({
      ...args,
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DegreeStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async degreeStatus(
    @common.Param() params: DegreeStatusWhereUniqueInput
  ): Promise<DegreeStatus | null> {
    const result = await this.service.degreeStatus({
      where: params,
      select: {
        date: true,
        id: true,
        status: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DegreeStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDegreeStatus(
    @common.Param() params: DegreeStatusWhereUniqueInput,
    @common.Body() data: DegreeStatusUpdateInput
  ): Promise<DegreeStatus | null> {
    try {
      return await this.service.updateDegreeStatus({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          date: true,
          id: true,
          status: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DegreeStatus })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDegreeStatus(
    @common.Param() params: DegreeStatusWhereUniqueInput
  ): Promise<DegreeStatus | null> {
    try {
      return await this.service.deleteDegreeStatus({
        where: params,
        select: {
          date: true,
          id: true,
          status: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
