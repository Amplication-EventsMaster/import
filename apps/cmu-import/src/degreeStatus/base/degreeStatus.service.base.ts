/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DegreeStatus as PrismaDegreeStatus,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class DegreeStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DegreeStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.degreeStatus.count(args);
  }

  async degreeStatuses<T extends Prisma.DegreeStatusFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeStatusFindManyArgs>
  ): Promise<PrismaDegreeStatus[]> {
    return this.prisma.degreeStatus.findMany<Prisma.DegreeStatusFindManyArgs>(
      args
    );
  }
  async degreeStatus<T extends Prisma.DegreeStatusFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeStatusFindUniqueArgs>
  ): Promise<PrismaDegreeStatus | null> {
    return this.prisma.degreeStatus.findUnique(args);
  }
  async createDegreeStatus<T extends Prisma.DegreeStatusCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeStatusCreateArgs>
  ): Promise<PrismaDegreeStatus> {
    return this.prisma.degreeStatus.create<T>(args);
  }
  async updateDegreeStatus<T extends Prisma.DegreeStatusUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeStatusUpdateArgs>
  ): Promise<PrismaDegreeStatus> {
    return this.prisma.degreeStatus.update<T>(args);
  }
  async deleteDegreeStatus<T extends Prisma.DegreeStatusDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DegreeStatusDeleteArgs>
  ): Promise<PrismaDegreeStatus> {
    return this.prisma.degreeStatus.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.degreeStatus
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
