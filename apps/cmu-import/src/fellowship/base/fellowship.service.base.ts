/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Fellowship as PrismaFellowship,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class FellowshipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FellowshipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fellowship.count(args);
  }

  async fellowships<T extends Prisma.FellowshipFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipFindManyArgs>
  ): Promise<PrismaFellowship[]> {
    return this.prisma.fellowship.findMany<Prisma.FellowshipFindManyArgs>(args);
  }
  async fellowship<T extends Prisma.FellowshipFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipFindUniqueArgs>
  ): Promise<PrismaFellowship | null> {
    return this.prisma.fellowship.findUnique(args);
  }
  async createFellowship<T extends Prisma.FellowshipCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipCreateArgs>
  ): Promise<PrismaFellowship> {
    return this.prisma.fellowship.create<T>(args);
  }
  async updateFellowship<T extends Prisma.FellowshipUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipUpdateArgs>
  ): Promise<PrismaFellowship> {
    return this.prisma.fellowship.update<T>(args);
  }
  async deleteFellowship<T extends Prisma.FellowshipDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FellowshipDeleteArgs>
  ): Promise<PrismaFellowship> {
    return this.prisma.fellowship.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.fellowship
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
