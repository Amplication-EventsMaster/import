/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Internship } from "./Internship";
import { InternshipCountArgs } from "./InternshipCountArgs";
import { InternshipFindManyArgs } from "./InternshipFindManyArgs";
import { InternshipFindUniqueArgs } from "./InternshipFindUniqueArgs";
import { CreateInternshipArgs } from "./CreateInternshipArgs";
import { UpdateInternshipArgs } from "./UpdateInternshipArgs";
import { DeleteInternshipArgs } from "./DeleteInternshipArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { InternshipService } from "../internship.service";
@graphql.Resolver(() => Internship)
export class InternshipResolverBase {
  constructor(protected readonly service: InternshipService) {}

  async _internshipsMeta(
    @graphql.Args() args: InternshipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Internship])
  async internships(
    @graphql.Args() args: InternshipFindManyArgs
  ): Promise<Internship[]> {
    return this.service.internships(args);
  }

  @graphql.Query(() => Internship, { nullable: true })
  async internship(
    @graphql.Args() args: InternshipFindUniqueArgs
  ): Promise<Internship | null> {
    const result = await this.service.internship(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Internship)
  async createInternship(
    @graphql.Args() args: CreateInternshipArgs
  ): Promise<Internship> {
    return await this.service.createInternship({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => Internship)
  async updateInternship(
    @graphql.Args() args: UpdateInternshipArgs
  ): Promise<Internship | null> {
    try {
      return await this.service.updateInternship({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Internship)
  async deleteInternship(
    @graphql.Args() args: DeleteInternshipArgs
  ): Promise<Internship | null> {
    try {
      return await this.service.deleteInternship(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: Internship
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
