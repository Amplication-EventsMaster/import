/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternshipService } from "../internship.service";
import { InternshipCreateInput } from "./InternshipCreateInput";
import { Internship } from "./Internship";
import { InternshipFindManyArgs } from "./InternshipFindManyArgs";
import { InternshipWhereUniqueInput } from "./InternshipWhereUniqueInput";
import { InternshipUpdateInput } from "./InternshipUpdateInput";

export class InternshipControllerBase {
  constructor(protected readonly service: InternshipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Internship })
  async createInternship(
    @common.Body() data: InternshipCreateInput
  ): Promise<Internship> {
    return await this.service.createInternship({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        company: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Internship] })
  @ApiNestedQuery(InternshipFindManyArgs)
  async internships(@common.Req() request: Request): Promise<Internship[]> {
    const args = plainToClass(InternshipFindManyArgs, request.query);
    return this.service.internships({
      ...args,
      select: {
        company: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Internship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internship(
    @common.Param() params: InternshipWhereUniqueInput
  ): Promise<Internship | null> {
    const result = await this.service.internship({
      where: params,
      select: {
        company: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Internship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternship(
    @common.Param() params: InternshipWhereUniqueInput,
    @common.Body() data: InternshipUpdateInput
  ): Promise<Internship | null> {
    try {
      return await this.service.updateInternship({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          company: true,
          endDate: true,
          id: true,
          pending: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Internship })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternship(
    @common.Param() params: InternshipWhereUniqueInput
  ): Promise<Internship | null> {
    try {
      return await this.service.deleteInternship({
        where: params,
        select: {
          company: true,
          endDate: true,
          id: true,
          pending: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
