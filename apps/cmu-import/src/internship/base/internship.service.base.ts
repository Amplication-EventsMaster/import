/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Internship as PrismaInternship,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class InternshipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InternshipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.internship.count(args);
  }

  async internships<T extends Prisma.InternshipFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipFindManyArgs>
  ): Promise<PrismaInternship[]> {
    return this.prisma.internship.findMany<Prisma.InternshipFindManyArgs>(args);
  }
  async internship<T extends Prisma.InternshipFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipFindUniqueArgs>
  ): Promise<PrismaInternship | null> {
    return this.prisma.internship.findUnique(args);
  }
  async createInternship<T extends Prisma.InternshipCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipCreateArgs>
  ): Promise<PrismaInternship> {
    return this.prisma.internship.create<T>(args);
  }
  async updateInternship<T extends Prisma.InternshipUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipUpdateArgs>
  ): Promise<PrismaInternship> {
    return this.prisma.internship.update<T>(args);
  }
  async deleteInternship<T extends Prisma.InternshipDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipDeleteArgs>
  ): Promise<PrismaInternship> {
    return this.prisma.internship.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.internship
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
