/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Interview as PrismaInterview,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class InterviewServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InterviewCountArgs, "select">
  ): Promise<number> {
    return this.prisma.interview.count(args);
  }

  async interviews<T extends Prisma.InterviewFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterviewFindManyArgs>
  ): Promise<PrismaInterview[]> {
    return this.prisma.interview.findMany<Prisma.InterviewFindManyArgs>(args);
  }
  async interview<T extends Prisma.InterviewFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterviewFindUniqueArgs>
  ): Promise<PrismaInterview | null> {
    return this.prisma.interview.findUnique(args);
  }
  async createInterview<T extends Prisma.InterviewCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterviewCreateArgs>
  ): Promise<PrismaInterview> {
    return this.prisma.interview.create<T>(args);
  }
  async updateInterview<T extends Prisma.InterviewUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterviewUpdateArgs>
  ): Promise<PrismaInterview> {
    return this.prisma.interview.update<T>(args);
  }
  async deleteInterview<T extends Prisma.InterviewDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InterviewDeleteArgs>
  ): Promise<PrismaInterview> {
    return this.prisma.interview.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.interview
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
