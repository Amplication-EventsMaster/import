/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Funding as PrismaFunding,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class FundingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FundingCountArgs, "select">): Promise<number> {
    return this.prisma.funding.count(args);
  }

  async fundings<T extends Prisma.FundingFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FundingFindManyArgs>
  ): Promise<PrismaFunding[]> {
    return this.prisma.funding.findMany<Prisma.FundingFindManyArgs>(args);
  }
  async funding<T extends Prisma.FundingFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FundingFindUniqueArgs>
  ): Promise<PrismaFunding | null> {
    return this.prisma.funding.findUnique(args);
  }
  async createFunding<T extends Prisma.FundingCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FundingCreateArgs>
  ): Promise<PrismaFunding> {
    return this.prisma.funding.create<T>(args);
  }
  async updateFunding<T extends Prisma.FundingUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FundingUpdateArgs>
  ): Promise<PrismaFunding> {
    return this.prisma.funding.update<T>(args);
  }
  async deleteFunding<T extends Prisma.FundingDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FundingDeleteArgs>
  ): Promise<PrismaFunding> {
    return this.prisma.funding.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.funding
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
