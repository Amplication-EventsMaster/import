/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FundingService } from "../funding.service";
import { FundingCreateInput } from "./FundingCreateInput";
import { Funding } from "./Funding";
import { FundingFindManyArgs } from "./FundingFindManyArgs";
import { FundingWhereUniqueInput } from "./FundingWhereUniqueInput";
import { FundingUpdateInput } from "./FundingUpdateInput";

export class FundingControllerBase {
  constructor(protected readonly service: FundingService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Funding })
  async createFunding(
    @common.Body() data: FundingCreateInput
  ): Promise<Funding> {
    return await this.service.createFunding({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        fundingDate: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Funding] })
  @ApiNestedQuery(FundingFindManyArgs)
  async fundings(@common.Req() request: Request): Promise<Funding[]> {
    const args = plainToClass(FundingFindManyArgs, request.query);
    return this.service.fundings({
      ...args,
      select: {
        fundingDate: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Funding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async funding(
    @common.Param() params: FundingWhereUniqueInput
  ): Promise<Funding | null> {
    const result = await this.service.funding({
      where: params,
      select: {
        fundingDate: true,
        id: true,

        studentData: {
          select: {
            id: true,
          },
        },

        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Funding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFunding(
    @common.Param() params: FundingWhereUniqueInput,
    @common.Body() data: FundingUpdateInput
  ): Promise<Funding | null> {
    try {
      return await this.service.updateFunding({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          fundingDate: true,
          id: true,

          studentData: {
            select: {
              id: true,
            },
          },

          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Funding })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFunding(
    @common.Param() params: FundingWhereUniqueInput
  ): Promise<Funding | null> {
    try {
      return await this.service.deleteFunding({
        where: params,
        select: {
          fundingDate: true,
          id: true,

          studentData: {
            select: {
              id: true,
            },
          },

          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
