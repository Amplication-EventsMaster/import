/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Funding } from "./Funding";
import { FundingCountArgs } from "./FundingCountArgs";
import { FundingFindManyArgs } from "./FundingFindManyArgs";
import { FundingFindUniqueArgs } from "./FundingFindUniqueArgs";
import { CreateFundingArgs } from "./CreateFundingArgs";
import { UpdateFundingArgs } from "./UpdateFundingArgs";
import { DeleteFundingArgs } from "./DeleteFundingArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { FundingService } from "../funding.service";
@graphql.Resolver(() => Funding)
export class FundingResolverBase {
  constructor(protected readonly service: FundingService) {}

  async _fundingsMeta(
    @graphql.Args() args: FundingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Funding])
  async fundings(
    @graphql.Args() args: FundingFindManyArgs
  ): Promise<Funding[]> {
    return this.service.fundings(args);
  }

  @graphql.Query(() => Funding, { nullable: true })
  async funding(
    @graphql.Args() args: FundingFindUniqueArgs
  ): Promise<Funding | null> {
    const result = await this.service.funding(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Funding)
  async createFunding(
    @graphql.Args() args: CreateFundingArgs
  ): Promise<Funding> {
    return await this.service.createFunding({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => Funding)
  async updateFunding(
    @graphql.Args() args: UpdateFundingArgs
  ): Promise<Funding | null> {
    try {
      return await this.service.updateFunding({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Funding)
  async deleteFunding(
    @graphql.Args() args: DeleteFundingArgs
  ): Promise<Funding | null> {
    try {
      return await this.service.deleteFunding(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: Funding
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
