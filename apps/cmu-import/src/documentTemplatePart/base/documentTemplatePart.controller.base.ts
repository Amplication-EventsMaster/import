/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DocumentTemplatePartService } from "../documentTemplatePart.service";
import { DocumentTemplatePartCreateInput } from "./DocumentTemplatePartCreateInput";
import { DocumentTemplatePart } from "./DocumentTemplatePart";
import { DocumentTemplatePartFindManyArgs } from "./DocumentTemplatePartFindManyArgs";
import { DocumentTemplatePartWhereUniqueInput } from "./DocumentTemplatePartWhereUniqueInput";
import { DocumentTemplatePartUpdateInput } from "./DocumentTemplatePartUpdateInput";

export class DocumentTemplatePartControllerBase {
  constructor(protected readonly service: DocumentTemplatePartService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DocumentTemplatePart })
  async createDocumentTemplatePart(
    @common.Body() data: DocumentTemplatePartCreateInput
  ): Promise<DocumentTemplatePart> {
    return await this.service.createDocumentTemplatePart({
      data: data,
      select: {
        advisorHide: true,
        defaultText: true,
        id: true,
        keepWithNext: true,
        partOrder: true,
        templateId: true,
        typeField: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DocumentTemplatePart] })
  @ApiNestedQuery(DocumentTemplatePartFindManyArgs)
  async documentTemplateParts(
    @common.Req() request: Request
  ): Promise<DocumentTemplatePart[]> {
    const args = plainToClass(DocumentTemplatePartFindManyArgs, request.query);
    return this.service.documentTemplateParts({
      ...args,
      select: {
        advisorHide: true,
        defaultText: true,
        id: true,
        keepWithNext: true,
        partOrder: true,
        templateId: true,
        typeField: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DocumentTemplatePart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async documentTemplatePart(
    @common.Param() params: DocumentTemplatePartWhereUniqueInput
  ): Promise<DocumentTemplatePart | null> {
    const result = await this.service.documentTemplatePart({
      where: params,
      select: {
        advisorHide: true,
        defaultText: true,
        id: true,
        keepWithNext: true,
        partOrder: true,
        templateId: true,
        typeField: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DocumentTemplatePart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDocumentTemplatePart(
    @common.Param() params: DocumentTemplatePartWhereUniqueInput,
    @common.Body() data: DocumentTemplatePartUpdateInput
  ): Promise<DocumentTemplatePart | null> {
    try {
      return await this.service.updateDocumentTemplatePart({
        where: params,
        data: data,
        select: {
          advisorHide: true,
          defaultText: true,
          id: true,
          keepWithNext: true,
          partOrder: true,
          templateId: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DocumentTemplatePart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDocumentTemplatePart(
    @common.Param() params: DocumentTemplatePartWhereUniqueInput
  ): Promise<DocumentTemplatePart | null> {
    try {
      return await this.service.deleteDocumentTemplatePart({
        where: params,
        select: {
          advisorHide: true,
          defaultText: true,
          id: true,
          keepWithNext: true,
          partOrder: true,
          templateId: true,
          typeField: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
