/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DocumentTemplatePart } from "./DocumentTemplatePart";
import { DocumentTemplatePartCountArgs } from "./DocumentTemplatePartCountArgs";
import { DocumentTemplatePartFindManyArgs } from "./DocumentTemplatePartFindManyArgs";
import { DocumentTemplatePartFindUniqueArgs } from "./DocumentTemplatePartFindUniqueArgs";
import { CreateDocumentTemplatePartArgs } from "./CreateDocumentTemplatePartArgs";
import { UpdateDocumentTemplatePartArgs } from "./UpdateDocumentTemplatePartArgs";
import { DeleteDocumentTemplatePartArgs } from "./DeleteDocumentTemplatePartArgs";
import { DocumentTemplatePartService } from "../documentTemplatePart.service";
@graphql.Resolver(() => DocumentTemplatePart)
export class DocumentTemplatePartResolverBase {
  constructor(protected readonly service: DocumentTemplatePartService) {}

  async _documentTemplatePartsMeta(
    @graphql.Args() args: DocumentTemplatePartCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DocumentTemplatePart])
  async documentTemplateParts(
    @graphql.Args() args: DocumentTemplatePartFindManyArgs
  ): Promise<DocumentTemplatePart[]> {
    return this.service.documentTemplateParts(args);
  }

  @graphql.Query(() => DocumentTemplatePart, { nullable: true })
  async documentTemplatePart(
    @graphql.Args() args: DocumentTemplatePartFindUniqueArgs
  ): Promise<DocumentTemplatePart | null> {
    const result = await this.service.documentTemplatePart(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DocumentTemplatePart)
  async createDocumentTemplatePart(
    @graphql.Args() args: CreateDocumentTemplatePartArgs
  ): Promise<DocumentTemplatePart> {
    return await this.service.createDocumentTemplatePart({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DocumentTemplatePart)
  async updateDocumentTemplatePart(
    @graphql.Args() args: UpdateDocumentTemplatePartArgs
  ): Promise<DocumentTemplatePart | null> {
    try {
      return await this.service.updateDocumentTemplatePart({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DocumentTemplatePart)
  async deleteDocumentTemplatePart(
    @graphql.Args() args: DeleteDocumentTemplatePartArgs
  ): Promise<DocumentTemplatePart | null> {
    try {
      return await this.service.deleteDocumentTemplatePart(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
