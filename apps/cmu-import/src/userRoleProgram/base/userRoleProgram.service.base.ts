/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UserRoleProgram as PrismaUserRoleProgram,
} from "@prisma/client";

export class UserRoleProgramServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserRoleProgramCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userRoleProgram.count(args);
  }

  async userRolePrograms<T extends Prisma.UserRoleProgramFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserRoleProgramFindManyArgs>
  ): Promise<PrismaUserRoleProgram[]> {
    return this.prisma.userRoleProgram.findMany<Prisma.UserRoleProgramFindManyArgs>(
      args
    );
  }
  async userRoleProgram<T extends Prisma.UserRoleProgramFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserRoleProgramFindUniqueArgs>
  ): Promise<PrismaUserRoleProgram | null> {
    return this.prisma.userRoleProgram.findUnique(args);
  }
  async createUserRoleProgram<T extends Prisma.UserRoleProgramCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserRoleProgramCreateArgs>
  ): Promise<PrismaUserRoleProgram> {
    return this.prisma.userRoleProgram.create<T>(args);
  }
  async updateUserRoleProgram<T extends Prisma.UserRoleProgramUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserRoleProgramUpdateArgs>
  ): Promise<PrismaUserRoleProgram> {
    return this.prisma.userRoleProgram.update<T>(args);
  }
  async deleteUserRoleProgram<T extends Prisma.UserRoleProgramDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserRoleProgramDeleteArgs>
  ): Promise<PrismaUserRoleProgram> {
    return this.prisma.userRoleProgram.delete(args);
  }
}
