/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserRoleProgramService } from "../userRoleProgram.service";
import { UserRoleProgramCreateInput } from "./UserRoleProgramCreateInput";
import { UserRoleProgram } from "./UserRoleProgram";
import { UserRoleProgramFindManyArgs } from "./UserRoleProgramFindManyArgs";
import { UserRoleProgramWhereUniqueInput } from "./UserRoleProgramWhereUniqueInput";
import { UserRoleProgramUpdateInput } from "./UserRoleProgramUpdateInput";

export class UserRoleProgramControllerBase {
  constructor(protected readonly service: UserRoleProgramService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserRoleProgram })
  async createUserRoleProgram(
    @common.Body() data: UserRoleProgramCreateInput
  ): Promise<UserRoleProgram> {
    return await this.service.createUserRoleProgram({
      data: data,
      select: {
        id: true,
        program: true,
        urId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserRoleProgram] })
  @ApiNestedQuery(UserRoleProgramFindManyArgs)
  async userRolePrograms(
    @common.Req() request: Request
  ): Promise<UserRoleProgram[]> {
    const args = plainToClass(UserRoleProgramFindManyArgs, request.query);
    return this.service.userRolePrograms({
      ...args,
      select: {
        id: true,
        program: true,
        urId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserRoleProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userRoleProgram(
    @common.Param() params: UserRoleProgramWhereUniqueInput
  ): Promise<UserRoleProgram | null> {
    const result = await this.service.userRoleProgram({
      where: params,
      select: {
        id: true,
        program: true,
        urId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserRoleProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserRoleProgram(
    @common.Param() params: UserRoleProgramWhereUniqueInput,
    @common.Body() data: UserRoleProgramUpdateInput
  ): Promise<UserRoleProgram | null> {
    try {
      return await this.service.updateUserRoleProgram({
        where: params,
        data: data,
        select: {
          id: true,
          program: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserRoleProgram })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserRoleProgram(
    @common.Param() params: UserRoleProgramWhereUniqueInput
  ): Promise<UserRoleProgram | null> {
    try {
      return await this.service.deleteUserRoleProgram({
        where: params,
        select: {
          id: true,
          program: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
