/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ReportDeptVisibility as PrismaReportDeptVisibility,
  Report as PrismaReport,
} from "@prisma/client";

export class ReportDeptVisibilityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ReportDeptVisibilityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.reportDeptVisibility.count(args);
  }

  async reportDeptVisibilities<
    T extends Prisma.ReportDeptVisibilityFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ReportDeptVisibilityFindManyArgs>
  ): Promise<PrismaReportDeptVisibility[]> {
    return this.prisma.reportDeptVisibility.findMany<Prisma.ReportDeptVisibilityFindManyArgs>(
      args
    );
  }
  async reportDeptVisibility<
    T extends Prisma.ReportDeptVisibilityFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ReportDeptVisibilityFindUniqueArgs>
  ): Promise<PrismaReportDeptVisibility | null> {
    return this.prisma.reportDeptVisibility.findUnique(args);
  }
  async createReportDeptVisibility<
    T extends Prisma.ReportDeptVisibilityCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ReportDeptVisibilityCreateArgs>
  ): Promise<PrismaReportDeptVisibility> {
    return this.prisma.reportDeptVisibility.create<T>(args);
  }
  async updateReportDeptVisibility<
    T extends Prisma.ReportDeptVisibilityUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ReportDeptVisibilityUpdateArgs>
  ): Promise<PrismaReportDeptVisibility> {
    return this.prisma.reportDeptVisibility.update<T>(args);
  }
  async deleteReportDeptVisibility<
    T extends Prisma.ReportDeptVisibilityDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ReportDeptVisibilityDeleteArgs>
  ): Promise<PrismaReportDeptVisibility> {
    return this.prisma.reportDeptVisibility.delete(args);
  }

  async getReports(parentId: number): Promise<PrismaReport | null> {
    return this.prisma.reportDeptVisibility
      .findUnique({
        where: { id: parentId },
      })
      .reports();
  }
}
