/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReportDeptVisibility } from "./ReportDeptVisibility";
import { ReportDeptVisibilityCountArgs } from "./ReportDeptVisibilityCountArgs";
import { ReportDeptVisibilityFindManyArgs } from "./ReportDeptVisibilityFindManyArgs";
import { ReportDeptVisibilityFindUniqueArgs } from "./ReportDeptVisibilityFindUniqueArgs";
import { CreateReportDeptVisibilityArgs } from "./CreateReportDeptVisibilityArgs";
import { UpdateReportDeptVisibilityArgs } from "./UpdateReportDeptVisibilityArgs";
import { DeleteReportDeptVisibilityArgs } from "./DeleteReportDeptVisibilityArgs";
import { Report } from "../../report/base/Report";
import { ReportDeptVisibilityService } from "../reportDeptVisibility.service";
@graphql.Resolver(() => ReportDeptVisibility)
export class ReportDeptVisibilityResolverBase {
  constructor(protected readonly service: ReportDeptVisibilityService) {}

  async _reportDeptVisibilitiesMeta(
    @graphql.Args() args: ReportDeptVisibilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportDeptVisibility])
  async reportDeptVisibilities(
    @graphql.Args() args: ReportDeptVisibilityFindManyArgs
  ): Promise<ReportDeptVisibility[]> {
    return this.service.reportDeptVisibilities(args);
  }

  @graphql.Query(() => ReportDeptVisibility, { nullable: true })
  async reportDeptVisibility(
    @graphql.Args() args: ReportDeptVisibilityFindUniqueArgs
  ): Promise<ReportDeptVisibility | null> {
    const result = await this.service.reportDeptVisibility(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportDeptVisibility)
  async createReportDeptVisibility(
    @graphql.Args() args: CreateReportDeptVisibilityArgs
  ): Promise<ReportDeptVisibility> {
    return await this.service.createReportDeptVisibility({
      ...args,
      data: {
        ...args.data,

        reports: {
          connect: args.data.reports,
        },
      },
    });
  }

  @graphql.Mutation(() => ReportDeptVisibility)
  async updateReportDeptVisibility(
    @graphql.Args() args: UpdateReportDeptVisibilityArgs
  ): Promise<ReportDeptVisibility | null> {
    try {
      return await this.service.updateReportDeptVisibility({
        ...args,
        data: {
          ...args.data,

          reports: {
            connect: args.data.reports,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReportDeptVisibility)
  async deleteReportDeptVisibility(
    @graphql.Args() args: DeleteReportDeptVisibilityArgs
  ): Promise<ReportDeptVisibility | null> {
    try {
      return await this.service.deleteReportDeptVisibility(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Report, {
    nullable: true,
    name: "reports",
  })
  async getReports(
    @graphql.Parent() parent: ReportDeptVisibility
  ): Promise<Report | null> {
    const result = await this.service.getReports(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
