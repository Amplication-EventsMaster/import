/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentInstitute } from "./StudentInstitute";
import { StudentInstituteCountArgs } from "./StudentInstituteCountArgs";
import { StudentInstituteFindManyArgs } from "./StudentInstituteFindManyArgs";
import { StudentInstituteFindUniqueArgs } from "./StudentInstituteFindUniqueArgs";
import { CreateStudentInstituteArgs } from "./CreateStudentInstituteArgs";
import { UpdateStudentInstituteArgs } from "./UpdateStudentInstituteArgs";
import { DeleteStudentInstituteArgs } from "./DeleteStudentInstituteArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentInstituteService } from "../studentInstitute.service";
@graphql.Resolver(() => StudentInstitute)
export class StudentInstituteResolverBase {
  constructor(protected readonly service: StudentInstituteService) {}

  async _studentInstitutesMeta(
    @graphql.Args() args: StudentInstituteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentInstitute])
  async studentInstitutes(
    @graphql.Args() args: StudentInstituteFindManyArgs
  ): Promise<StudentInstitute[]> {
    return this.service.studentInstitutes(args);
  }

  @graphql.Query(() => StudentInstitute, { nullable: true })
  async studentInstitute(
    @graphql.Args() args: StudentInstituteFindUniqueArgs
  ): Promise<StudentInstitute | null> {
    const result = await this.service.studentInstitute(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentInstitute)
  async createStudentInstitute(
    @graphql.Args() args: CreateStudentInstituteArgs
  ): Promise<StudentInstitute> {
    return await this.service.createStudentInstitute({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentInstitute)
  async updateStudentInstitute(
    @graphql.Args() args: UpdateStudentInstituteArgs
  ): Promise<StudentInstitute | null> {
    try {
      return await this.service.updateStudentInstitute({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentInstitute)
  async deleteStudentInstitute(
    @graphql.Args() args: DeleteStudentInstituteArgs
  ): Promise<StudentInstitute | null> {
    try {
      return await this.service.deleteStudentInstitute(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentInstitute
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
