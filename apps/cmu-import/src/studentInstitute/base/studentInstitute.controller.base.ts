/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentInstituteService } from "../studentInstitute.service";
import { StudentInstituteCreateInput } from "./StudentInstituteCreateInput";
import { StudentInstitute } from "./StudentInstitute";
import { StudentInstituteFindManyArgs } from "./StudentInstituteFindManyArgs";
import { StudentInstituteWhereUniqueInput } from "./StudentInstituteWhereUniqueInput";
import { StudentInstituteUpdateInput } from "./StudentInstituteUpdateInput";

export class StudentInstituteControllerBase {
  constructor(protected readonly service: StudentInstituteService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentInstitute })
  async createStudentInstitute(
    @common.Body() data: StudentInstituteCreateInput
  ): Promise<StudentInstitute> {
    return await this.service.createStudentInstitute({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        degree: true,
        id: true,
        institutesAbbr: true,
        institutesId: true,
        institutesName: true,
        institutesText: true,
        irank: true,
        major: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentInstitute] })
  @ApiNestedQuery(StudentInstituteFindManyArgs)
  async studentInstitutes(
    @common.Req() request: Request
  ): Promise<StudentInstitute[]> {
    const args = plainToClass(StudentInstituteFindManyArgs, request.query);
    return this.service.studentInstitutes({
      ...args,
      select: {
        degree: true,
        id: true,
        institutesAbbr: true,
        institutesId: true,
        institutesName: true,
        institutesText: true,
        irank: true,
        major: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentInstitute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentInstitute(
    @common.Param() params: StudentInstituteWhereUniqueInput
  ): Promise<StudentInstitute | null> {
    const result = await this.service.studentInstitute({
      where: params,
      select: {
        degree: true,
        id: true,
        institutesAbbr: true,
        institutesId: true,
        institutesName: true,
        institutesText: true,
        irank: true,
        major: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentInstitute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentInstitute(
    @common.Param() params: StudentInstituteWhereUniqueInput,
    @common.Body() data: StudentInstituteUpdateInput
  ): Promise<StudentInstitute | null> {
    try {
      return await this.service.updateStudentInstitute({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          degree: true,
          id: true,
          institutesAbbr: true,
          institutesId: true,
          institutesName: true,
          institutesText: true,
          irank: true,
          major: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentInstitute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentInstitute(
    @common.Param() params: StudentInstituteWhereUniqueInput
  ): Promise<StudentInstitute | null> {
    try {
      return await this.service.deleteStudentInstitute({
        where: params,
        select: {
          degree: true,
          id: true,
          institutesAbbr: true,
          institutesId: true,
          institutesName: true,
          institutesText: true,
          irank: true,
          major: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
