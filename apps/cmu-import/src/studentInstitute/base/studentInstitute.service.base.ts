/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentInstitute as PrismaStudentInstitute,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentInstituteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentInstituteCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentInstitute.count(args);
  }

  async studentInstitutes<T extends Prisma.StudentInstituteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentInstituteFindManyArgs>
  ): Promise<PrismaStudentInstitute[]> {
    return this.prisma.studentInstitute.findMany<Prisma.StudentInstituteFindManyArgs>(
      args
    );
  }
  async studentInstitute<T extends Prisma.StudentInstituteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentInstituteFindUniqueArgs>
  ): Promise<PrismaStudentInstitute | null> {
    return this.prisma.studentInstitute.findUnique(args);
  }
  async createStudentInstitute<T extends Prisma.StudentInstituteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentInstituteCreateArgs>
  ): Promise<PrismaStudentInstitute> {
    return this.prisma.studentInstitute.create<T>(args);
  }
  async updateStudentInstitute<T extends Prisma.StudentInstituteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentInstituteUpdateArgs>
  ): Promise<PrismaStudentInstitute> {
    return this.prisma.studentInstitute.update<T>(args);
  }
  async deleteStudentInstitute<T extends Prisma.StudentInstituteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentInstituteDeleteArgs>
  ): Promise<PrismaStudentInstitute> {
    return this.prisma.studentInstitute.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentInstitute
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
