/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentAdvisor as PrismaStudentAdvisor,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentAdvisorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentAdvisorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentAdvisor.count(args);
  }

  async studentAdvisors<T extends Prisma.StudentAdvisorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAdvisorFindManyArgs>
  ): Promise<PrismaStudentAdvisor[]> {
    return this.prisma.studentAdvisor.findMany<Prisma.StudentAdvisorFindManyArgs>(
      args
    );
  }
  async studentAdvisor<T extends Prisma.StudentAdvisorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAdvisorFindUniqueArgs>
  ): Promise<PrismaStudentAdvisor | null> {
    return this.prisma.studentAdvisor.findUnique(args);
  }
  async createStudentAdvisor<T extends Prisma.StudentAdvisorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAdvisorCreateArgs>
  ): Promise<PrismaStudentAdvisor> {
    return this.prisma.studentAdvisor.create<T>(args);
  }
  async updateStudentAdvisor<T extends Prisma.StudentAdvisorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAdvisorUpdateArgs>
  ): Promise<PrismaStudentAdvisor> {
    return this.prisma.studentAdvisor.update<T>(args);
  }
  async deleteStudentAdvisor<T extends Prisma.StudentAdvisorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentAdvisorDeleteArgs>
  ): Promise<PrismaStudentAdvisor> {
    return this.prisma.studentAdvisor.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentAdvisor
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
