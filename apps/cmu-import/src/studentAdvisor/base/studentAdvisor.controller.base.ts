/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentAdvisorService } from "../studentAdvisor.service";
import { StudentAdvisorCreateInput } from "./StudentAdvisorCreateInput";
import { StudentAdvisor } from "./StudentAdvisor";
import { StudentAdvisorFindManyArgs } from "./StudentAdvisorFindManyArgs";
import { StudentAdvisorWhereUniqueInput } from "./StudentAdvisorWhereUniqueInput";
import { StudentAdvisorUpdateInput } from "./StudentAdvisorUpdateInput";

export class StudentAdvisorControllerBase {
  constructor(protected readonly service: StudentAdvisorService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentAdvisor })
  async createStudentAdvisor(
    @common.Body() data: StudentAdvisorCreateInput
  ): Promise<StudentAdvisor> {
    return await this.service.createStudentAdvisor({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentAdvisor] })
  @ApiNestedQuery(StudentAdvisorFindManyArgs)
  async studentAdvisors(
    @common.Req() request: Request
  ): Promise<StudentAdvisor[]> {
    const args = plainToClass(StudentAdvisorFindManyArgs, request.query);
    return this.service.studentAdvisors({
      ...args,
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentAdvisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentAdvisor(
    @common.Param() params: StudentAdvisorWhereUniqueInput
  ): Promise<StudentAdvisor | null> {
    const result = await this.service.studentAdvisor({
      where: params,
      select: {
        consultant: true,
        current: true,
        endDate: true,
        facultyId: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentAdvisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentAdvisor(
    @common.Param() params: StudentAdvisorWhereUniqueInput,
    @common.Body() data: StudentAdvisorUpdateInput
  ): Promise<StudentAdvisor | null> {
    try {
      return await this.service.updateStudentAdvisor({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          consultant: true,
          current: true,
          endDate: true,
          facultyId: true,
          id: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentAdvisor })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentAdvisor(
    @common.Param() params: StudentAdvisorWhereUniqueInput
  ): Promise<StudentAdvisor | null> {
    try {
      return await this.service.deleteStudentAdvisor({
        where: params,
        select: {
          consultant: true,
          current: true,
          endDate: true,
          facultyId: true,
          id: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
