/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentAdvisor } from "./StudentAdvisor";
import { StudentAdvisorCountArgs } from "./StudentAdvisorCountArgs";
import { StudentAdvisorFindManyArgs } from "./StudentAdvisorFindManyArgs";
import { StudentAdvisorFindUniqueArgs } from "./StudentAdvisorFindUniqueArgs";
import { CreateStudentAdvisorArgs } from "./CreateStudentAdvisorArgs";
import { UpdateStudentAdvisorArgs } from "./UpdateStudentAdvisorArgs";
import { DeleteStudentAdvisorArgs } from "./DeleteStudentAdvisorArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentAdvisorService } from "../studentAdvisor.service";
@graphql.Resolver(() => StudentAdvisor)
export class StudentAdvisorResolverBase {
  constructor(protected readonly service: StudentAdvisorService) {}

  async _studentAdvisorsMeta(
    @graphql.Args() args: StudentAdvisorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentAdvisor])
  async studentAdvisors(
    @graphql.Args() args: StudentAdvisorFindManyArgs
  ): Promise<StudentAdvisor[]> {
    return this.service.studentAdvisors(args);
  }

  @graphql.Query(() => StudentAdvisor, { nullable: true })
  async studentAdvisor(
    @graphql.Args() args: StudentAdvisorFindUniqueArgs
  ): Promise<StudentAdvisor | null> {
    const result = await this.service.studentAdvisor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentAdvisor)
  async createStudentAdvisor(
    @graphql.Args() args: CreateStudentAdvisorArgs
  ): Promise<StudentAdvisor> {
    return await this.service.createStudentAdvisor({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentAdvisor)
  async updateStudentAdvisor(
    @graphql.Args() args: UpdateStudentAdvisorArgs
  ): Promise<StudentAdvisor | null> {
    try {
      return await this.service.updateStudentAdvisor({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentAdvisor)
  async deleteStudentAdvisor(
    @graphql.Args() args: DeleteStudentAdvisorArgs
  ): Promise<StudentAdvisor | null> {
    try {
      return await this.service.deleteStudentAdvisor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentAdvisor
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
