/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DepartmentSignatureImageService } from "../departmentSignatureImage.service";
import { DepartmentSignatureImageCreateInput } from "./DepartmentSignatureImageCreateInput";
import { DepartmentSignatureImage } from "./DepartmentSignatureImage";
import { DepartmentSignatureImageFindManyArgs } from "./DepartmentSignatureImageFindManyArgs";
import { DepartmentSignatureImageWhereUniqueInput } from "./DepartmentSignatureImageWhereUniqueInput";
import { DepartmentSignatureImageUpdateInput } from "./DepartmentSignatureImageUpdateInput";

export class DepartmentSignatureImageControllerBase {
  constructor(protected readonly service: DepartmentSignatureImageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: DepartmentSignatureImage })
  async createDepartmentSignatureImage(
    @common.Body() data: DepartmentSignatureImageCreateInput
  ): Promise<DepartmentSignatureImage> {
    return await this.service.createDepartmentSignatureImage({
      data: data,
      select: {
        displayOrder: true,
        dsigId: true,
        fileDate: true,
        fileName: true,
        fileSize: true,
        fileType: true,
        id: true,
        signatureName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [DepartmentSignatureImage] })
  @ApiNestedQuery(DepartmentSignatureImageFindManyArgs)
  async departmentSignatureImages(
    @common.Req() request: Request
  ): Promise<DepartmentSignatureImage[]> {
    const args = plainToClass(
      DepartmentSignatureImageFindManyArgs,
      request.query
    );
    return this.service.departmentSignatureImages({
      ...args,
      select: {
        displayOrder: true,
        dsigId: true,
        fileDate: true,
        fileName: true,
        fileSize: true,
        fileType: true,
        id: true,
        signatureName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: DepartmentSignatureImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async departmentSignatureImage(
    @common.Param() params: DepartmentSignatureImageWhereUniqueInput
  ): Promise<DepartmentSignatureImage | null> {
    const result = await this.service.departmentSignatureImage({
      where: params,
      select: {
        displayOrder: true,
        dsigId: true,
        fileDate: true,
        fileName: true,
        fileSize: true,
        fileType: true,
        id: true,
        signatureName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: DepartmentSignatureImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDepartmentSignatureImage(
    @common.Param() params: DepartmentSignatureImageWhereUniqueInput,
    @common.Body() data: DepartmentSignatureImageUpdateInput
  ): Promise<DepartmentSignatureImage | null> {
    try {
      return await this.service.updateDepartmentSignatureImage({
        where: params,
        data: data,
        select: {
          displayOrder: true,
          dsigId: true,
          fileDate: true,
          fileName: true,
          fileSize: true,
          fileType: true,
          id: true,
          signatureName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: DepartmentSignatureImage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDepartmentSignatureImage(
    @common.Param() params: DepartmentSignatureImageWhereUniqueInput
  ): Promise<DepartmentSignatureImage | null> {
    try {
      return await this.service.deleteDepartmentSignatureImage({
        where: params,
        select: {
          displayOrder: true,
          dsigId: true,
          fileDate: true,
          fileName: true,
          fileSize: true,
          fileType: true,
          id: true,
          signatureName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
