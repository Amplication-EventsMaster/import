/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DepartmentSignatureImage } from "./DepartmentSignatureImage";
import { DepartmentSignatureImageCountArgs } from "./DepartmentSignatureImageCountArgs";
import { DepartmentSignatureImageFindManyArgs } from "./DepartmentSignatureImageFindManyArgs";
import { DepartmentSignatureImageFindUniqueArgs } from "./DepartmentSignatureImageFindUniqueArgs";
import { CreateDepartmentSignatureImageArgs } from "./CreateDepartmentSignatureImageArgs";
import { UpdateDepartmentSignatureImageArgs } from "./UpdateDepartmentSignatureImageArgs";
import { DeleteDepartmentSignatureImageArgs } from "./DeleteDepartmentSignatureImageArgs";
import { DepartmentSignatureImageService } from "../departmentSignatureImage.service";
@graphql.Resolver(() => DepartmentSignatureImage)
export class DepartmentSignatureImageResolverBase {
  constructor(protected readonly service: DepartmentSignatureImageService) {}

  async _departmentSignatureImagesMeta(
    @graphql.Args() args: DepartmentSignatureImageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [DepartmentSignatureImage])
  async departmentSignatureImages(
    @graphql.Args() args: DepartmentSignatureImageFindManyArgs
  ): Promise<DepartmentSignatureImage[]> {
    return this.service.departmentSignatureImages(args);
  }

  @graphql.Query(() => DepartmentSignatureImage, { nullable: true })
  async departmentSignatureImage(
    @graphql.Args() args: DepartmentSignatureImageFindUniqueArgs
  ): Promise<DepartmentSignatureImage | null> {
    const result = await this.service.departmentSignatureImage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => DepartmentSignatureImage)
  async createDepartmentSignatureImage(
    @graphql.Args() args: CreateDepartmentSignatureImageArgs
  ): Promise<DepartmentSignatureImage> {
    return await this.service.createDepartmentSignatureImage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => DepartmentSignatureImage)
  async updateDepartmentSignatureImage(
    @graphql.Args() args: UpdateDepartmentSignatureImageArgs
  ): Promise<DepartmentSignatureImage | null> {
    try {
      return await this.service.updateDepartmentSignatureImage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DepartmentSignatureImage)
  async deleteDepartmentSignatureImage(
    @graphql.Args() args: DeleteDepartmentSignatureImageArgs
  ): Promise<DepartmentSignatureImage | null> {
    try {
      return await this.service.deleteDepartmentSignatureImage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
