/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Leadership as PrismaLeadership } from "@prisma/client";

export class LeadershipServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeadershipCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leadership.count(args);
  }

  async leaderships<T extends Prisma.LeadershipFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadershipFindManyArgs>
  ): Promise<PrismaLeadership[]> {
    return this.prisma.leadership.findMany<Prisma.LeadershipFindManyArgs>(args);
  }
  async leadership<T extends Prisma.LeadershipFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadershipFindUniqueArgs>
  ): Promise<PrismaLeadership | null> {
    return this.prisma.leadership.findUnique(args);
  }
  async createLeadership<T extends Prisma.LeadershipCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadershipCreateArgs>
  ): Promise<PrismaLeadership> {
    return this.prisma.leadership.create<T>(args);
  }
  async updateLeadership<T extends Prisma.LeadershipUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadershipUpdateArgs>
  ): Promise<PrismaLeadership> {
    return this.prisma.leadership.update<T>(args);
  }
  async deleteLeadership<T extends Prisma.LeadershipDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LeadershipDeleteArgs>
  ): Promise<PrismaLeadership> {
    return this.prisma.leadership.delete(args);
  }
}
