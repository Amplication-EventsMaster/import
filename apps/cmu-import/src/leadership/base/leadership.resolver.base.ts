/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Leadership } from "./Leadership";
import { LeadershipCountArgs } from "./LeadershipCountArgs";
import { LeadershipFindManyArgs } from "./LeadershipFindManyArgs";
import { LeadershipFindUniqueArgs } from "./LeadershipFindUniqueArgs";
import { CreateLeadershipArgs } from "./CreateLeadershipArgs";
import { UpdateLeadershipArgs } from "./UpdateLeadershipArgs";
import { DeleteLeadershipArgs } from "./DeleteLeadershipArgs";
import { LeadershipService } from "../leadership.service";
@graphql.Resolver(() => Leadership)
export class LeadershipResolverBase {
  constructor(protected readonly service: LeadershipService) {}

  async _leadershipsMeta(
    @graphql.Args() args: LeadershipCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Leadership])
  async leaderships(
    @graphql.Args() args: LeadershipFindManyArgs
  ): Promise<Leadership[]> {
    return this.service.leaderships(args);
  }

  @graphql.Query(() => Leadership, { nullable: true })
  async leadership(
    @graphql.Args() args: LeadershipFindUniqueArgs
  ): Promise<Leadership | null> {
    const result = await this.service.leadership(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Leadership)
  async createLeadership(
    @graphql.Args() args: CreateLeadershipArgs
  ): Promise<Leadership> {
    return await this.service.createLeadership({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Leadership)
  async updateLeadership(
    @graphql.Args() args: UpdateLeadershipArgs
  ): Promise<Leadership | null> {
    try {
      return await this.service.updateLeadership({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Leadership)
  async deleteLeadership(
    @graphql.Args() args: DeleteLeadershipArgs
  ): Promise<Leadership | null> {
    try {
      return await this.service.deleteLeadership(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
