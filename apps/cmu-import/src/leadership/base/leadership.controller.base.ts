/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LeadershipService } from "../leadership.service";
import { LeadershipCreateInput } from "./LeadershipCreateInput";
import { Leadership } from "./Leadership";
import { LeadershipFindManyArgs } from "./LeadershipFindManyArgs";
import { LeadershipWhereUniqueInput } from "./LeadershipWhereUniqueInput";
import { LeadershipUpdateInput } from "./LeadershipUpdateInput";

export class LeadershipControllerBase {
  constructor(protected readonly service: LeadershipService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Leadership })
  async createLeadership(
    @common.Body() data: LeadershipCreateInput
  ): Promise<Leadership> {
    return await this.service.createLeadership({
      data: data,
      select: {
        id: true,
        leadershipOther: true,
        startDate: true,
        studentId: true,
        title: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Leadership] })
  @ApiNestedQuery(LeadershipFindManyArgs)
  async leaderships(@common.Req() request: Request): Promise<Leadership[]> {
    const args = plainToClass(LeadershipFindManyArgs, request.query);
    return this.service.leaderships({
      ...args,
      select: {
        id: true,
        leadershipOther: true,
        startDate: true,
        studentId: true,
        title: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Leadership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async leadership(
    @common.Param() params: LeadershipWhereUniqueInput
  ): Promise<Leadership | null> {
    const result = await this.service.leadership({
      where: params,
      select: {
        id: true,
        leadershipOther: true,
        startDate: true,
        studentId: true,
        title: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Leadership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLeadership(
    @common.Param() params: LeadershipWhereUniqueInput,
    @common.Body() data: LeadershipUpdateInput
  ): Promise<Leadership | null> {
    try {
      return await this.service.updateLeadership({
        where: params,
        data: data,
        select: {
          id: true,
          leadershipOther: true,
          startDate: true,
          studentId: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Leadership })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLeadership(
    @common.Param() params: LeadershipWhereUniqueInput
  ): Promise<Leadership | null> {
    try {
      return await this.service.deleteLeadership({
        where: params,
        select: {
          id: true,
          leadershipOther: true,
          startDate: true,
          studentId: true,
          title: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
