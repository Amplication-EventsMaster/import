/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternshipsCdService } from "../internshipsCd.service";
import { InternshipsCdCreateInput } from "./InternshipsCdCreateInput";
import { InternshipsCd } from "./InternshipsCd";
import { InternshipsCdFindManyArgs } from "./InternshipsCdFindManyArgs";
import { InternshipsCdWhereUniqueInput } from "./InternshipsCdWhereUniqueInput";
import { InternshipsCdUpdateInput } from "./InternshipsCdUpdateInput";

export class InternshipsCdControllerBase {
  constructor(protected readonly service: InternshipsCdService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternshipsCd })
  async createInternshipsCd(
    @common.Body() data: InternshipsCdCreateInput
  ): Promise<InternshipsCd> {
    return await this.service.createInternshipsCd({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternshipsCd] })
  @ApiNestedQuery(InternshipsCdFindManyArgs)
  async internshipsCds(
    @common.Req() request: Request
  ): Promise<InternshipsCd[]> {
    const args = plainToClass(InternshipsCdFindManyArgs, request.query);
    return this.service.internshipsCds({
      ...args,
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternshipsCd })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internshipsCd(
    @common.Param() params: InternshipsCdWhereUniqueInput
  ): Promise<InternshipsCd | null> {
    const result = await this.service.internshipsCd({
      where: params,
      select: {
        city: true,
        company: true,
        companyUrl: true,
        endDate: true,
        id: true,
        pending: true,
        startDate: true,
        state: true,

        studentData: {
          select: {
            id: true,
          },
        },

        supervisorEmail: true,
        supervisorName: true,
        supervisorPhone: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternshipsCd })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternshipsCd(
    @common.Param() params: InternshipsCdWhereUniqueInput,
    @common.Body() data: InternshipsCdUpdateInput
  ): Promise<InternshipsCd | null> {
    try {
      return await this.service.updateInternshipsCd({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          city: true,
          company: true,
          companyUrl: true,
          endDate: true,
          id: true,
          pending: true,
          startDate: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },

          supervisorEmail: true,
          supervisorName: true,
          supervisorPhone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternshipsCd })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternshipsCd(
    @common.Param() params: InternshipsCdWhereUniqueInput
  ): Promise<InternshipsCd | null> {
    try {
      return await this.service.deleteInternshipsCd({
        where: params,
        select: {
          city: true,
          company: true,
          companyUrl: true,
          endDate: true,
          id: true,
          pending: true,
          startDate: true,
          state: true,

          studentData: {
            select: {
              id: true,
            },
          },

          supervisorEmail: true,
          supervisorName: true,
          supervisorPhone: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
