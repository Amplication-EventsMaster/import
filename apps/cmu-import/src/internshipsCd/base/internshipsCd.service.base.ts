/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InternshipsCd as PrismaInternshipsCd,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class InternshipsCdServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InternshipsCdCountArgs, "select">
  ): Promise<number> {
    return this.prisma.internshipsCd.count(args);
  }

  async internshipsCds<T extends Prisma.InternshipsCdFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipsCdFindManyArgs>
  ): Promise<PrismaInternshipsCd[]> {
    return this.prisma.internshipsCd.findMany<Prisma.InternshipsCdFindManyArgs>(
      args
    );
  }
  async internshipsCd<T extends Prisma.InternshipsCdFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipsCdFindUniqueArgs>
  ): Promise<PrismaInternshipsCd | null> {
    return this.prisma.internshipsCd.findUnique(args);
  }
  async createInternshipsCd<T extends Prisma.InternshipsCdCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipsCdCreateArgs>
  ): Promise<PrismaInternshipsCd> {
    return this.prisma.internshipsCd.create<T>(args);
  }
  async updateInternshipsCd<T extends Prisma.InternshipsCdUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipsCdUpdateArgs>
  ): Promise<PrismaInternshipsCd> {
    return this.prisma.internshipsCd.update<T>(args);
  }
  async deleteInternshipsCd<T extends Prisma.InternshipsCdDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InternshipsCdDeleteArgs>
  ): Promise<PrismaInternshipsCd> {
    return this.prisma.internshipsCd.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.internshipsCd
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
