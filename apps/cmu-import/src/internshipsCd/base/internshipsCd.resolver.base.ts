/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InternshipsCd } from "./InternshipsCd";
import { InternshipsCdCountArgs } from "./InternshipsCdCountArgs";
import { InternshipsCdFindManyArgs } from "./InternshipsCdFindManyArgs";
import { InternshipsCdFindUniqueArgs } from "./InternshipsCdFindUniqueArgs";
import { CreateInternshipsCdArgs } from "./CreateInternshipsCdArgs";
import { UpdateInternshipsCdArgs } from "./UpdateInternshipsCdArgs";
import { DeleteInternshipsCdArgs } from "./DeleteInternshipsCdArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { InternshipsCdService } from "../internshipsCd.service";
@graphql.Resolver(() => InternshipsCd)
export class InternshipsCdResolverBase {
  constructor(protected readonly service: InternshipsCdService) {}

  async _internshipsCdsMeta(
    @graphql.Args() args: InternshipsCdCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InternshipsCd])
  async internshipsCds(
    @graphql.Args() args: InternshipsCdFindManyArgs
  ): Promise<InternshipsCd[]> {
    return this.service.internshipsCds(args);
  }

  @graphql.Query(() => InternshipsCd, { nullable: true })
  async internshipsCd(
    @graphql.Args() args: InternshipsCdFindUniqueArgs
  ): Promise<InternshipsCd | null> {
    const result = await this.service.internshipsCd(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InternshipsCd)
  async createInternshipsCd(
    @graphql.Args() args: CreateInternshipsCdArgs
  ): Promise<InternshipsCd> {
    return await this.service.createInternshipsCd({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => InternshipsCd)
  async updateInternshipsCd(
    @graphql.Args() args: UpdateInternshipsCdArgs
  ): Promise<InternshipsCd | null> {
    try {
      return await this.service.updateInternshipsCd({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InternshipsCd)
  async deleteInternshipsCd(
    @graphql.Args() args: DeleteInternshipsCdArgs
  ): Promise<InternshipsCd | null> {
    try {
      return await this.service.deleteInternshipsCd(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: InternshipsCd
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
