/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FacultyDatumService } from "../facultyDatum.service";
import { FacultyDatumCreateInput } from "./FacultyDatumCreateInput";
import { FacultyDatum } from "./FacultyDatum";
import { FacultyDatumFindManyArgs } from "./FacultyDatumFindManyArgs";
import { FacultyDatumWhereUniqueInput } from "./FacultyDatumWhereUniqueInput";
import { FacultyDatumUpdateInput } from "./FacultyDatumUpdateInput";

export class FacultyDatumControllerBase {
  constructor(protected readonly service: FacultyDatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FacultyDatum })
  async createFacultyDatum(
    @common.Body() data: FacultyDatumCreateInput
  ): Promise<FacultyDatum> {
    return await this.service.createFacultyDatum({
      data: data,
      select: {
        department: true,
        id: true,
        institutesId: true,
        institutesName: true,
        institution: true,
        institutionAbbr: true,
        status: true,
        title: true,
        urId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FacultyDatum] })
  @ApiNestedQuery(FacultyDatumFindManyArgs)
  async facultyData(@common.Req() request: Request): Promise<FacultyDatum[]> {
    const args = plainToClass(FacultyDatumFindManyArgs, request.query);
    return this.service.facultyData({
      ...args,
      select: {
        department: true,
        id: true,
        institutesId: true,
        institutesName: true,
        institution: true,
        institutionAbbr: true,
        status: true,
        title: true,
        urId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FacultyDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async facultyDatum(
    @common.Param() params: FacultyDatumWhereUniqueInput
  ): Promise<FacultyDatum | null> {
    const result = await this.service.facultyDatum({
      where: params,
      select: {
        department: true,
        id: true,
        institutesId: true,
        institutesName: true,
        institution: true,
        institutionAbbr: true,
        status: true,
        title: true,
        urId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FacultyDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFacultyDatum(
    @common.Param() params: FacultyDatumWhereUniqueInput,
    @common.Body() data: FacultyDatumUpdateInput
  ): Promise<FacultyDatum | null> {
    try {
      return await this.service.updateFacultyDatum({
        where: params,
        data: data,
        select: {
          department: true,
          id: true,
          institutesId: true,
          institutesName: true,
          institution: true,
          institutionAbbr: true,
          status: true,
          title: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FacultyDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFacultyDatum(
    @common.Param() params: FacultyDatumWhereUniqueInput
  ): Promise<FacultyDatum | null> {
    try {
      return await this.service.deleteFacultyDatum({
        where: params,
        select: {
          department: true,
          id: true,
          institutesId: true,
          institutesName: true,
          institution: true,
          institutionAbbr: true,
          status: true,
          title: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
