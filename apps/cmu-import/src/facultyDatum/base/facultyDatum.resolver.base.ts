/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FacultyDatum } from "./FacultyDatum";
import { FacultyDatumCountArgs } from "./FacultyDatumCountArgs";
import { FacultyDatumFindManyArgs } from "./FacultyDatumFindManyArgs";
import { FacultyDatumFindUniqueArgs } from "./FacultyDatumFindUniqueArgs";
import { CreateFacultyDatumArgs } from "./CreateFacultyDatumArgs";
import { UpdateFacultyDatumArgs } from "./UpdateFacultyDatumArgs";
import { DeleteFacultyDatumArgs } from "./DeleteFacultyDatumArgs";
import { FacultyDatumService } from "../facultyDatum.service";
@graphql.Resolver(() => FacultyDatum)
export class FacultyDatumResolverBase {
  constructor(protected readonly service: FacultyDatumService) {}

  async _facultyDataMeta(
    @graphql.Args() args: FacultyDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FacultyDatum])
  async facultyData(
    @graphql.Args() args: FacultyDatumFindManyArgs
  ): Promise<FacultyDatum[]> {
    return this.service.facultyData(args);
  }

  @graphql.Query(() => FacultyDatum, { nullable: true })
  async facultyDatum(
    @graphql.Args() args: FacultyDatumFindUniqueArgs
  ): Promise<FacultyDatum | null> {
    const result = await this.service.facultyDatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FacultyDatum)
  async createFacultyDatum(
    @graphql.Args() args: CreateFacultyDatumArgs
  ): Promise<FacultyDatum> {
    return await this.service.createFacultyDatum({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FacultyDatum)
  async updateFacultyDatum(
    @graphql.Args() args: UpdateFacultyDatumArgs
  ): Promise<FacultyDatum | null> {
    try {
      return await this.service.updateFacultyDatum({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FacultyDatum)
  async deleteFacultyDatum(
    @graphql.Args() args: DeleteFacultyDatumArgs
  ): Promise<FacultyDatum | null> {
    try {
      return await this.service.deleteFacultyDatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
