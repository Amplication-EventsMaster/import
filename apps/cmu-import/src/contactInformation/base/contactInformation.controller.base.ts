/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ContactInformationService } from "../contactInformation.service";
import { ContactInformationCreateInput } from "./ContactInformationCreateInput";
import { ContactInformation } from "./ContactInformation";
import { ContactInformationFindManyArgs } from "./ContactInformationFindManyArgs";
import { ContactInformationWhereUniqueInput } from "./ContactInformationWhereUniqueInput";
import { ContactInformationUpdateInput } from "./ContactInformationUpdateInput";

export class ContactInformationControllerBase {
  constructor(protected readonly service: ContactInformationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactInformation })
  async createContactInformation(
    @common.Body() data: ContactInformationCreateInput
  ): Promise<ContactInformation> {
    return await this.service.createContactInformation({
      data: data,
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        id: true,
        phone: true,
        state: true,
        studentId: true,
        zip: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactInformation] })
  @ApiNestedQuery(ContactInformationFindManyArgs)
  async contactInformations(
    @common.Req() request: Request
  ): Promise<ContactInformation[]> {
    const args = plainToClass(ContactInformationFindManyArgs, request.query);
    return this.service.contactInformations({
      ...args,
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        id: true,
        phone: true,
        state: true,
        studentId: true,
        zip: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async contactInformation(
    @common.Param() params: ContactInformationWhereUniqueInput
  ): Promise<ContactInformation | null> {
    const result = await this.service.contactInformation({
      where: params,
      select: {
        address1: true,
        address2: true,
        city: true,
        country: true,
        id: true,
        phone: true,
        state: true,
        studentId: true,
        zip: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateContactInformation(
    @common.Param() params: ContactInformationWhereUniqueInput,
    @common.Body() data: ContactInformationUpdateInput
  ): Promise<ContactInformation | null> {
    try {
      return await this.service.updateContactInformation({
        where: params,
        data: data,
        select: {
          address1: true,
          address2: true,
          city: true,
          country: true,
          id: true,
          phone: true,
          state: true,
          studentId: true,
          zip: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactInformation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteContactInformation(
    @common.Param() params: ContactInformationWhereUniqueInput
  ): Promise<ContactInformation | null> {
    try {
      return await this.service.deleteContactInformation({
        where: params,
        select: {
          address1: true,
          address2: true,
          city: true,
          country: true,
          id: true,
          phone: true,
          state: true,
          studentId: true,
          zip: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
