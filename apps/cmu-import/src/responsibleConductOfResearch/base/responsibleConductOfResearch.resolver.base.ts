/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ResponsibleConductOfResearch } from "./ResponsibleConductOfResearch";
import { ResponsibleConductOfResearchCountArgs } from "./ResponsibleConductOfResearchCountArgs";
import { ResponsibleConductOfResearchFindManyArgs } from "./ResponsibleConductOfResearchFindManyArgs";
import { ResponsibleConductOfResearchFindUniqueArgs } from "./ResponsibleConductOfResearchFindUniqueArgs";
import { CreateResponsibleConductOfResearchArgs } from "./CreateResponsibleConductOfResearchArgs";
import { UpdateResponsibleConductOfResearchArgs } from "./UpdateResponsibleConductOfResearchArgs";
import { DeleteResponsibleConductOfResearchArgs } from "./DeleteResponsibleConductOfResearchArgs";
import { ResponsibleConductOfResearchService } from "../responsibleConductOfResearch.service";
@graphql.Resolver(() => ResponsibleConductOfResearch)
export class ResponsibleConductOfResearchResolverBase {
  constructor(
    protected readonly service: ResponsibleConductOfResearchService
  ) {}

  async _responsibleConductOfResearchesMeta(
    @graphql.Args() args: ResponsibleConductOfResearchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ResponsibleConductOfResearch])
  async responsibleConductOfResearches(
    @graphql.Args() args: ResponsibleConductOfResearchFindManyArgs
  ): Promise<ResponsibleConductOfResearch[]> {
    return this.service.responsibleConductOfResearches(args);
  }

  @graphql.Query(() => ResponsibleConductOfResearch, { nullable: true })
  async responsibleConductOfResearch(
    @graphql.Args() args: ResponsibleConductOfResearchFindUniqueArgs
  ): Promise<ResponsibleConductOfResearch | null> {
    const result = await this.service.responsibleConductOfResearch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ResponsibleConductOfResearch)
  async createResponsibleConductOfResearch(
    @graphql.Args() args: CreateResponsibleConductOfResearchArgs
  ): Promise<ResponsibleConductOfResearch> {
    return await this.service.createResponsibleConductOfResearch({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ResponsibleConductOfResearch)
  async updateResponsibleConductOfResearch(
    @graphql.Args() args: UpdateResponsibleConductOfResearchArgs
  ): Promise<ResponsibleConductOfResearch | null> {
    try {
      return await this.service.updateResponsibleConductOfResearch({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ResponsibleConductOfResearch)
  async deleteResponsibleConductOfResearch(
    @graphql.Args() args: DeleteResponsibleConductOfResearchArgs
  ): Promise<ResponsibleConductOfResearch | null> {
    try {
      return await this.service.deleteResponsibleConductOfResearch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
