/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ResponsibleConductOfResearch as PrismaResponsibleConductOfResearch,
} from "@prisma/client";

export class ResponsibleConductOfResearchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ResponsibleConductOfResearchCountArgs, "select">
  ): Promise<number> {
    return this.prisma.responsibleConductOfResearch.count(args);
  }

  async responsibleConductOfResearches<
    T extends Prisma.ResponsibleConductOfResearchFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.ResponsibleConductOfResearchFindManyArgs
    >
  ): Promise<PrismaResponsibleConductOfResearch[]> {
    return this.prisma.responsibleConductOfResearch.findMany<Prisma.ResponsibleConductOfResearchFindManyArgs>(
      args
    );
  }
  async responsibleConductOfResearch<
    T extends Prisma.ResponsibleConductOfResearchFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.ResponsibleConductOfResearchFindUniqueArgs
    >
  ): Promise<PrismaResponsibleConductOfResearch | null> {
    return this.prisma.responsibleConductOfResearch.findUnique(args);
  }
  async createResponsibleConductOfResearch<
    T extends Prisma.ResponsibleConductOfResearchCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ResponsibleConductOfResearchCreateArgs>
  ): Promise<PrismaResponsibleConductOfResearch> {
    return this.prisma.responsibleConductOfResearch.create<T>(args);
  }
  async updateResponsibleConductOfResearch<
    T extends Prisma.ResponsibleConductOfResearchUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ResponsibleConductOfResearchUpdateArgs>
  ): Promise<PrismaResponsibleConductOfResearch> {
    return this.prisma.responsibleConductOfResearch.update<T>(args);
  }
  async deleteResponsibleConductOfResearch<
    T extends Prisma.ResponsibleConductOfResearchDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ResponsibleConductOfResearchDeleteArgs>
  ): Promise<PrismaResponsibleConductOfResearch> {
    return this.prisma.responsibleConductOfResearch.delete(args);
  }
}
