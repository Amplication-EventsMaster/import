/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ResponsibleConductOfResearchService } from "../responsibleConductOfResearch.service";
import { ResponsibleConductOfResearchCreateInput } from "./ResponsibleConductOfResearchCreateInput";
import { ResponsibleConductOfResearch } from "./ResponsibleConductOfResearch";
import { ResponsibleConductOfResearchFindManyArgs } from "./ResponsibleConductOfResearchFindManyArgs";
import { ResponsibleConductOfResearchWhereUniqueInput } from "./ResponsibleConductOfResearchWhereUniqueInput";
import { ResponsibleConductOfResearchUpdateInput } from "./ResponsibleConductOfResearchUpdateInput";

export class ResponsibleConductOfResearchControllerBase {
  constructor(
    protected readonly service: ResponsibleConductOfResearchService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ResponsibleConductOfResearch })
  async createResponsibleConductOfResearch(
    @common.Body() data: ResponsibleConductOfResearchCreateInput
  ): Promise<ResponsibleConductOfResearch> {
    return await this.service.createResponsibleConductOfResearch({
      data: data,
      select: {
        completionDate: true,
        description: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ResponsibleConductOfResearch] })
  @ApiNestedQuery(ResponsibleConductOfResearchFindManyArgs)
  async responsibleConductOfResearches(
    @common.Req() request: Request
  ): Promise<ResponsibleConductOfResearch[]> {
    const args = plainToClass(
      ResponsibleConductOfResearchFindManyArgs,
      request.query
    );
    return this.service.responsibleConductOfResearches({
      ...args,
      select: {
        completionDate: true,
        description: true,
        id: true,
        studentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ResponsibleConductOfResearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async responsibleConductOfResearch(
    @common.Param() params: ResponsibleConductOfResearchWhereUniqueInput
  ): Promise<ResponsibleConductOfResearch | null> {
    const result = await this.service.responsibleConductOfResearch({
      where: params,
      select: {
        completionDate: true,
        description: true,
        id: true,
        studentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ResponsibleConductOfResearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateResponsibleConductOfResearch(
    @common.Param() params: ResponsibleConductOfResearchWhereUniqueInput,
    @common.Body() data: ResponsibleConductOfResearchUpdateInput
  ): Promise<ResponsibleConductOfResearch | null> {
    try {
      return await this.service.updateResponsibleConductOfResearch({
        where: params,
        data: data,
        select: {
          completionDate: true,
          description: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ResponsibleConductOfResearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteResponsibleConductOfResearch(
    @common.Param() params: ResponsibleConductOfResearchWhereUniqueInput
  ): Promise<ResponsibleConductOfResearch | null> {
    try {
      return await this.service.deleteResponsibleConductOfResearch({
        where: params,
        select: {
          completionDate: true,
          description: true,
          id: true,
          studentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
