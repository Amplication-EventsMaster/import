/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserRoleLookup } from "./UserRoleLookup";
import { UserRoleLookupCountArgs } from "./UserRoleLookupCountArgs";
import { UserRoleLookupFindManyArgs } from "./UserRoleLookupFindManyArgs";
import { UserRoleLookupFindUniqueArgs } from "./UserRoleLookupFindUniqueArgs";
import { CreateUserRoleLookupArgs } from "./CreateUserRoleLookupArgs";
import { UpdateUserRoleLookupArgs } from "./UpdateUserRoleLookupArgs";
import { DeleteUserRoleLookupArgs } from "./DeleteUserRoleLookupArgs";
import { UserRoleLookupService } from "../userRoleLookup.service";
@graphql.Resolver(() => UserRoleLookup)
export class UserRoleLookupResolverBase {
  constructor(protected readonly service: UserRoleLookupService) {}

  async _userRoleLookupsMeta(
    @graphql.Args() args: UserRoleLookupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserRoleLookup])
  async userRoleLookups(
    @graphql.Args() args: UserRoleLookupFindManyArgs
  ): Promise<UserRoleLookup[]> {
    return this.service.userRoleLookups(args);
  }

  @graphql.Query(() => UserRoleLookup, { nullable: true })
  async userRoleLookup(
    @graphql.Args() args: UserRoleLookupFindUniqueArgs
  ): Promise<UserRoleLookup | null> {
    const result = await this.service.userRoleLookup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserRoleLookup)
  async createUserRoleLookup(
    @graphql.Args() args: CreateUserRoleLookupArgs
  ): Promise<UserRoleLookup> {
    return await this.service.createUserRoleLookup({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserRoleLookup)
  async updateUserRoleLookup(
    @graphql.Args() args: UpdateUserRoleLookupArgs
  ): Promise<UserRoleLookup | null> {
    try {
      return await this.service.updateUserRoleLookup({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserRoleLookup)
  async deleteUserRoleLookup(
    @graphql.Args() args: DeleteUserRoleLookupArgs
  ): Promise<UserRoleLookup | null> {
    try {
      return await this.service.deleteUserRoleLookup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
