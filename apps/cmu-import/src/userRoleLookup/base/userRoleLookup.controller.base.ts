/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserRoleLookupService } from "../userRoleLookup.service";
import { UserRoleLookupCreateInput } from "./UserRoleLookupCreateInput";
import { UserRoleLookup } from "./UserRoleLookup";
import { UserRoleLookupFindManyArgs } from "./UserRoleLookupFindManyArgs";
import { UserRoleLookupWhereUniqueInput } from "./UserRoleLookupWhereUniqueInput";
import { UserRoleLookupUpdateInput } from "./UserRoleLookupUpdateInput";

export class UserRoleLookupControllerBase {
  constructor(protected readonly service: UserRoleLookupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserRoleLookup })
  async createUserRoleLookup(
    @common.Body() data: UserRoleLookupCreateInput
  ): Promise<UserRoleLookup> {
    return await this.service.createUserRoleLookup({
      data: data,
      select: {
        id: true,
        role: true,
        roleId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserRoleLookup] })
  @ApiNestedQuery(UserRoleLookupFindManyArgs)
  async userRoleLookups(
    @common.Req() request: Request
  ): Promise<UserRoleLookup[]> {
    const args = plainToClass(UserRoleLookupFindManyArgs, request.query);
    return this.service.userRoleLookups({
      ...args,
      select: {
        id: true,
        role: true,
        roleId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserRoleLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userRoleLookup(
    @common.Param() params: UserRoleLookupWhereUniqueInput
  ): Promise<UserRoleLookup | null> {
    const result = await this.service.userRoleLookup({
      where: params,
      select: {
        id: true,
        role: true,
        roleId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserRoleLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserRoleLookup(
    @common.Param() params: UserRoleLookupWhereUniqueInput,
    @common.Body() data: UserRoleLookupUpdateInput
  ): Promise<UserRoleLookup | null> {
    try {
      return await this.service.updateUserRoleLookup({
        where: params,
        data: data,
        select: {
          id: true,
          role: true,
          roleId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserRoleLookup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserRoleLookup(
    @common.Param() params: UserRoleLookupWhereUniqueInput
  ): Promise<UserRoleLookup | null> {
    try {
      return await this.service.deleteUserRoleLookup({
        where: params,
        select: {
          id: true,
          role: true,
          roleId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
