/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StudentFile } from "./StudentFile";
import { StudentFileCountArgs } from "./StudentFileCountArgs";
import { StudentFileFindManyArgs } from "./StudentFileFindManyArgs";
import { StudentFileFindUniqueArgs } from "./StudentFileFindUniqueArgs";
import { CreateStudentFileArgs } from "./CreateStudentFileArgs";
import { UpdateStudentFileArgs } from "./UpdateStudentFileArgs";
import { DeleteStudentFileArgs } from "./DeleteStudentFileArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { StudentFileService } from "../studentFile.service";
@graphql.Resolver(() => StudentFile)
export class StudentFileResolverBase {
  constructor(protected readonly service: StudentFileService) {}

  async _studentFilesMeta(
    @graphql.Args() args: StudentFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StudentFile])
  async studentFiles(
    @graphql.Args() args: StudentFileFindManyArgs
  ): Promise<StudentFile[]> {
    return this.service.studentFiles(args);
  }

  @graphql.Query(() => StudentFile, { nullable: true })
  async studentFile(
    @graphql.Args() args: StudentFileFindUniqueArgs
  ): Promise<StudentFile | null> {
    const result = await this.service.studentFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StudentFile)
  async createStudentFile(
    @graphql.Args() args: CreateStudentFileArgs
  ): Promise<StudentFile> {
    return await this.service.createStudentFile({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => StudentFile)
  async updateStudentFile(
    @graphql.Args() args: UpdateStudentFileArgs
  ): Promise<StudentFile | null> {
    try {
      return await this.service.updateStudentFile({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudentFile)
  async deleteStudentFile(
    @graphql.Args() args: DeleteStudentFileArgs
  ): Promise<StudentFile | null> {
    try {
      return await this.service.deleteStudentFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: StudentFile
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
