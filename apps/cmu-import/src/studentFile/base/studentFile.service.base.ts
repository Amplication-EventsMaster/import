/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentFile as PrismaStudentFile,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentFileServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentFileCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentFile.count(args);
  }

  async studentFiles<T extends Prisma.StudentFileFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentFileFindManyArgs>
  ): Promise<PrismaStudentFile[]> {
    return this.prisma.studentFile.findMany<Prisma.StudentFileFindManyArgs>(
      args
    );
  }
  async studentFile<T extends Prisma.StudentFileFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentFileFindUniqueArgs>
  ): Promise<PrismaStudentFile | null> {
    return this.prisma.studentFile.findUnique(args);
  }
  async createStudentFile<T extends Prisma.StudentFileCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentFileCreateArgs>
  ): Promise<PrismaStudentFile> {
    return this.prisma.studentFile.create<T>(args);
  }
  async updateStudentFile<T extends Prisma.StudentFileUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentFileUpdateArgs>
  ): Promise<PrismaStudentFile> {
    return this.prisma.studentFile.update<T>(args);
  }
  async deleteStudentFile<T extends Prisma.StudentFileDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentFileDeleteArgs>
  ): Promise<PrismaStudentFile> {
    return this.prisma.studentFile.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentFile
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
