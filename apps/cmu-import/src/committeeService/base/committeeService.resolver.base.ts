/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CommitteeService } from "./CommitteeService";
import { CommitteeServiceCountArgs } from "./CommitteeServiceCountArgs";
import { CommitteeServiceFindManyArgs } from "./CommitteeServiceFindManyArgs";
import { CommitteeServiceFindUniqueArgs } from "./CommitteeServiceFindUniqueArgs";
import { CreateCommitteeServiceArgs } from "./CreateCommitteeServiceArgs";
import { UpdateCommitteeServiceArgs } from "./UpdateCommitteeServiceArgs";
import { DeleteCommitteeServiceArgs } from "./DeleteCommitteeServiceArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { CommitteeServiceService } from "../committeeService.service";
@graphql.Resolver(() => CommitteeService)
export class CommitteeServiceResolverBase {
  constructor(protected readonly service: CommitteeServiceService) {}

  async _committeeServicesMeta(
    @graphql.Args() args: CommitteeServiceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CommitteeService])
  async committeeServices(
    @graphql.Args() args: CommitteeServiceFindManyArgs
  ): Promise<CommitteeService[]> {
    return this.service.committeeServices(args);
  }

  @graphql.Query(() => CommitteeService, { nullable: true })
  async committeeService(
    @graphql.Args() args: CommitteeServiceFindUniqueArgs
  ): Promise<CommitteeService | null> {
    const result = await this.service.committeeService(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CommitteeService)
  async createCommitteeService(
    @graphql.Args() args: CreateCommitteeServiceArgs
  ): Promise<CommitteeService> {
    return await this.service.createCommitteeService({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => CommitteeService)
  async updateCommitteeService(
    @graphql.Args() args: UpdateCommitteeServiceArgs
  ): Promise<CommitteeService | null> {
    try {
      return await this.service.updateCommitteeService({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CommitteeService)
  async deleteCommitteeService(
    @graphql.Args() args: DeleteCommitteeServiceArgs
  ): Promise<CommitteeService | null> {
    try {
      return await this.service.deleteCommitteeService(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: CommitteeService
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
