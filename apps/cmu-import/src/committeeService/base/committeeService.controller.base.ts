/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CommitteeServiceService } from "../committeeService.service";
import { CommitteeServiceCreateInput } from "./CommitteeServiceCreateInput";
import { CommitteeService } from "./CommitteeService";
import { CommitteeServiceFindManyArgs } from "./CommitteeServiceFindManyArgs";
import { CommitteeServiceWhereUniqueInput } from "./CommitteeServiceWhereUniqueInput";
import { CommitteeServiceUpdateInput } from "./CommitteeServiceUpdateInput";

export class CommitteeServiceControllerBase {
  constructor(protected readonly service: CommitteeServiceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CommitteeService })
  async createCommitteeService(
    @common.Body() data: CommitteeServiceCreateInput
  ): Promise<CommitteeService> {
    return await this.service.createCommitteeService({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        committeeName: true,
        endDate: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CommitteeService] })
  @ApiNestedQuery(CommitteeServiceFindManyArgs)
  async committeeServices(
    @common.Req() request: Request
  ): Promise<CommitteeService[]> {
    const args = plainToClass(CommitteeServiceFindManyArgs, request.query);
    return this.service.committeeServices({
      ...args,
      select: {
        committeeName: true,
        endDate: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CommitteeService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async committeeService(
    @common.Param() params: CommitteeServiceWhereUniqueInput
  ): Promise<CommitteeService | null> {
    const result = await this.service.committeeService({
      where: params,
      select: {
        committeeName: true,
        endDate: true,
        id: true,
        startDate: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CommitteeService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCommitteeService(
    @common.Param() params: CommitteeServiceWhereUniqueInput,
    @common.Body() data: CommitteeServiceUpdateInput
  ): Promise<CommitteeService | null> {
    try {
      return await this.service.updateCommitteeService({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          committeeName: true,
          endDate: true,
          id: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CommitteeService })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCommitteeService(
    @common.Param() params: CommitteeServiceWhereUniqueInput
  ): Promise<CommitteeService | null> {
    try {
      return await this.service.deleteCommitteeService({
        where: params,
        select: {
          committeeName: true,
          endDate: true,
          id: true,
          startDate: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
