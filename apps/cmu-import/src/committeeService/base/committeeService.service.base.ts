/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CommitteeService as PrismaCommitteeService,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class CommitteeServiceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CommitteeServiceCountArgs, "select">
  ): Promise<number> {
    return this.prisma.committeeService.count(args);
  }

  async committeeServices<T extends Prisma.CommitteeServiceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeServiceFindManyArgs>
  ): Promise<PrismaCommitteeService[]> {
    return this.prisma.committeeService.findMany<Prisma.CommitteeServiceFindManyArgs>(
      args
    );
  }
  async committeeService<T extends Prisma.CommitteeServiceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeServiceFindUniqueArgs>
  ): Promise<PrismaCommitteeService | null> {
    return this.prisma.committeeService.findUnique(args);
  }
  async createCommitteeService<T extends Prisma.CommitteeServiceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeServiceCreateArgs>
  ): Promise<PrismaCommitteeService> {
    return this.prisma.committeeService.create<T>(args);
  }
  async updateCommitteeService<T extends Prisma.CommitteeServiceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeServiceUpdateArgs>
  ): Promise<PrismaCommitteeService> {
    return this.prisma.committeeService.update<T>(args);
  }
  async deleteCommitteeService<T extends Prisma.CommitteeServiceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommitteeServiceDeleteArgs>
  ): Promise<PrismaCommitteeService> {
    return this.prisma.committeeService.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.committeeService
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
