/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualsWritingAspectService } from "../qualsWritingAspect.service";
import { QualsWritingAspectCreateInput } from "./QualsWritingAspectCreateInput";
import { QualsWritingAspect } from "./QualsWritingAspect";
import { QualsWritingAspectFindManyArgs } from "./QualsWritingAspectFindManyArgs";
import { QualsWritingAspectWhereUniqueInput } from "./QualsWritingAspectWhereUniqueInput";
import { QualsWritingAspectUpdateInput } from "./QualsWritingAspectUpdateInput";

export class QualsWritingAspectControllerBase {
  constructor(protected readonly service: QualsWritingAspectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QualsWritingAspect })
  async createQualsWritingAspect(
    @common.Body() data: QualsWritingAspectCreateInput
  ): Promise<QualsWritingAspect> {
    return await this.service.createQualsWritingAspect({
      data: {
        ...data,

        qualsWriting: data.qualsWriting
          ? {
              connect: data.qualsWriting,
            }
          : undefined,
      },
      select: {
        id: true,

        qualsWriting: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QualsWritingAspect] })
  @ApiNestedQuery(QualsWritingAspectFindManyArgs)
  async qualsWritingAspects(
    @common.Req() request: Request
  ): Promise<QualsWritingAspect[]> {
    const args = plainToClass(QualsWritingAspectFindManyArgs, request.query);
    return this.service.qualsWritingAspects({
      ...args,
      select: {
        id: true,

        qualsWriting: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QualsWritingAspect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qualsWritingAspect(
    @common.Param() params: QualsWritingAspectWhereUniqueInput
  ): Promise<QualsWritingAspect | null> {
    const result = await this.service.qualsWritingAspect({
      where: params,
      select: {
        id: true,

        qualsWriting: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QualsWritingAspect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQualsWritingAspect(
    @common.Param() params: QualsWritingAspectWhereUniqueInput,
    @common.Body() data: QualsWritingAspectUpdateInput
  ): Promise<QualsWritingAspect | null> {
    try {
      return await this.service.updateQualsWritingAspect({
        where: params,
        data: {
          ...data,

          qualsWriting: data.qualsWriting
            ? {
                connect: data.qualsWriting,
              }
            : undefined,
        },
        select: {
          id: true,

          qualsWriting: {
            select: {
              id: true,
            },
          },

          text: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QualsWritingAspect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQualsWritingAspect(
    @common.Param() params: QualsWritingAspectWhereUniqueInput
  ): Promise<QualsWritingAspect | null> {
    try {
      return await this.service.deleteQualsWritingAspect({
        where: params,
        select: {
          id: true,

          qualsWriting: {
            select: {
              id: true,
            },
          },

          text: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
