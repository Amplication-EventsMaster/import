/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QualsWritingAspect as PrismaQualsWritingAspect,
  QualsWriting as PrismaQualsWriting,
} from "@prisma/client";

export class QualsWritingAspectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualsWritingAspectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualsWritingAspect.count(args);
  }

  async qualsWritingAspects<T extends Prisma.QualsWritingAspectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsWritingAspectFindManyArgs>
  ): Promise<PrismaQualsWritingAspect[]> {
    return this.prisma.qualsWritingAspect.findMany<Prisma.QualsWritingAspectFindManyArgs>(
      args
    );
  }
  async qualsWritingAspect<T extends Prisma.QualsWritingAspectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsWritingAspectFindUniqueArgs>
  ): Promise<PrismaQualsWritingAspect | null> {
    return this.prisma.qualsWritingAspect.findUnique(args);
  }
  async createQualsWritingAspect<T extends Prisma.QualsWritingAspectCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsWritingAspectCreateArgs>
  ): Promise<PrismaQualsWritingAspect> {
    return this.prisma.qualsWritingAspect.create<T>(args);
  }
  async updateQualsWritingAspect<T extends Prisma.QualsWritingAspectUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsWritingAspectUpdateArgs>
  ): Promise<PrismaQualsWritingAspect> {
    return this.prisma.qualsWritingAspect.update<T>(args);
  }
  async deleteQualsWritingAspect<T extends Prisma.QualsWritingAspectDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsWritingAspectDeleteArgs>
  ): Promise<PrismaQualsWritingAspect> {
    return this.prisma.qualsWritingAspect.delete(args);
  }

  async getQualsWriting(parentId: number): Promise<PrismaQualsWriting | null> {
    return this.prisma.qualsWritingAspect
      .findUnique({
        where: { id: parentId },
      })
      .qualsWriting();
  }
}
