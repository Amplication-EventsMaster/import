/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualsWritingAspect } from "./QualsWritingAspect";
import { QualsWritingAspectCountArgs } from "./QualsWritingAspectCountArgs";
import { QualsWritingAspectFindManyArgs } from "./QualsWritingAspectFindManyArgs";
import { QualsWritingAspectFindUniqueArgs } from "./QualsWritingAspectFindUniqueArgs";
import { CreateQualsWritingAspectArgs } from "./CreateQualsWritingAspectArgs";
import { UpdateQualsWritingAspectArgs } from "./UpdateQualsWritingAspectArgs";
import { DeleteQualsWritingAspectArgs } from "./DeleteQualsWritingAspectArgs";
import { QualsWriting } from "../../qualsWriting/base/QualsWriting";
import { QualsWritingAspectService } from "../qualsWritingAspect.service";
@graphql.Resolver(() => QualsWritingAspect)
export class QualsWritingAspectResolverBase {
  constructor(protected readonly service: QualsWritingAspectService) {}

  async _qualsWritingAspectsMeta(
    @graphql.Args() args: QualsWritingAspectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualsWritingAspect])
  async qualsWritingAspects(
    @graphql.Args() args: QualsWritingAspectFindManyArgs
  ): Promise<QualsWritingAspect[]> {
    return this.service.qualsWritingAspects(args);
  }

  @graphql.Query(() => QualsWritingAspect, { nullable: true })
  async qualsWritingAspect(
    @graphql.Args() args: QualsWritingAspectFindUniqueArgs
  ): Promise<QualsWritingAspect | null> {
    const result = await this.service.qualsWritingAspect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualsWritingAspect)
  async createQualsWritingAspect(
    @graphql.Args() args: CreateQualsWritingAspectArgs
  ): Promise<QualsWritingAspect> {
    return await this.service.createQualsWritingAspect({
      ...args,
      data: {
        ...args.data,

        qualsWriting: args.data.qualsWriting
          ? {
              connect: args.data.qualsWriting,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QualsWritingAspect)
  async updateQualsWritingAspect(
    @graphql.Args() args: UpdateQualsWritingAspectArgs
  ): Promise<QualsWritingAspect | null> {
    try {
      return await this.service.updateQualsWritingAspect({
        ...args,
        data: {
          ...args.data,

          qualsWriting: args.data.qualsWriting
            ? {
                connect: args.data.qualsWriting,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualsWritingAspect)
  async deleteQualsWritingAspect(
    @graphql.Args() args: DeleteQualsWritingAspectArgs
  ): Promise<QualsWritingAspect | null> {
    try {
      return await this.service.deleteQualsWritingAspect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QualsWriting, {
    nullable: true,
    name: "qualsWriting",
  })
  async getQualsWriting(
    @graphql.Parent() parent: QualsWritingAspect
  ): Promise<QualsWriting | null> {
    const result = await this.service.getQualsWriting(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
