/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ApplywebStudentMigrationDatum } from "./ApplywebStudentMigrationDatum";
import { ApplywebStudentMigrationDatumCountArgs } from "./ApplywebStudentMigrationDatumCountArgs";
import { ApplywebStudentMigrationDatumFindManyArgs } from "./ApplywebStudentMigrationDatumFindManyArgs";
import { ApplywebStudentMigrationDatumFindUniqueArgs } from "./ApplywebStudentMigrationDatumFindUniqueArgs";
import { CreateApplywebStudentMigrationDatumArgs } from "./CreateApplywebStudentMigrationDatumArgs";
import { UpdateApplywebStudentMigrationDatumArgs } from "./UpdateApplywebStudentMigrationDatumArgs";
import { DeleteApplywebStudentMigrationDatumArgs } from "./DeleteApplywebStudentMigrationDatumArgs";
import { ApplywebStudentMigrationDatumService } from "../applywebStudentMigrationDatum.service";
@graphql.Resolver(() => ApplywebStudentMigrationDatum)
export class ApplywebStudentMigrationDatumResolverBase {
  constructor(
    protected readonly service: ApplywebStudentMigrationDatumService
  ) {}

  async _applywebStudentMigrationDataMeta(
    @graphql.Args() args: ApplywebStudentMigrationDatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ApplywebStudentMigrationDatum])
  async applywebStudentMigrationData(
    @graphql.Args() args: ApplywebStudentMigrationDatumFindManyArgs
  ): Promise<ApplywebStudentMigrationDatum[]> {
    return this.service.applywebStudentMigrationData(args);
  }

  @graphql.Query(() => ApplywebStudentMigrationDatum, { nullable: true })
  async applywebStudentMigrationDatum(
    @graphql.Args() args: ApplywebStudentMigrationDatumFindUniqueArgs
  ): Promise<ApplywebStudentMigrationDatum | null> {
    const result = await this.service.applywebStudentMigrationDatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ApplywebStudentMigrationDatum)
  async createApplywebStudentMigrationDatum(
    @graphql.Args() args: CreateApplywebStudentMigrationDatumArgs
  ): Promise<ApplywebStudentMigrationDatum> {
    return await this.service.createApplywebStudentMigrationDatum({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ApplywebStudentMigrationDatum)
  async updateApplywebStudentMigrationDatum(
    @graphql.Args() args: UpdateApplywebStudentMigrationDatumArgs
  ): Promise<ApplywebStudentMigrationDatum | null> {
    try {
      return await this.service.updateApplywebStudentMigrationDatum({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplywebStudentMigrationDatum)
  async deleteApplywebStudentMigrationDatum(
    @graphql.Args() args: DeleteApplywebStudentMigrationDatumArgs
  ): Promise<ApplywebStudentMigrationDatum | null> {
    try {
      return await this.service.deleteApplywebStudentMigrationDatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
