/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ApplywebStudentMigrationDatumService } from "../applywebStudentMigrationDatum.service";
import { ApplywebStudentMigrationDatumCreateInput } from "./ApplywebStudentMigrationDatumCreateInput";
import { ApplywebStudentMigrationDatum } from "./ApplywebStudentMigrationDatum";
import { ApplywebStudentMigrationDatumFindManyArgs } from "./ApplywebStudentMigrationDatumFindManyArgs";
import { ApplywebStudentMigrationDatumWhereUniqueInput } from "./ApplywebStudentMigrationDatumWhereUniqueInput";
import { ApplywebStudentMigrationDatumUpdateInput } from "./ApplywebStudentMigrationDatumUpdateInput";

export class ApplywebStudentMigrationDatumControllerBase {
  constructor(
    protected readonly service: ApplywebStudentMigrationDatumService
  ) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplywebStudentMigrationDatum })
  async createApplywebStudentMigrationDatum(
    @common.Body() data: ApplywebStudentMigrationDatumCreateInput
  ): Promise<ApplywebStudentMigrationDatum> {
    return await this.service.createApplywebStudentMigrationDatum({
      data: data,
      select: {
        appId: true,
        applywebDb: true,
        applywebDbUserId: true,
        applywebDbUserTable: true,
        id: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplywebStudentMigrationDatum] })
  @ApiNestedQuery(ApplywebStudentMigrationDatumFindManyArgs)
  async applywebStudentMigrationData(
    @common.Req() request: Request
  ): Promise<ApplywebStudentMigrationDatum[]> {
    const args = plainToClass(
      ApplywebStudentMigrationDatumFindManyArgs,
      request.query
    );
    return this.service.applywebStudentMigrationData({
      ...args,
      select: {
        appId: true,
        applywebDb: true,
        applywebDbUserId: true,
        applywebDbUserTable: true,
        id: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplywebStudentMigrationDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async applywebStudentMigrationDatum(
    @common.Param() params: ApplywebStudentMigrationDatumWhereUniqueInput
  ): Promise<ApplywebStudentMigrationDatum | null> {
    const result = await this.service.applywebStudentMigrationDatum({
      where: params,
      select: {
        appId: true,
        applywebDb: true,
        applywebDbUserId: true,
        applywebDbUserTable: true,
        id: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplywebStudentMigrationDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateApplywebStudentMigrationDatum(
    @common.Param() params: ApplywebStudentMigrationDatumWhereUniqueInput,
    @common.Body() data: ApplywebStudentMigrationDatumUpdateInput
  ): Promise<ApplywebStudentMigrationDatum | null> {
    try {
      return await this.service.updateApplywebStudentMigrationDatum({
        where: params,
        data: data,
        select: {
          appId: true,
          applywebDb: true,
          applywebDbUserId: true,
          applywebDbUserTable: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplywebStudentMigrationDatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteApplywebStudentMigrationDatum(
    @common.Param() params: ApplywebStudentMigrationDatumWhereUniqueInput
  ): Promise<ApplywebStudentMigrationDatum | null> {
    try {
      return await this.service.deleteApplywebStudentMigrationDatum({
        where: params,
        select: {
          appId: true,
          applywebDb: true,
          applywebDbUserId: true,
          applywebDbUserTable: true,
          id: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
