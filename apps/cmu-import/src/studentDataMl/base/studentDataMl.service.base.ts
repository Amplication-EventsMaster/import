/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StudentDataMl as PrismaStudentDataMl,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class StudentDataMlServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StudentDataMlCountArgs, "select">
  ): Promise<number> {
    return this.prisma.studentDataMl.count(args);
  }

  async studentDataMls<T extends Prisma.StudentDataMlFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataMlFindManyArgs>
  ): Promise<PrismaStudentDataMl[]> {
    return this.prisma.studentDataMl.findMany<Prisma.StudentDataMlFindManyArgs>(
      args
    );
  }
  async studentDataMl<T extends Prisma.StudentDataMlFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataMlFindUniqueArgs>
  ): Promise<PrismaStudentDataMl | null> {
    return this.prisma.studentDataMl.findUnique(args);
  }
  async createStudentDataMl<T extends Prisma.StudentDataMlCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataMlCreateArgs>
  ): Promise<PrismaStudentDataMl> {
    return this.prisma.studentDataMl.create<T>(args);
  }
  async updateStudentDataMl<T extends Prisma.StudentDataMlUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataMlUpdateArgs>
  ): Promise<PrismaStudentDataMl> {
    return this.prisma.studentDataMl.update<T>(args);
  }
  async deleteStudentDataMl<T extends Prisma.StudentDataMlDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StudentDataMlDeleteArgs>
  ): Promise<PrismaStudentDataMl> {
    return this.prisma.studentDataMl.delete(args);
  }

  async getStudentData(parentId: string): Promise<PrismaStudentDatum | null> {
    return this.prisma.studentDataMl
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
