/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StudentDataMlService } from "../studentDataMl.service";
import { StudentDataMlCreateInput } from "./StudentDataMlCreateInput";
import { StudentDataMl } from "./StudentDataMl";
import { StudentDataMlFindManyArgs } from "./StudentDataMlFindManyArgs";
import { StudentDataMlWhereUniqueInput } from "./StudentDataMlWhereUniqueInput";
import { StudentDataMlUpdateInput } from "./StudentDataMlUpdateInput";

export class StudentDataMlControllerBase {
  constructor(protected readonly service: StudentDataMlService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StudentDataMl })
  async createStudentDataMl(
    @common.Body() data: StudentDataMlCreateInput
  ): Promise<StudentDataMl> {
    return await this.service.createStudentDataMl({
      data: {
        ...data,

        studentData: {
          connect: data.studentData,
        },
      },
      select: {
        id: true,
        origDepartment: true,
        overrideCore: true,
        overrideElectives: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StudentDataMl] })
  @ApiNestedQuery(StudentDataMlFindManyArgs)
  async studentDataMls(
    @common.Req() request: Request
  ): Promise<StudentDataMl[]> {
    const args = plainToClass(StudentDataMlFindManyArgs, request.query);
    return this.service.studentDataMls({
      ...args,
      select: {
        id: true,
        origDepartment: true,
        overrideCore: true,
        overrideElectives: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StudentDataMl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async studentDataMl(
    @common.Param() params: StudentDataMlWhereUniqueInput
  ): Promise<StudentDataMl | null> {
    const result = await this.service.studentDataMl({
      where: params,
      select: {
        id: true,
        origDepartment: true,
        overrideCore: true,
        overrideElectives: true,

        studentData: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StudentDataMl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStudentDataMl(
    @common.Param() params: StudentDataMlWhereUniqueInput,
    @common.Body() data: StudentDataMlUpdateInput
  ): Promise<StudentDataMl | null> {
    try {
      return await this.service.updateStudentDataMl({
        where: params,
        data: {
          ...data,

          studentData: {
            connect: data.studentData,
          },
        },
        select: {
          id: true,
          origDepartment: true,
          overrideCore: true,
          overrideElectives: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StudentDataMl })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStudentDataMl(
    @common.Param() params: StudentDataMlWhereUniqueInput
  ): Promise<StudentDataMl | null> {
    try {
      return await this.service.deleteStudentDataMl({
        where: params,
        select: {
          id: true,
          origDepartment: true,
          overrideCore: true,
          overrideElectives: true,

          studentData: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
