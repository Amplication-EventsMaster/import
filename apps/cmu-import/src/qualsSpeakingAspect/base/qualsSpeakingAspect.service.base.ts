/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QualsSpeakingAspect as PrismaQualsSpeakingAspect,
  QualsSpeaking as PrismaQualsSpeaking,
} from "@prisma/client";

export class QualsSpeakingAspectServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualsSpeakingAspectCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualsSpeakingAspect.count(args);
  }

  async qualsSpeakingAspects<T extends Prisma.QualsSpeakingAspectFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingAspectFindManyArgs>
  ): Promise<PrismaQualsSpeakingAspect[]> {
    return this.prisma.qualsSpeakingAspect.findMany<Prisma.QualsSpeakingAspectFindManyArgs>(
      args
    );
  }
  async qualsSpeakingAspect<T extends Prisma.QualsSpeakingAspectFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingAspectFindUniqueArgs>
  ): Promise<PrismaQualsSpeakingAspect | null> {
    return this.prisma.qualsSpeakingAspect.findUnique(args);
  }
  async createQualsSpeakingAspect<
    T extends Prisma.QualsSpeakingAspectCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingAspectCreateArgs>
  ): Promise<PrismaQualsSpeakingAspect> {
    return this.prisma.qualsSpeakingAspect.create<T>(args);
  }
  async updateQualsSpeakingAspect<
    T extends Prisma.QualsSpeakingAspectUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingAspectUpdateArgs>
  ): Promise<PrismaQualsSpeakingAspect> {
    return this.prisma.qualsSpeakingAspect.update<T>(args);
  }
  async deleteQualsSpeakingAspect<
    T extends Prisma.QualsSpeakingAspectDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.QualsSpeakingAspectDeleteArgs>
  ): Promise<PrismaQualsSpeakingAspect> {
    return this.prisma.qualsSpeakingAspect.delete(args);
  }

  async getQualsSpeaking(
    parentId: number
  ): Promise<PrismaQualsSpeaking | null> {
    return this.prisma.qualsSpeakingAspect
      .findUnique({
        where: { id: parentId },
      })
      .qualsSpeaking();
  }
}
