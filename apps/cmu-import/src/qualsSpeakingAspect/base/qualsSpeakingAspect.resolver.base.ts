/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualsSpeakingAspect } from "./QualsSpeakingAspect";
import { QualsSpeakingAspectCountArgs } from "./QualsSpeakingAspectCountArgs";
import { QualsSpeakingAspectFindManyArgs } from "./QualsSpeakingAspectFindManyArgs";
import { QualsSpeakingAspectFindUniqueArgs } from "./QualsSpeakingAspectFindUniqueArgs";
import { CreateQualsSpeakingAspectArgs } from "./CreateQualsSpeakingAspectArgs";
import { UpdateQualsSpeakingAspectArgs } from "./UpdateQualsSpeakingAspectArgs";
import { DeleteQualsSpeakingAspectArgs } from "./DeleteQualsSpeakingAspectArgs";
import { QualsSpeaking } from "../../qualsSpeaking/base/QualsSpeaking";
import { QualsSpeakingAspectService } from "../qualsSpeakingAspect.service";
@graphql.Resolver(() => QualsSpeakingAspect)
export class QualsSpeakingAspectResolverBase {
  constructor(protected readonly service: QualsSpeakingAspectService) {}

  async _qualsSpeakingAspectsMeta(
    @graphql.Args() args: QualsSpeakingAspectCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualsSpeakingAspect])
  async qualsSpeakingAspects(
    @graphql.Args() args: QualsSpeakingAspectFindManyArgs
  ): Promise<QualsSpeakingAspect[]> {
    return this.service.qualsSpeakingAspects(args);
  }

  @graphql.Query(() => QualsSpeakingAspect, { nullable: true })
  async qualsSpeakingAspect(
    @graphql.Args() args: QualsSpeakingAspectFindUniqueArgs
  ): Promise<QualsSpeakingAspect | null> {
    const result = await this.service.qualsSpeakingAspect(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualsSpeakingAspect)
  async createQualsSpeakingAspect(
    @graphql.Args() args: CreateQualsSpeakingAspectArgs
  ): Promise<QualsSpeakingAspect> {
    return await this.service.createQualsSpeakingAspect({
      ...args,
      data: {
        ...args.data,

        qualsSpeaking: args.data.qualsSpeaking
          ? {
              connect: args.data.qualsSpeaking,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QualsSpeakingAspect)
  async updateQualsSpeakingAspect(
    @graphql.Args() args: UpdateQualsSpeakingAspectArgs
  ): Promise<QualsSpeakingAspect | null> {
    try {
      return await this.service.updateQualsSpeakingAspect({
        ...args,
        data: {
          ...args.data,

          qualsSpeaking: args.data.qualsSpeaking
            ? {
                connect: args.data.qualsSpeaking,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualsSpeakingAspect)
  async deleteQualsSpeakingAspect(
    @graphql.Args() args: DeleteQualsSpeakingAspectArgs
  ): Promise<QualsSpeakingAspect | null> {
    try {
      return await this.service.deleteQualsSpeakingAspect(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QualsSpeaking, {
    nullable: true,
    name: "qualsSpeaking",
  })
  async getQualsSpeaking(
    @graphql.Parent() parent: QualsSpeakingAspect
  ): Promise<QualsSpeaking | null> {
    const result = await this.service.getQualsSpeaking(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
