/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualsSpeakingAspectService } from "../qualsSpeakingAspect.service";
import { QualsSpeakingAspectCreateInput } from "./QualsSpeakingAspectCreateInput";
import { QualsSpeakingAspect } from "./QualsSpeakingAspect";
import { QualsSpeakingAspectFindManyArgs } from "./QualsSpeakingAspectFindManyArgs";
import { QualsSpeakingAspectWhereUniqueInput } from "./QualsSpeakingAspectWhereUniqueInput";
import { QualsSpeakingAspectUpdateInput } from "./QualsSpeakingAspectUpdateInput";

export class QualsSpeakingAspectControllerBase {
  constructor(protected readonly service: QualsSpeakingAspectService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QualsSpeakingAspect })
  async createQualsSpeakingAspect(
    @common.Body() data: QualsSpeakingAspectCreateInput
  ): Promise<QualsSpeakingAspect> {
    return await this.service.createQualsSpeakingAspect({
      data: {
        ...data,

        qualsSpeaking: data.qualsSpeaking
          ? {
              connect: data.qualsSpeaking,
            }
          : undefined,
      },
      select: {
        id: true,

        qualsSpeaking: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QualsSpeakingAspect] })
  @ApiNestedQuery(QualsSpeakingAspectFindManyArgs)
  async qualsSpeakingAspects(
    @common.Req() request: Request
  ): Promise<QualsSpeakingAspect[]> {
    const args = plainToClass(QualsSpeakingAspectFindManyArgs, request.query);
    return this.service.qualsSpeakingAspects({
      ...args,
      select: {
        id: true,

        qualsSpeaking: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QualsSpeakingAspect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qualsSpeakingAspect(
    @common.Param() params: QualsSpeakingAspectWhereUniqueInput
  ): Promise<QualsSpeakingAspect | null> {
    const result = await this.service.qualsSpeakingAspect({
      where: params,
      select: {
        id: true,

        qualsSpeaking: {
          select: {
            id: true,
          },
        },

        text: true,
        type: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QualsSpeakingAspect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQualsSpeakingAspect(
    @common.Param() params: QualsSpeakingAspectWhereUniqueInput,
    @common.Body() data: QualsSpeakingAspectUpdateInput
  ): Promise<QualsSpeakingAspect | null> {
    try {
      return await this.service.updateQualsSpeakingAspect({
        where: params,
        data: {
          ...data,

          qualsSpeaking: data.qualsSpeaking
            ? {
                connect: data.qualsSpeaking,
              }
            : undefined,
        },
        select: {
          id: true,

          qualsSpeaking: {
            select: {
              id: true,
            },
          },

          text: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QualsSpeakingAspect })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQualsSpeakingAspect(
    @common.Param() params: QualsSpeakingAspectWhereUniqueInput
  ): Promise<QualsSpeakingAspect | null> {
    try {
      return await this.service.deleteQualsSpeakingAspect({
        where: params,
        select: {
          id: true,

          qualsSpeaking: {
            select: {
              id: true,
            },
          },

          text: true,
          type: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
