/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AgendaItem } from "./AgendaItem";
import { AgendaItemCountArgs } from "./AgendaItemCountArgs";
import { AgendaItemFindManyArgs } from "./AgendaItemFindManyArgs";
import { AgendaItemFindUniqueArgs } from "./AgendaItemFindUniqueArgs";
import { CreateAgendaItemArgs } from "./CreateAgendaItemArgs";
import { UpdateAgendaItemArgs } from "./UpdateAgendaItemArgs";
import { DeleteAgendaItemArgs } from "./DeleteAgendaItemArgs";
import { AgendaItemService } from "../agendaItem.service";
@graphql.Resolver(() => AgendaItem)
export class AgendaItemResolverBase {
  constructor(protected readonly service: AgendaItemService) {}

  async _agendaItemsMeta(
    @graphql.Args() args: AgendaItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AgendaItem])
  async agendaItems(
    @graphql.Args() args: AgendaItemFindManyArgs
  ): Promise<AgendaItem[]> {
    return this.service.agendaItems(args);
  }

  @graphql.Query(() => AgendaItem, { nullable: true })
  async agendaItem(
    @graphql.Args() args: AgendaItemFindUniqueArgs
  ): Promise<AgendaItem | null> {
    const result = await this.service.agendaItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AgendaItem)
  async createAgendaItem(
    @graphql.Args() args: CreateAgendaItemArgs
  ): Promise<AgendaItem> {
    return await this.service.createAgendaItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AgendaItem)
  async updateAgendaItem(
    @graphql.Args() args: UpdateAgendaItemArgs
  ): Promise<AgendaItem | null> {
    try {
      return await this.service.updateAgendaItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AgendaItem)
  async deleteAgendaItem(
    @graphql.Args() args: DeleteAgendaItemArgs
  ): Promise<AgendaItem | null> {
    try {
      return await this.service.deleteAgendaItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
