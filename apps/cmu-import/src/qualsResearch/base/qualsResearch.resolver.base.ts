/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { QualsResearch } from "./QualsResearch";
import { QualsResearchCountArgs } from "./QualsResearchCountArgs";
import { QualsResearchFindManyArgs } from "./QualsResearchFindManyArgs";
import { QualsResearchFindUniqueArgs } from "./QualsResearchFindUniqueArgs";
import { CreateQualsResearchArgs } from "./CreateQualsResearchArgs";
import { UpdateQualsResearchArgs } from "./UpdateQualsResearchArgs";
import { DeleteQualsResearchArgs } from "./DeleteQualsResearchArgs";
import { QualsCommittee } from "../../qualsCommittee/base/QualsCommittee";
import { QualsResearchService } from "../qualsResearch.service";
@graphql.Resolver(() => QualsResearch)
export class QualsResearchResolverBase {
  constructor(protected readonly service: QualsResearchService) {}

  async _qualsResearchesMeta(
    @graphql.Args() args: QualsResearchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [QualsResearch])
  async qualsResearches(
    @graphql.Args() args: QualsResearchFindManyArgs
  ): Promise<QualsResearch[]> {
    return this.service.qualsResearches(args);
  }

  @graphql.Query(() => QualsResearch, { nullable: true })
  async qualsResearch(
    @graphql.Args() args: QualsResearchFindUniqueArgs
  ): Promise<QualsResearch | null> {
    const result = await this.service.qualsResearch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => QualsResearch)
  async createQualsResearch(
    @graphql.Args() args: CreateQualsResearchArgs
  ): Promise<QualsResearch> {
    return await this.service.createQualsResearch({
      ...args,
      data: {
        ...args.data,

        qualsCommittee: args.data.qualsCommittee
          ? {
              connect: args.data.qualsCommittee,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => QualsResearch)
  async updateQualsResearch(
    @graphql.Args() args: UpdateQualsResearchArgs
  ): Promise<QualsResearch | null> {
    try {
      return await this.service.updateQualsResearch({
        ...args,
        data: {
          ...args.data,

          qualsCommittee: args.data.qualsCommittee
            ? {
                connect: args.data.qualsCommittee,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => QualsResearch)
  async deleteQualsResearch(
    @graphql.Args() args: DeleteQualsResearchArgs
  ): Promise<QualsResearch | null> {
    try {
      return await this.service.deleteQualsResearch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => QualsCommittee, {
    nullable: true,
    name: "qualsCommittee",
  })
  async getQualsCommittee(
    @graphql.Parent() parent: QualsResearch
  ): Promise<QualsCommittee | null> {
    const result = await this.service.getQualsCommittee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
