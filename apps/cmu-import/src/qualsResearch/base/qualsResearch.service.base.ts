/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  QualsResearch as PrismaQualsResearch,
  QualsCommittee as PrismaQualsCommittee,
} from "@prisma/client";

export class QualsResearchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.QualsResearchCountArgs, "select">
  ): Promise<number> {
    return this.prisma.qualsResearch.count(args);
  }

  async qualsResearches<T extends Prisma.QualsResearchFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchFindManyArgs>
  ): Promise<PrismaQualsResearch[]> {
    return this.prisma.qualsResearch.findMany<Prisma.QualsResearchFindManyArgs>(
      args
    );
  }
  async qualsResearch<T extends Prisma.QualsResearchFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchFindUniqueArgs>
  ): Promise<PrismaQualsResearch | null> {
    return this.prisma.qualsResearch.findUnique(args);
  }
  async createQualsResearch<T extends Prisma.QualsResearchCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchCreateArgs>
  ): Promise<PrismaQualsResearch> {
    return this.prisma.qualsResearch.create<T>(args);
  }
  async updateQualsResearch<T extends Prisma.QualsResearchUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchUpdateArgs>
  ): Promise<PrismaQualsResearch> {
    return this.prisma.qualsResearch.update<T>(args);
  }
  async deleteQualsResearch<T extends Prisma.QualsResearchDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.QualsResearchDeleteArgs>
  ): Promise<PrismaQualsResearch> {
    return this.prisma.qualsResearch.delete(args);
  }

  async getQualsCommittee(
    parentId: number
  ): Promise<PrismaQualsCommittee | null> {
    return this.prisma.qualsResearch
      .findUnique({
        where: { id: parentId },
      })
      .qualsCommittee();
  }
}
