/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { QualsResearchService } from "../qualsResearch.service";
import { QualsResearchCreateInput } from "./QualsResearchCreateInput";
import { QualsResearch } from "./QualsResearch";
import { QualsResearchFindManyArgs } from "./QualsResearchFindManyArgs";
import { QualsResearchWhereUniqueInput } from "./QualsResearchWhereUniqueInput";
import { QualsResearchUpdateInput } from "./QualsResearchUpdateInput";

export class QualsResearchControllerBase {
  constructor(protected readonly service: QualsResearchService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: QualsResearch })
  async createQualsResearch(
    @common.Body() data: QualsResearchCreateInput
  ): Promise<QualsResearch> {
    return await this.service.createQualsResearch({
      data: {
        ...data,

        qualsCommittee: data.qualsCommittee
          ? {
              connect: data.qualsCommittee,
            }
          : undefined,
      },
      select: {
        approach: true,
        approachExp: true,
        id: true,
        insight: true,
        insightExp: true,
        interpretation: true,
        interpretationExp: true,
        overall: true,
        overallExp: true,
        progress: true,

        qualsCommittee: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [QualsResearch] })
  @ApiNestedQuery(QualsResearchFindManyArgs)
  async qualsResearches(
    @common.Req() request: Request
  ): Promise<QualsResearch[]> {
    const args = plainToClass(QualsResearchFindManyArgs, request.query);
    return this.service.qualsResearches({
      ...args,
      select: {
        approach: true,
        approachExp: true,
        id: true,
        insight: true,
        insightExp: true,
        interpretation: true,
        interpretationExp: true,
        overall: true,
        overallExp: true,
        progress: true,

        qualsCommittee: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: QualsResearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async qualsResearch(
    @common.Param() params: QualsResearchWhereUniqueInput
  ): Promise<QualsResearch | null> {
    const result = await this.service.qualsResearch({
      where: params,
      select: {
        approach: true,
        approachExp: true,
        id: true,
        insight: true,
        insightExp: true,
        interpretation: true,
        interpretationExp: true,
        overall: true,
        overallExp: true,
        progress: true,

        qualsCommittee: {
          select: {
            id: true,
          },
        },

        status: true,
        studentId: true,
        summary: true,
        timestamp: true,
        understanding: true,
        understandingExp: true,
        urId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: QualsResearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateQualsResearch(
    @common.Param() params: QualsResearchWhereUniqueInput,
    @common.Body() data: QualsResearchUpdateInput
  ): Promise<QualsResearch | null> {
    try {
      return await this.service.updateQualsResearch({
        where: params,
        data: {
          ...data,

          qualsCommittee: data.qualsCommittee
            ? {
                connect: data.qualsCommittee,
              }
            : undefined,
        },
        select: {
          approach: true,
          approachExp: true,
          id: true,
          insight: true,
          insightExp: true,
          interpretation: true,
          interpretationExp: true,
          overall: true,
          overallExp: true,
          progress: true,

          qualsCommittee: {
            select: {
              id: true,
            },
          },

          status: true,
          studentId: true,
          summary: true,
          timestamp: true,
          understanding: true,
          understandingExp: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: QualsResearch })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteQualsResearch(
    @common.Param() params: QualsResearchWhereUniqueInput
  ): Promise<QualsResearch | null> {
    try {
      return await this.service.deleteQualsResearch({
        where: params,
        select: {
          approach: true,
          approachExp: true,
          id: true,
          insight: true,
          insightExp: true,
          interpretation: true,
          interpretationExp: true,
          overall: true,
          overallExp: true,
          progress: true,

          qualsCommittee: {
            select: {
              id: true,
            },
          },

          status: true,
          studentId: true,
          summary: true,
          timestamp: true,
          understanding: true,
          understandingExp: true,
          urId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
