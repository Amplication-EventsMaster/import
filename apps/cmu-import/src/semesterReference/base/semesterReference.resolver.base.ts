/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SemesterReference } from "./SemesterReference";
import { SemesterReferenceCountArgs } from "./SemesterReferenceCountArgs";
import { SemesterReferenceFindManyArgs } from "./SemesterReferenceFindManyArgs";
import { SemesterReferenceFindUniqueArgs } from "./SemesterReferenceFindUniqueArgs";
import { CreateSemesterReferenceArgs } from "./CreateSemesterReferenceArgs";
import { UpdateSemesterReferenceArgs } from "./UpdateSemesterReferenceArgs";
import { DeleteSemesterReferenceArgs } from "./DeleteSemesterReferenceArgs";
import { SemesterReferenceService } from "../semesterReference.service";
@graphql.Resolver(() => SemesterReference)
export class SemesterReferenceResolverBase {
  constructor(protected readonly service: SemesterReferenceService) {}

  async _semesterReferencesMeta(
    @graphql.Args() args: SemesterReferenceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SemesterReference])
  async semesterReferences(
    @graphql.Args() args: SemesterReferenceFindManyArgs
  ): Promise<SemesterReference[]> {
    return this.service.semesterReferences(args);
  }

  @graphql.Query(() => SemesterReference, { nullable: true })
  async semesterReference(
    @graphql.Args() args: SemesterReferenceFindUniqueArgs
  ): Promise<SemesterReference | null> {
    const result = await this.service.semesterReference(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SemesterReference)
  async createSemesterReference(
    @graphql.Args() args: CreateSemesterReferenceArgs
  ): Promise<SemesterReference> {
    return await this.service.createSemesterReference({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SemesterReference)
  async updateSemesterReference(
    @graphql.Args() args: UpdateSemesterReferenceArgs
  ): Promise<SemesterReference | null> {
    try {
      return await this.service.updateSemesterReference({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SemesterReference)
  async deleteSemesterReference(
    @graphql.Args() args: DeleteSemesterReferenceArgs
  ): Promise<SemesterReference | null> {
    try {
      return await this.service.deleteSemesterReference(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
