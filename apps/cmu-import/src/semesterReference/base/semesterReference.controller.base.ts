/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SemesterReferenceService } from "../semesterReference.service";
import { SemesterReferenceCreateInput } from "./SemesterReferenceCreateInput";
import { SemesterReference } from "./SemesterReference";
import { SemesterReferenceFindManyArgs } from "./SemesterReferenceFindManyArgs";
import { SemesterReferenceWhereUniqueInput } from "./SemesterReferenceWhereUniqueInput";
import { SemesterReferenceUpdateInput } from "./SemesterReferenceUpdateInput";

export class SemesterReferenceControllerBase {
  constructor(protected readonly service: SemesterReferenceService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SemesterReference })
  async createSemesterReference(
    @common.Body() data: SemesterReferenceCreateInput
  ): Promise<SemesterReference> {
    return await this.service.createSemesterReference({
      data: data,
      select: {
        id: true,
        optional: true,
        refAbbrev: true,
        refDay: true,
        refMonth: true,
        refName: true,
        rprefId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SemesterReference] })
  @ApiNestedQuery(SemesterReferenceFindManyArgs)
  async semesterReferences(
    @common.Req() request: Request
  ): Promise<SemesterReference[]> {
    const args = plainToClass(SemesterReferenceFindManyArgs, request.query);
    return this.service.semesterReferences({
      ...args,
      select: {
        id: true,
        optional: true,
        refAbbrev: true,
        refDay: true,
        refMonth: true,
        refName: true,
        rprefId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SemesterReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async semesterReference(
    @common.Param() params: SemesterReferenceWhereUniqueInput
  ): Promise<SemesterReference | null> {
    const result = await this.service.semesterReference({
      where: params,
      select: {
        id: true,
        optional: true,
        refAbbrev: true,
        refDay: true,
        refMonth: true,
        refName: true,
        rprefId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SemesterReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSemesterReference(
    @common.Param() params: SemesterReferenceWhereUniqueInput,
    @common.Body() data: SemesterReferenceUpdateInput
  ): Promise<SemesterReference | null> {
    try {
      return await this.service.updateSemesterReference({
        where: params,
        data: data,
        select: {
          id: true,
          optional: true,
          refAbbrev: true,
          refDay: true,
          refMonth: true,
          refName: true,
          rprefId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SemesterReference })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSemesterReference(
    @common.Param() params: SemesterReferenceWhereUniqueInput
  ): Promise<SemesterReference | null> {
    try {
      return await this.service.deleteSemesterReference({
        where: params,
        select: {
          id: true,
          optional: true,
          refAbbrev: true,
          refDay: true,
          refMonth: true,
          refName: true,
          rprefId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
