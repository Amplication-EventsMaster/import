/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LegacyRequirement as PrismaLegacyRequirement,
  StudentDatum as PrismaStudentDatum,
} from "@prisma/client";

export class LegacyRequirementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LegacyRequirementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.legacyRequirement.count(args);
  }

  async legacyRequirements<T extends Prisma.LegacyRequirementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LegacyRequirementFindManyArgs>
  ): Promise<PrismaLegacyRequirement[]> {
    return this.prisma.legacyRequirement.findMany<Prisma.LegacyRequirementFindManyArgs>(
      args
    );
  }
  async legacyRequirement<T extends Prisma.LegacyRequirementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LegacyRequirementFindUniqueArgs>
  ): Promise<PrismaLegacyRequirement | null> {
    return this.prisma.legacyRequirement.findUnique(args);
  }
  async createLegacyRequirement<T extends Prisma.LegacyRequirementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LegacyRequirementCreateArgs>
  ): Promise<PrismaLegacyRequirement> {
    return this.prisma.legacyRequirement.create<T>(args);
  }
  async updateLegacyRequirement<T extends Prisma.LegacyRequirementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LegacyRequirementUpdateArgs>
  ): Promise<PrismaLegacyRequirement> {
    return this.prisma.legacyRequirement.update<T>(args);
  }
  async deleteLegacyRequirement<T extends Prisma.LegacyRequirementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LegacyRequirementDeleteArgs>
  ): Promise<PrismaLegacyRequirement> {
    return this.prisma.legacyRequirement.delete(args);
  }

  async getStudentData(parentId: number): Promise<PrismaStudentDatum | null> {
    return this.prisma.legacyRequirement
      .findUnique({
        where: { id: parentId },
      })
      .studentData();
  }
}
