/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LegacyRequirement } from "./LegacyRequirement";
import { LegacyRequirementCountArgs } from "./LegacyRequirementCountArgs";
import { LegacyRequirementFindManyArgs } from "./LegacyRequirementFindManyArgs";
import { LegacyRequirementFindUniqueArgs } from "./LegacyRequirementFindUniqueArgs";
import { CreateLegacyRequirementArgs } from "./CreateLegacyRequirementArgs";
import { UpdateLegacyRequirementArgs } from "./UpdateLegacyRequirementArgs";
import { DeleteLegacyRequirementArgs } from "./DeleteLegacyRequirementArgs";
import { StudentDatum } from "../../studentDatum/base/StudentDatum";
import { LegacyRequirementService } from "../legacyRequirement.service";
@graphql.Resolver(() => LegacyRequirement)
export class LegacyRequirementResolverBase {
  constructor(protected readonly service: LegacyRequirementService) {}

  async _legacyRequirementsMeta(
    @graphql.Args() args: LegacyRequirementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LegacyRequirement])
  async legacyRequirements(
    @graphql.Args() args: LegacyRequirementFindManyArgs
  ): Promise<LegacyRequirement[]> {
    return this.service.legacyRequirements(args);
  }

  @graphql.Query(() => LegacyRequirement, { nullable: true })
  async legacyRequirement(
    @graphql.Args() args: LegacyRequirementFindUniqueArgs
  ): Promise<LegacyRequirement | null> {
    const result = await this.service.legacyRequirement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LegacyRequirement)
  async createLegacyRequirement(
    @graphql.Args() args: CreateLegacyRequirementArgs
  ): Promise<LegacyRequirement> {
    return await this.service.createLegacyRequirement({
      ...args,
      data: {
        ...args.data,

        studentData: {
          connect: args.data.studentData,
        },
      },
    });
  }

  @graphql.Mutation(() => LegacyRequirement)
  async updateLegacyRequirement(
    @graphql.Args() args: UpdateLegacyRequirementArgs
  ): Promise<LegacyRequirement | null> {
    try {
      return await this.service.updateLegacyRequirement({
        ...args,
        data: {
          ...args.data,

          studentData: {
            connect: args.data.studentData,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LegacyRequirement)
  async deleteLegacyRequirement(
    @graphql.Args() args: DeleteLegacyRequirementArgs
  ): Promise<LegacyRequirement | null> {
    try {
      return await this.service.deleteLegacyRequirement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => StudentDatum, {
    nullable: true,
    name: "studentData",
  })
  async getStudentData(
    @graphql.Parent() parent: LegacyRequirement
  ): Promise<StudentDatum | null> {
    const result = await this.service.getStudentData(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
